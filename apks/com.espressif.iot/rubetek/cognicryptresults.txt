SLF4J: Failed to load class "org.slf4j.impl.StaticLoggerBinder".
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.
0    [main] WARN  pes.access.impl.DeclaredTypeFactory  - --- xtext.common.types ---------------------------------------------------
0    [main] WARN  pes.access.impl.DeclaredTypeFactory  - ASM library is too old. Falling back to java.lang.reflect API.
1    [main] WARN  pes.access.impl.DeclaredTypeFactory  - Please note that no information about compile time constants is available.
1    [main] WARN  pes.access.impl.DeclaredTypeFactory  - It's recommended to use org.objectweb.asm 9.3.0 or better (Maven group id: org.ow2.asm).
1    [main] WARN  pes.access.impl.DeclaredTypeFactory  - --------------------------------------------------------------------------
Alive 21042  5000
Ruleset: 
	javax.net.ssl.KeyStoreBuilderParameters
	javax.crypto.spec.PBEKeySpec
	java.security.spec.MGF1ParameterSpec
	java.security.MessageDigest
	javax.crypto.Cipher
	java.security.KeyPair
	javax.crypto.SecretKeyFactory
	java.security.cert.PKIXBuilderParameters
	javax.crypto.SecretKey
	javax.crypto.spec.IvParameterSpec
	javax.crypto.spec.PBEParameterSpec
	javax.net.ssl.TrustManagerFactory
	javax.crypto.spec.GCMParameterSpec
	javax.crypto.spec.SecretKeySpec
	javax.net.ssl.CertPathTrustManagerParameters
	java.security.spec.DSAParameterSpec
	javax.crypto.KeyAgreement
	java.security.cert.TrustAnchor
	javax.crypto.spec.DHParameterSpec
	javax.net.ssl.SSLParameters
	javax.net.ssl.SSLContext
	java.security.Key
	java.security.KeyFactory
	void
	java.security.DigestOutputStream
	java.security.SecureRandom
	java.security.cert.PKIXParameters
	java.security.spec.X509EncodedKeySpec
	javax.crypto.spec.DHGenParameterSpec
	javax.net.ssl.SSLEngine
	java.security.spec.RSAKeyGenParameterSpec
	java.security.Signature
	javax.crypto.CipherOutputStream
	javax.xml.crypto.dsig.spec.HMACParameterSpec
	java.security.AlgorithmParameterGenerator
	javax.crypto.Mac
	javax.crypto.spec.OAEPParameterSpec
	java.security.AlgorithmParameters
	javax.crypto.CipherInputStream
	java.security.DigestInputStream
	java.security.spec.ECParameterSpec
	javax.crypto.KeyGenerator
	java.security.KeyStore
	java.security.spec.ECGenParameterSpec
	java.security.KeyPairGenerator
	javax.net.ssl.KeyManagerFactory
	java.security.spec.DSAGenParameterSpec

Analyzed Objects: 
	Object:
		Variable: $r0
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r0.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r3, varReplacer220908)
		Method: <com.meari.sdk.utils.HmacshaUtil: byte[] HmacSHA1Encrypt(java.lang.String,java.lang.String)>
		SHA-256: b9eb289899a9a1a2053150bf4cbbb9cf909c64f9a61f8c3c07902aaf94e9ec09
		Secure: false
	Object:
		Variable: $r17
		Type: javax.net.ssl.KeyManager[]
		Statement: $r17 = virtualinvoke $r16.<javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManager[] getKeyManagers()>()
		Method: <org.eclipse.paho.client.mqttv3.internal.security.SSLSocketFactoryFactory: javax.net.ssl.SSLContext m(java.lang.String)>
		SHA-256: f134bbef0d9d28dae78a80ef50cf539d9929f5c5c2ca9a9291610b705f2bf446
		Secure: false
	Object:
		Variable: $r2
		Type: java.security.SecureRandom
		Statement: specialinvoke $r2.<java.security.SecureRandom: void <init>()>()
		Method: <com.rubetek.client.modules.cameras.inewcam.PasswordGenerator: void <init>(int)>
		SHA-256: 98045343f43111b62cc9ac40a99e8620aa5c4a8412444e47196fcb24bd13b8e1
		Secure: true
	Object:
		Variable: $r23
		Type: java.security.PublicKey
		Statement: $r23 = virtualinvoke $r21.<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>($r22)
		Method: <com.google.android.play.core.internal.zzi: java.security.cert.X509Certificate[] zzj(java.nio.ByteBuffer,java.util.Map,java.security.cert.CertificateFactory)>
		SHA-256: 925fcb7c420c83eb7bab9cb18984c5afcce87459bbfd1762599d7867241aefda
		Secure: false
	Object:
		Variable: $r3
		Type: javax.crypto.Cipher
		Statement: $r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer221419)
		Method: <com.p2p.core.utils.DES: byte[] desDecrypt(byte[],byte[])>
		SHA-256: 54e8b6f51190ae08b4d41c9deea8c601f408f683f996bbf41c92d9ad912476a6
		Secure: false
	Object:
		Variable: $r2
		Type: byte[]
		Statement: $r2 = virtualinvoke $r6.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r3)
		Method: <org.apache.http.impl.auth.NTLMEngineImpl: byte[] lmHash(java.lang.String)>
		SHA-256: d25cbabbd6d35e4d1ce8d7ea1b95f2cb61d74b6e8ef4ec7bfbb48f440ad14814
		Secure: false
	Object:
		Variable: $r3
		Type: java.security.KeyFactory
		Statement: $r3 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>(varReplacer312989)
		Method: <com.google.firebase.installations.local.IidStore: java.security.PublicKey parseKey(java.lang.String)>
		SHA-256: 4c06ab576edd58d0ba57afa66393d5685f5ec70fb0dd21d60d53d3656e8f3f2d
		Secure: false
	Object:
		Variable: $r12
		Type: javax.net.ssl.TrustManager[]
		Statement: $r12 = virtualinvoke $r11.<javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManager[] getTrustManagers()>()
		Method: <com.meari.sdk.utils.SdkUtils: javax.net.SocketFactory getIotFactory(android.content.Context)>
		SHA-256: 61226587c114de4b25de394c9efa14ae687793c420631c8bf3c97cef1c3065bc
		Secure: false
	Object:
		Variable: $r6
		Type: byte[]
		Statement: $r6 = interfaceinvoke $r5.<java.security.Key: byte[] getEncoded()>()
		Method: <com.tozny.crypto.android.AesCbcWithIntegrity: com.tozny.crypto.android.AesCbcWithIntegrity$SecretKeys l(java.lang.String,byte[],int)>
		SHA-256: 2065a37f55e11b72d03ad822a3f9debd21396f54e456e4a4fb5fc3ae35d35ed7
		Secure: true
	Object:
		Variable: $r5
		Type: byte[]
		Statement: $z0 = virtualinvoke $r3.<java.security.Signature: boolean verify(byte[])>($r5)
		Method: <org.conscrypt.OpenSSLX509Certificate: void verifyInternal(java.security.PublicKey,java.lang.String)>
		SHA-256: e75571d33abb1b5e330ac5b78fcc009ac5fa3b4053acda20dad8234c0598d879
		Secure: false
	Object:
		Variable: $r24
		Type: byte[]
		Statement: $r24 = virtualinvoke $r25.<java.security.MessageDigest: byte[] digest(byte[])>($r24)
		Method: <org.apache.http.impl.auth.DigestScheme: org.apache.http.Header createDigestHeader(org.apache.http.auth.Credentials,org.apache.http.HttpRequest)>
		SHA-256: d6819f5a090592a9c309f7dee8c1d3060c928c197153632cc3c4595ac59ae53a
		Secure: false
	Object:
		Variable: $r4
		Type: byte[]
		Statement: $r4 = virtualinvoke $r7.<java.security.MessageDigest: byte[] digest(byte[])>($r4)
		Method: <com.google.android.play.core.internal.zzi: byte[][] zzk(int[],com.google.android.play.core.internal.zzc[])>
		SHA-256: efdd3174e987a839972cd40c33ecc729c7eae411a295a19549d2a73d31327c56
		Secure: true
	Object:
		Variable: $r5
		Type: javax.crypto.Cipher
		Statement: $r5 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer226590)
		Method: <com.amazonaws.internal.keyvaluestore.AWSKeyValueStore: java.lang.String c(java.security.Key,java.security.spec.AlgorithmParameterSpec,java.lang.String)>
		SHA-256: 6cc08d54498aeb2d6020df0ebf92950832daff9a2b692f5cdeefd20a81e906af
		Secure: false
	Object:
		Variable: $r2
		Type: javax.crypto.Cipher
		Statement: $r2 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer220151)
		Method: <com.google.android.exoplayer2.upstream.crypto.AesFlushingCipher: void <init>(int,byte[],long,long)>
		SHA-256: 3ba11e35386f6f90c206ad6406d15c16f9b73baef68bd9b75a23bfddf345e69d
		Secure: false
	Object:
		Variable: $r5
		Type: javax.crypto.Cipher
		Statement: $r5 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer57583)
		Method: <com.tozny.crypto.android.AesCbcWithIntegrity: byte[] c(com.tozny.crypto.android.AesCbcWithIntegrity$CipherTextIvMac,com.tozny.crypto.android.AesCbcWithIntegrity$SecretKeys)>
		SHA-256: 781ea8ff9859bd0e0e00a2b618e3bbb728450af0e2c45ed8a8af9da72695fd64
		Secure: false
	Object:
		Variable: varReplacer95379
		Type: java.lang.String
		Statement: specialinvoke $r5.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r6, varReplacer95379)
		Method: <com.amazonaws.mobileconnectors.cognitoidentityprovider.util.CognitoSecretHash: java.lang.String a(java.lang.String,java.lang.String,java.lang.String)>
		SHA-256: 4f9b8c58a6c2c2ad372d0d9ceada9938f86ce12bdba4b49daf3fecf3a28952a
		Secure: false
	Object:
		Variable: varReplacer258821
		Type: java.lang.String
		Statement: specialinvoke $r14.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r11, varReplacer258821)
		Method: <com.amazonaws.mobileconnectors.cognitoidentityprovider.CognitoUser: com.amazonaws.services.cognitoidentityprovider.model.RespondToAuthChallengeRequest X(com.amazonaws.services.cognitoidentityprovider.model.RespondToAuthChallengeResult,java.lang.String,java.lang.String,com.amazonaws.mobileconnectors.cognitoidentityprovider.CognitoUser$AuthenticationHelper)>
		SHA-256: 270672e0e1230625667041c4619b77bcbd85c5329c6aa2e4d40e94b7aa6c9f22
		Secure: false
	Object:
		Variable: $r0
		Type: java.security.SecureRandom
		Statement: specialinvoke $r0.<java.security.SecureRandom: void <init>()>()
		Method: <org.eclipse.paho.client.mqttv3.internal.websocket.WebSocketFrame: byte[] e()>
		SHA-256: adfeafb8a5c024483b598b5457a581ee14c1057aeb81a9830814f03073c67947
		Secure: true
	Object:
		Variable: $r16
		Type: javax.net.ssl.TrustManagerFactory
		Statement: $r16 = staticinvoke <javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String)>(varReplacer287796)
		Method: <com.meari.sdk.mqtt.f: void c()>
		SHA-256: 710a35ba56a56fa3fec4c333abf642570929d524acf0adacbdcf9c2fc76f7a0b
		Secure: false
	Object:
		Variable: $r3
		Type: java.security.PublicKey
		Statement: $r4 = interfaceinvoke $r3.<java.security.Key: byte[] getEncoded()>()
		Method: <okhttp3.CertificatePinner$Companion: okio.ByteString sha256Hash(java.security.cert.X509Certificate)>
		SHA-256: 7c170074655f341be4634b6f15be1b9f96999e6dd57ddf740572443684f1c839
		Secure: true
	Object:
		Variable: $r10
		Type: java.security.KeyStore
		Statement: $r10 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>(varReplacer287802)
		Method: <com.meari.sdk.mqtt.f: void c()>
		SHA-256: f4a17902cccd62d6bf77ff929ceae4e1e6f0be612261587224f32d6025d91f24
		Secure: false
	Object:
		Variable: $r5
		Type: javax.crypto.SecretKey
		Statement: $r6 = interfaceinvoke $r5.<java.security.Key: byte[] getEncoded()>()
		Method: <com.amazonaws.internal.keyvaluestore.KeyProvider10: java.security.Key a(java.lang.String)>
		SHA-256: 125ef0484711a758d869934b92d5d0f656075c56af3216d4ab9f67eb8766a950
		Secure: true
	Object:
		Variable: $r18
		Type: javax.crypto.CipherInputStream
		Statement: specialinvoke $r18.<javax.crypto.CipherInputStream: void <init>(java.io.InputStream,javax.crypto.Cipher)>($r11, $r14)
		Method: <com.google.android.exoplayer2.upstream.cache.CachedContentIndex$LegacyStorage: boolean readFile(java.util.HashMap,android.util.SparseArray)>
		SHA-256: 6b30d6219e1be8a5e0a9a049ef7eb5d6780a49f6a7b22f8ed8fe44856ade655b
		Secure: false
	Object:
		Variable: $r6
		Type: javax.crypto.Cipher
		Statement: $r6 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer337364)
		Method: <org.apache.http.impl.auth.NTLMEngineImpl: byte[] lmResponse(byte[],byte[])>
		SHA-256: b0d5d0f333e043b4183ddb61051d1a46f709b5ab52bfbadbde6409551ae1d7c9
		Secure: false
	Object:
		Variable: $r4
		Type: javax.net.ssl.TrustManager[]
		Statement: $r4 = virtualinvoke $r3.<javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManager[] getTrustManagers()>()
		Method: <okhttp3.internal.platform.OpenJSSEPlatform: javax.net.ssl.X509TrustManager platformTrustManager()>
		SHA-256: a729cfd5669df603070b7ba7d05b524b10a048ab1da974a5ccb1df973521b7d3
		Secure: false
	Object:
		Variable: r0
		Type: com.amazonaws.internal.SdkDigestInputStream
		Statement: specialinvoke r0.<java.security.DigestInputStream: void <init>(java.io.InputStream,java.security.MessageDigest)>($r1, $r2)
		Method: <com.amazonaws.internal.SdkDigestInputStream: void <init>(java.io.InputStream,java.security.MessageDigest)>
		SHA-256: 9a42f5fce6ab5e869256ff69a376ac48773f99a18c8536697b6a39dd63ec220e
		Secure: false
	Object:
		Variable: $r1
		Type: java.security.MessageDigest
		Statement: $r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r2)
		Method: <com.google.common.hash.MessageDigestHashFunction: java.security.MessageDigest getMessageDigest(java.lang.String)>
		SHA-256: f4e887286d0504cb5722b1da9a4eac06d6ea434977af7216dbf1f6217c285838
		Secure: true
	Object:
		Variable: $r1
		Type: byte[]
		Statement: $r1 = virtualinvoke $r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r1)
		Method: <com.p2p.core.utils.DES: byte[] desDecrypt(byte[],byte[])>
		SHA-256: b368e460885679f3b1ee7a00767e3b6b9d3c4341d11c1433543ce83fefde81a
		Secure: false
	Object:
		Variable: $r8
		Type: java.security.KeyFactory
		Statement: $r8 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>(varReplacer297509)
		Method: <com.google.api.client.auth.openidconnect.IdTokenVerifier$PublicKeyLoader: java.security.PublicKey buildRs256PublicKey(com.google.api.client.auth.openidconnect.IdTokenVerifier$PublicKeyLoader$JsonWebKey)>
		SHA-256: b4c64bf0aee4ca6a8ced94ebc1c49c037ece8ed0ba6976c7a002ada16dc31273
		Secure: false
	Object:
		Variable: $r2
		Type: byte[]
		Statement: $r2 = interfaceinvoke $r1.<java.security.Key: byte[] getEncoded()>()
		Method: <com.google.firebase.installations.local.IidStore: java.lang.String getIdFromPublicKey(java.security.PublicKey)>
		SHA-256: e38086aa359ed23ed760d43bbfd1575f0ffd4a69709adbbc1bb3567fc2b37503
		Secure: true
	Object:
		Variable: $r5
		Type: byte[]
		Statement: $r5 = virtualinvoke $r8.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r5)
		Method: <com.meari.sdk.utils.DesUtils: java.lang.String encode(java.lang.String,java.lang.String,java.lang.String)>
		SHA-256: e3f8ba4b59550ed991accbd8c97b31f47e0db998cc0a0ed84d41c19f81f50b1e
		Secure: false
	Object:
		Variable: $r7
		Type: java.security.PublicKey
		Statement: $r7 = virtualinvoke $r10.<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>($r1)
		Method: <org.conscrypt.OpenSSLX509Certificate: java.security.PublicKey getPublicKey()>
		SHA-256: 9d110d3f3943f5f1538d33e3d18932b71ca7accf2f86c174ab417a2b10712fb0
		Secure: false
	Object:
		Variable: $r2
		Type: java.security.KeyStore
		Statement: $r2 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>(varReplacer258248)
		Method: <com.amazonaws.internal.keyvaluestore.KeyProvider23: java.security.Key b(java.lang.String)>
		SHA-256: 14b30f82a69229dd24cabc23ab356dfd94f61c83d2b78e0ecac3d02731e22203
		Secure: false
	Object:
		Variable: $r2
		Type: byte[]
		Statement: $r2 = virtualinvoke $r3.<java.security.MessageDigest: byte[] digest(byte[])>($r2)
		Method: <com.google.firebase.installations.local.IidStore: java.lang.String getIdFromPublicKey(java.security.PublicKey)>
		SHA-256: ad220c352da86335809a3322a312a9e0b628e3ee4c76f8896e52fc09c31946dd
		Secure: false
	Object:
		Variable: $r0
		Type: java.security.PrivateKey
		Statement: $r3 = interfaceinvoke $r0.<java.security.Key: byte[] getEncoded()>()
		Method: <org.conscrypt.OpenSSLKey: org.conscrypt.OpenSSLKey fromKeyMaterial(java.security.PrivateKey)>
		SHA-256: df91a45ebafc60fd0435225a9a077d75c701164edf9803850477c16c54418e09
		Secure: true
	Object:
		Variable: $r24
		Type: byte[]
		Statement: $r24 = virtualinvoke $r17.<java.security.MessageDigest: byte[] digest(byte[])>($r24)
		Method: <com.google.android.gms.measurement.internal.zzdy: com.google.android.gms.measurement.internal.zzq zzj(java.lang.String)>
		SHA-256: 9291558ddb2f9774443ccac99a0e82776c5cbbb03cfd50560914a12ae3407da3
		Secure: false
	Object:
		Variable: $r7
		Type: javax.crypto.SecretKey
		Statement: $r7 = virtualinvoke $r6.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>($r4)
		Method: <com.meari.sdk.utils.DesUtils: java.lang.String encode(java.lang.String,java.lang.String,java.lang.String)>
		SHA-256: 1747d70060d166cc33b39eed2858d9f5f49c2ad137db3ef59a5f005da280d98b
		Secure: false
	Object:
		Variable: $r7
		Type: byte[]
		Statement: $r7 = virtualinvoke $r6.<javax.crypto.Mac: byte[] doFinal(byte[])>($r7)
		Method: <com.amazonaws.cognito.clientcontext.util.SignatureGenerator: java.lang.String a(java.lang.String,java.lang.String,java.lang.String)>
		SHA-256: 27edbc3023d311c917530732c0164c04c88ee8fe2b8d01ea2fbf9d78ba8d4060
		Secure: false
	Object:
		Variable: $r2
		Type: byte[]
		Statement: virtualinvoke $r1.<java.security.SecureRandom: void nextBytes(byte[])>($r2)
		Method: <org.apache.http.impl.auth.DigestScheme: java.lang.String createCnonce()>
		SHA-256: bbd35c0b9cc04d0eef73b2ad76dd3b0c8a90eec8bc1cf0e85b5f6d07c31b38bf
		Secure: true
	Object:
		Variable: varReplacer289738
		Type: java.lang.String
		Statement: specialinvoke $r7.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, varReplacer289738)
		Method: <com.tozny.crypto.android.AesCbcWithIntegrity: com.tozny.crypto.android.AesCbcWithIntegrity$SecretKeys l(java.lang.String,byte[],int)>
		SHA-256: c123966a14650095d63f137363923148474005f52e30028f573ed8b225af988c
		Secure: true
	Object:
		Variable: $r6
		Type: javax.crypto.Cipher
		Statement: $r6 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer337324)
		Method: <org.apache.http.impl.auth.NTLMEngineImpl$CipherGen: byte[] getLanManagerSessionKey()>
		SHA-256: fdaa2f248a1633422ece896a8d00d110e916413f1bda92cce50743b74aa6ea4e
		Secure: false
	Object:
		Variable: $r11
		Type: javax.net.ssl.TrustManagerFactory
		Statement: $r11 = staticinvoke <javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String)>(varReplacer101588)
		Method: <com.meari.sdk.utils.SdkUtils: javax.net.SocketFactory getIotFactory(android.content.Context)>
		SHA-256: 9959ca85952b18b725b22ba54081e7f07f7391fa52bdd54a2ac597dbfc97aba7
		Secure: false
	Object:
		Variable: $r2
		Type: java.security.MessageDigest
		Statement: $r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer285404)
		Method: <me.pushy.sdk.lib.paho.internal.websocket.WebSocketHandshake: byte[] sha1(java.lang.String)>
		SHA-256: 53738009d6d33fa1a3a423af37075a7967c008166cb25ac1995a6b7a0f4e4040
		Secure: false
	Object:
		Variable: $r17
		Type: javax.net.ssl.TrustManager[]
		Statement: $r17 = virtualinvoke $r16.<javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManager[] getTrustManagers()>()
		Method: <com.meari.sdk.mqtt.f: void c()>
		SHA-256: 3c2e3797c944b360d290b59c6f8de2e7043871988efda89eef01ce9c217ffbbb
		Secure: false
	Object:
		Variable: $r4
		Type: javax.crypto.SecretKeyFactory
		Statement: $r4 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>(varReplacer289744)
		Method: <com.tozny.crypto.android.AesCbcWithIntegrity: com.tozny.crypto.android.AesCbcWithIntegrity$SecretKeys l(java.lang.String,byte[],int)>
		SHA-256: 84f264fb14af19eddeb4446a73025c65fc0dd087d156a9e0ef11c2c67651c783
		Secure: false
	Object:
		Variable: $r16
		Type: javax.net.ssl.KeyManagerFactory
		Statement: $r16 = staticinvoke <javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManagerFactory getInstance(java.lang.String,java.lang.String)>($r11, $r12)
		Method: <me.pushy.sdk.lib.paho.internal.security.SSLSocketFactoryFactory: javax.net.ssl.SSLContext getSSLContext(java.lang.String)>
		SHA-256: 51438369a357067707332506854fc20b41f55bae36aefc78dabd79b339ad0ac5
		Secure: false
	Object:
		Variable: $r9
		Type: java.security.MessageDigest
		Statement: $r9 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer294641)
		Method: <com.neovisionaries.ws.client.HandshakeReader: void g(com.neovisionaries.ws.client.StatusLine,java.util.Map,java.lang.String)>
		SHA-256: a562db72f79583189a9622d9a95bdd44b44c95c1ec5b49b60d5752cbec1eadc2
		Secure: false
	Object:
		Variable: $r15
		Type: java.lang.String
		Statement: $r21 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>($r15)
		Method: <com.google.android.play.core.internal.zzi: java.security.cert.X509Certificate[] zzj(java.nio.ByteBuffer,java.util.Map,java.security.cert.CertificateFactory)>
		SHA-256: 26db8d12ed22b127205634907ae5f1ca4acd2b7ac357d3ff1d84a0e49d1a53f2
		Secure: false
	Object:
		Variable: $r4
		Type: javax.crypto.Cipher
		Statement: $r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer57873)
		Method: <com.tozny.crypto.android.AesCbcWithIntegrity: com.tozny.crypto.android.AesCbcWithIntegrity$CipherTextIvMac h(byte[],com.tozny.crypto.android.AesCbcWithIntegrity$SecretKeys)>
		SHA-256: 758f91a72f19ef931af99d977820341d220f7d3f1d53992e5b51502e31a08a45
		Secure: false
	Object:
		Variable: $z0
		Type: boolean
		Statement: $z0 = virtualinvoke $r3.<java.security.Signature: boolean verify(byte[])>($r5)
		Method: <org.conscrypt.OpenSSLX509Certificate: void verifyInternal(java.security.PublicKey,java.lang.String)>
		SHA-256: d02affd279e8743b6fd64cdf0e2dd47c30a5603be2e61d5718cf63d25b2d1a15
		Secure: false
	Object:
		Variable: $r13
		Type: java.security.SecureRandom
		Statement: specialinvoke $r13.<java.security.SecureRandom: void <init>()>()
		Method: <com.meari.sdk.utils.SdkUtils: javax.net.SocketFactory getIotFactory(android.content.Context)>
		SHA-256: 1df9188a93c5080ceaa6db6d7fcf2fc7a7fd5910c9b97421ff67751a2215c0a2
		Secure: true
	Object:
		Variable: $r3
		Type: java.security.PublicKey
		Statement: $r4 = interfaceinvoke $r3.<java.security.Key: byte[] getEncoded()>()
		Method: <okhttp3.CertificatePinner$Companion: okio.ByteString sha1Hash(java.security.cert.X509Certificate)>
		SHA-256: cbb34060d5d507998d51b377171d63face20f501959b0422c30f55f98d9ce792
		Secure: true
	Object:
		Variable: $r3
		Type: java.security.SecureRandom
		Statement: $r3 = staticinvoke <java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String)>(varReplacer52688)
		Method: <com.amazonaws.mobileconnectors.cognitoidentityprovider.CognitoUser$AuthenticationHelper: void <clinit>()>
		SHA-256: b8b7c2749db660311c7e4bc6d0a56bd57867d027eae05353eb265a235d464973
		Secure: true
	Object:
		Variable: $r7
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r7.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r6, varReplacer258271)
		Method: <com.amazonaws.internal.keyvaluestore.KeyProvider18: java.security.Key b(java.lang.String)>
		SHA-256: 469ce9de360232f47de578742bcdfaf094bd38dee8abe411463f9b2b93554855
		Secure: false
	Object:
		Variable: $r10
		Type: java.security.KeyPair
		Statement: specialinvoke $r10.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r11, $r12)
		Method: <org.conscrypt.OpenSSLECKeyPairGenerator: java.security.KeyPair generateKeyPair()>
		SHA-256: aef20e7032630e11deed3f628a08d19dda84b6e7e544aa0bf3edd4943ce413d3
		Secure: false
	Object:
		Variable: $r10
		Type: byte[]
		Statement: $r10 = virtualinvoke $r9.<java.security.MessageDigest: byte[] digest(byte[])>($r10)
		Method: <com.neovisionaries.ws.client.HandshakeReader: void g(com.neovisionaries.ws.client.StatusLine,java.util.Map,java.lang.String)>
		SHA-256: a2654a2d150ffa9b2c7dcba7e003b1a5cf3c9a1a9ebb506cb1218527920fd1b1
		Secure: false
	Object:
		Variable: $i1
		Type: int
		Statement: $i1 = virtualinvoke $r59.<java.util.Random: int nextInt()>()
		Method: <com.rubetek.client.modules.scenarios.ScenarioHelperKt: java.lang.Object g(rubetek.tag.homebuilder.Condition,java.util.List,java.util.List,kotlin.coroutines.Continuation)>
		SHA-256: 219596f69006cbcf8c8abe647d4db7942709e2ecdbadab784bde10f121a5e59d
		Secure: true
	Object:
		Variable: $r3
		Type: java.security.MessageDigest
		Statement: $r3 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer234431)
		Method: <com.google.android.gms.internal.firebase-auth-api.zzyv: java.lang.String zzm(java.lang.String,java.lang.String)>
		SHA-256: e679e78ec7f7a61302ff48624fb36c15a9099f04266e6b761182540c0b83f20c
		Secure: true
	Object:
		Variable: $r16
		Type: javax.crypto.SecretKey
		Statement: $r17 = interfaceinvoke $r16.<java.security.Key: byte[] getEncoded()>()
		Method: <com.amazonaws.internal.keyvaluestore.KeyProvider18: java.security.Key a(java.lang.String)>
		SHA-256: 59553b11ac712144fbd595aabc82e2c486d3439ba07e036cd3ea20916a90fd7f
		Secure: true
	Object:
		Variable: $r16
		Type: javax.net.ssl.KeyManagerFactory
		Statement: $r16 = staticinvoke <javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManagerFactory getInstance(java.lang.String,java.lang.String)>($r11, $r12)
		Method: <org.eclipse.paho.client.mqttv3.internal.security.SSLSocketFactoryFactory: javax.net.ssl.SSLContext m(java.lang.String)>
		SHA-256: 4ed4530550c51dcf796fc2354e251eac9e7ee99189d884ccff34ae7edbcc531c
		Secure: false
	Object:
		Variable: varReplacer258271
		Type: java.lang.String
		Statement: specialinvoke $r7.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r6, varReplacer258271)
		Method: <com.amazonaws.internal.keyvaluestore.KeyProvider18: java.security.Key b(java.lang.String)>
		SHA-256: ecc26442d3878779f7894c7b8a1fbfdb46b8f21b7192725bbdd551e55b6d9842
		Secure: false
	Object:
		Variable: $r1
		Type: java.security.MessageDigest
		Statement: $r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer20176)
		Method: <com.securepreferences.SecurePreferences: java.lang.String j(java.lang.String)>
		SHA-256: d7bc717638c51ffcbb1d20e556cb6b5275fd4c0ca53162774e00bcb1975e1ce1
		Secure: true
	Object:
		Variable: $r13
		Type: java.security.KeyFactory
		Statement: $r13 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>(varReplacer297502)
		Method: <com.google.api.client.auth.openidconnect.IdTokenVerifier$PublicKeyLoader: java.security.PublicKey buildEs256PublicKey(com.google.api.client.auth.openidconnect.IdTokenVerifier$PublicKeyLoader$JsonWebKey)>
		SHA-256: 2dbbeb15b792ee0790238fd5f1985cd5fadd234b9d3de3fe96fe7bc660dbca78
		Secure: false
	Object:
		Variable: varReplacer289750
		Type: java.lang.String
		Statement: specialinvoke $r5.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],int,int,java.lang.String)>($r2, varReplacer289749, $i0, varReplacer289750)
		Method: <com.tozny.crypto.android.AesCbcWithIntegrity: com.tozny.crypto.android.AesCbcWithIntegrity$SecretKeys n(java.lang.String)>
		SHA-256: a1e544219c753e968aa025fd9c0b6f1a832d939b9e32d9797f72d199c27c8f4a
		Secure: false
	Object:
		Variable: $r23
		Type: java.security.PublicKey
		Statement: $r7 = interfaceinvoke $r23.<java.security.Key: byte[] getEncoded()>()
		Method: <com.google.android.play.core.internal.zzi: java.security.cert.X509Certificate[] zzj(java.nio.ByteBuffer,java.util.Map,java.security.cert.CertificateFactory)>
		SHA-256: 1232dbbde504efaab396655c42d4b6e8f1b9e66de609bab4a6ca8a73d8aa7bec
		Secure: true
	Object:
		Variable: $r1
		Type: javax.net.ssl.TrustManagerFactory
		Statement: $r1 = staticinvoke <javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String,java.lang.String)>(varReplacer255376, varReplacer255377)
		Method: <okhttp3.internal.platform.BouncyCastlePlatform: javax.net.ssl.X509TrustManager platformTrustManager()>
		SHA-256: e4b6319de1ebd7e979dcb05b59448e3cce7b1c83869f0f74c805e87a50ae58ca
		Secure: false
	Object:
		Variable: $r2
		Type: java.security.SecureRandom
		Statement: $r2 = staticinvoke <java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String)>(varReplacer227372)
		Method: <com.amazonaws.mobileconnectors.cognitoidentityprovider.util.CognitoDeviceHelper$deviceSRP: void <clinit>()>
		SHA-256: 28c8960c1f71feb56e792e0b1f91f973c973ff192d5ad92706a9e1447e0c0dfd
		Secure: true
	Object:
		Variable: $r6
		Type: javax.crypto.Mac
		Statement: $r6 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>(varReplacer266276)
		Method: <com.amazonaws.cognito.clientcontext.util.SignatureGenerator: java.lang.String a(java.lang.String,java.lang.String,java.lang.String)>
		SHA-256: 19b0a42d76a0d11d0c2e52b1ccd1b0732bca63733622678b77944766d1b1f8d7
		Secure: false
	Object:
		Variable: $r1
		Type: javax.crypto.spec.IvParameterSpec
		Statement: specialinvoke $r1.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r5)
		Method: <com.meari.sdk.utils.DesUtils: java.lang.String encode(java.lang.String,java.lang.String,java.lang.String)>
		SHA-256: 45af784bc246c7e7c8b2a2f76e42049d45373b84491bdd1b66ab3df68da750b1
		Secure: false
	Object:
		Variable: $r1
		Type: byte[]
		Statement: $r1 = virtualinvoke $r3.<java.security.MessageDigest: byte[] digest()>()
		Method: <org.apache.http.impl.auth.NTLMEngineImpl: byte[] ntlm2SessionResponse(byte[],byte[],byte[])>
		SHA-256: 87142a8c4369ab14d23fa8690b807f0d900b1807831c8c0f8e6b4de4b8735e3b
		Secure: false
	Object:
		Variable: $r3
		Type: java.security.Signature
		Statement: $r3 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>($r2)
		Method: <org.conscrypt.OpenSSLX509Certificate: void verifyInternal(java.security.PublicKey,java.lang.String)>
		SHA-256: f325059ee6f08c9776202e677308b0f19ca0767a6821e36b4f64a531d072fa45
		Secure: false
	Object:
		Variable: $r7
		Type: javax.net.ssl.SSLContext
		Statement: $r7 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>($r4)
		Method: <me.pushy.sdk.lib.paho.internal.security.SSLSocketFactoryFactory: javax.net.ssl.SSLContext getSSLContext(java.lang.String)>
		SHA-256: faf8a006ee2bf18d70acac36e6184b973d313a1f622eaa10afaeb42c1349d99c
		Secure: false
	Object:
		Variable: $r0
		Type: java.security.SecureRandom
		Statement: specialinvoke $r0.<java.security.SecureRandom: void <init>()>()
		Method: <com.tozny.crypto.android.AesCbcWithIntegrity: byte[] o(int)>
		SHA-256: f153698fceca70f8d5fc8fcc01368f3a70c3fd488c813657194576f18c964d86
		Secure: true
	Object:
		Variable: $r5
		Type: byte[]
		Statement: $r5 = virtualinvoke $r4.<java.security.MessageDigest: byte[] digest(byte[])>($r5)
		Method: <com.google.firebase.messaging.GmsRpc: java.lang.String getHashedFirebaseAppName()>
		SHA-256: 1e52c308f161a25dc3fa5df1d12214a792527ac999f96169898f6fc8f45626b
		Secure: false
	Object:
		Variable: $r6
		Type: javax.net.ssl.SSLParameters
		Statement: specialinvoke $r6.<javax.net.ssl.SSLParameters: void <init>()>()
		Method: <org.eclipse.paho.client.mqttv3.internal.SSLNetworkModule: void start()>
		SHA-256: 859fe0ec5a0ef670ee98b35ac915e8f21b89da12473bd5b28964a8131b54f41c
		Secure: false
	Object:
		Variable: $r6
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r6.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r3, varReplacer289748)
		Method: <com.tozny.crypto.android.AesCbcWithIntegrity: com.tozny.crypto.android.AesCbcWithIntegrity$SecretKeys n(java.lang.String)>
		SHA-256: 400301b7fa020ca509aed8615cda317fd78eefbc4701c2dcfcef17ef575f8874
		Secure: false
	Object:
		Variable: $r4
		Type: byte[]
		Statement: $r4 = virtualinvoke $r2.<java.security.MessageDigest: byte[] digest()>()
		Method: <com.amazonaws.mobileconnectors.iot.AWSIotWebSocketUrlSigner: byte[] e(java.lang.String)>
		SHA-256: 7cc36190864fbd841c9b5c120e7e1a4a2ae47678e7a8e822088047ce394b138f
		Secure: true
	Object:
		Variable: $r24
		Type: javax.net.ssl.TrustManagerFactory
		Statement: $r24 = staticinvoke <javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String)>($r4)
		Method: <org.eclipse.paho.client.mqttv3.internal.security.SSLSocketFactoryFactory: javax.net.ssl.SSLContext m(java.lang.String)>
		SHA-256: 7aeea6343fd7797a643a69b7c0137d291c1474bbba8ee5df31adcfdfd0fbdc28
		Secure: false
	Object:
		Variable: $r1
		Type: javax.net.ssl.SSLContext
		Statement: $r1 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer277804)
		Method: <okhttp3.internal.platform.Platform: javax.net.ssl.SSLContext newSSLContext()>
		SHA-256: 6b25cc59ecf585a068956208dc8b467805cdff30941c522ec19ee894ca623669
		Secure: false
	Object:
		Variable: $r6
		Type: javax.crypto.Mac
		Statement: $r6 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>($r5)
		Method: <com.amazonaws.auth.AbstractAWSSigner: byte[] v(byte[],byte[],com.amazonaws.auth.SigningAlgorithm)>
		SHA-256: 3266d5e2525ddde35fe2fb531cbab811c48e57cdf817aa55f889c3e8ea4208a7
		Secure: false
	Object:
		Variable: $r4
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r5, varReplacer297397)
		Method: <com.google.api.client.auth.oauth.OAuthHmacSigner: java.lang.String computeSignature(java.lang.String)>
		SHA-256: f9d2ceb2807a58cde79f7e85a90adc4b230920bf89758c87ce73707c0588a01a
		Secure: false
	Object:
		Variable: $r1
		Type: java.security.PublicKey
		Statement: $r2 = interfaceinvoke $r1.<java.security.Key: byte[] getEncoded()>()
		Method: <com.google.firebase.installations.local.IidStore: java.lang.String getIdFromPublicKey(java.security.PublicKey)>
		SHA-256: 962c7e88bb9d117a1d04a22f019ef3e1570a3a4f5e50b2b0a72a7a6d6e816610
		Secure: true
	Object:
		Variable: $r16
		Type: javax.crypto.spec.IvParameterSpec
		Statement: specialinvoke $r16.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r15)
		Method: <com.google.android.exoplayer2.upstream.cache.CachedContentIndex$LegacyStorage: boolean readFile(java.util.HashMap,android.util.SparseArray)>
		SHA-256: 5c8390126ebcbb5ddbf76db4602dc5d8f36a732b2def33cdbb420dbb221f041b
		Secure: false
	Object:
		Variable: $r4
		Type: javax.net.ssl.SSLContext
		Statement: $r4 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer101585)
		Method: <com.meari.sdk.utils.SdkUtils: javax.net.SocketFactory getIotFactory(android.content.Context)>
		SHA-256: c45256b33873040a132695b86eb377f4d45ff48da4304737a1502555ff775c0
		Secure: false
	Object:
		Variable: $r21
		Type: java.security.KeyFactory
		Statement: $r21 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>($r15)
		Method: <com.google.android.play.core.internal.zzi: java.security.cert.X509Certificate[] zzj(java.nio.ByteBuffer,java.util.Map,java.security.cert.CertificateFactory)>
		SHA-256: 75ef5c9275e9c5a2bef6ccb044216d67789276f4a943d7592dde65cc61f8276c
		Secure: false
	Object:
		Variable: $r8
		Type: byte[]
		Statement: $r8 = virtualinvoke $r7.<java.security.MessageDigest: byte[] digest(byte[])>($r8)
		Method: <com.google.android.gms.measurement.internal.zzjo: java.lang.String zzf(java.lang.String,boolean)>
		SHA-256: 88d1d3ada70c0da35d24d9c784b48a915f00e8c1865310745d646bc130d3ea55
		Secure: false
	Object:
		Variable: $r4
		Type: java.security.MessageDigest
		Statement: $r4 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer272994)
		Method: <com.rubetek.client.modules.authorization.AuthRepository: java.lang.String j()>
		SHA-256: 97ed70ad164534971825fee82ff0605d23795cb3fff959b99eec35ba4e19ead3
		Secure: true
	Object:
		Variable: $r12
		Type: javax.net.ssl.TrustManager[]
		Statement: $r12 = virtualinvoke $r10.<javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManager[] getTrustManagers()>()
		Method: <me.pushy.sdk.util.PushyCertificateManager: javax.net.SocketFactory getEnterpriseSslSocketFactory(android.content.Context)>
		SHA-256: 32a3e5806ea1a048c1402f817d419d27f87e0d9583f91c91d4de6604196b7032
		Secure: true
	Object:
		Variable: $r2
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, varReplacer337349)
		Method: <org.apache.http.impl.auth.NTLMEngineImpl: java.security.Key createDESKey(byte[],int)>
		SHA-256: 21c26e780b493ec7cee2fa4c0e201c71833356dec62c09969e7f9ab667c56e4d
		Secure: false
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r3 = virtualinvoke $r2.<java.security.MessageDigest: byte[] digest(byte[])>($r3)
		Method: <org.eclipse.paho.client.mqttv3.internal.websocket.WebSocketHandshake: byte[] e(java.lang.String)>
		SHA-256: b9072c62e0b30c27c319b9019eb7f59c974e70e51b3f32acf644be5db52afa17
		Secure: false
	Object:
		Variable: $r2
		Type: java.security.MessageDigest
		Statement: $r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r1)
		Method: <okio.SegmentedByteString: okio.ByteString i(java.lang.String)>
		SHA-256: 7bc46a73aeafc018467f7f68aa9a50c42f02576a20abd0da670b2a78d8ea25a7
		Secure: false
	Object:
		Variable: $r4
		Type: javax.crypto.Mac
		Statement: $r4 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>(varReplacer220905)
		Method: <com.meari.sdk.utils.HmacshaUtil: byte[] HmacSHA1Encrypt(java.lang.String,java.lang.String)>
		SHA-256: e11b9df300a0c3fc953f7a02fd29d29818e8fb3515ead95ce779fb220d98e1b5
		Secure: false
	Object:
		Variable: $r1
		Type: javax.net.ssl.SSLContext
		Statement: $r1 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String,java.security.Provider)>(varReplacer277802, $r2)
		Method: <okhttp3.internal.platform.OpenJSSEPlatform: javax.net.ssl.SSLContext newSSLContext()>
		SHA-256: 17f902d2307e71553f9f985d2b641921879fc7f719619ae0f84f38fa7d50c093
		Secure: false
	Object:
		Variable: $r3
		Type: javax.net.ssl.TrustManager[]
		Statement: $r3 = virtualinvoke $r2.<javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManager[] getTrustManagers()>()
		Method: <okhttp3.internal.platform.Platform: javax.net.ssl.X509TrustManager platformTrustManager()>
		SHA-256: c3dcfb07eabeaead2afa7b41e33d56187e303e14a7184c21b7bac99836f2c278
		Secure: false
	Object:
		Variable: $r0
		Type: java.security.SecureRandom
		Statement: specialinvoke $r0.<java.security.SecureRandom: void <init>()>()
		Method: <com.neovisionaries.ws.client.Misc: void <clinit>()>
		SHA-256: cbf1c51aff3d7501a2f983434f0792421d5eaf933d45bcfb5bfb11bb30cc6712
		Secure: true
	Object:
		Variable: $r2
		Type: javax.net.ssl.SSLContext
		Statement: $r2 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer83323)
		Method: <com.rubetek.client.modules.rtsp.utils.NetUtils: javax.net.ssl.SSLSocket c(java.lang.String,int,int)>
		SHA-256: a21cf3a0edbe1c0015b5d26ea2807ea26b8cbee7f3cb26b5f1b7a71e98fa2d64
		Secure: false
	Object:
		Variable: $r7
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r7.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r2, $r1)
		Method: <com.amazonaws.mobileconnectors.cognitoidentityprovider.util.Hkdf: void g(byte[],byte[])>
		SHA-256: cc574e5d7fa894b601e05b5036b20c6ffafa5deef9e73a5fb01b722548b0ed41
		Secure: false
	Object:
		Variable: $r2
		Type: java.security.MessageDigest
		Statement: $r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer337698)
		Method: <org.apache.http.impl.auth.NTLMEngineImpl$HMACMD5: void <init>(byte[])>
		SHA-256: 7d75d2d499fbcd258771a0ba850836a6e2da87a33b0be89e84635b211d4f8087
		Secure: false
	Object:
		Variable: $r1
		Type: javax.crypto.KeyGenerator
		Statement: $r1 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer289755)
		Method: <com.tozny.crypto.android.AesCbcWithIntegrity: com.tozny.crypto.android.AesCbcWithIntegrity$SecretKeys k()>
		SHA-256: ace2e4be963222779264b207ffffa00f38ea92e6846c088da96293fd2bf9bca7
		Secure: true
	Object:
		Variable: $r5
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r5.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r6, varReplacer95379)
		Method: <com.amazonaws.mobileconnectors.cognitoidentityprovider.util.CognitoSecretHash: java.lang.String a(java.lang.String,java.lang.String,java.lang.String)>
		SHA-256: 97b635ed237da77bc043a878579a83c80fa381ad77673bc6cf5b34a1254a997c
		Secure: false
	Object:
		Variable: $r7
		Type: java.security.SecureRandom
		Statement: specialinvoke $r7.<java.security.SecureRandom: void <init>()>()
		Method: <com.rubetek.client.utils.AndroidUtils: void <clinit>()>
		SHA-256: 364bd8c64f831a68effe9db6dbe48f12914e672f6f5d4919039621fc11c51e87
		Secure: false
	Object:
		Variable: $r2
		Type: java.security.SecureRandom
		Statement: specialinvoke $r2.<java.security.SecureRandom: void <init>()>()
		Method: <com.google.android.exoplayer2.upstream.cache.SimpleCache: long createUid(java.io.File)>
		SHA-256: 99c672eefa4689a445952b16fc572f3658b4c117a83684d8406fcdb6e6246872
		Secure: true
	Object:
		Variable: $r5
		Type: byte[]
		Statement: $r5 = virtualinvoke $r2.<java.security.MessageDigest: byte[] digest()>()
		Method: <okio.SegmentedByteString: okio.ByteString i(java.lang.String)>
		SHA-256: aec427a86e957f947ec72bfde08924d74e59d5507af851db6cb4a2d73f9a418e
		Secure: false
	Object:
		Variable: varReplacer221417
		Type: java.lang.String
		Statement: specialinvoke $r0.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r2, varReplacer221417)
		Method: <com.p2p.core.utils.DES: byte[] desDecrypt(byte[],byte[])>
		SHA-256: 6f6b2cbbfca61d36bb5edd6822e8affd041c55c85b919e6614c2c5c3a604abca
		Secure: false
	Object:
		Variable: $r1
		Type: java.security.SecureRandom
		Statement: specialinvoke $r1.<java.security.SecureRandom: void <init>()>()
		Method: <com.google.android.gms.measurement.internal.zzlb: java.security.SecureRandom zzG()>
		SHA-256: a83d815184ac3bf35da6fcce6e5e67fe49d56b7b993e9cdc982b6561fc342306
		Secure: true
	Object:
		Variable: $r4
		Type: byte[]
		Statement: $r4 = virtualinvoke $r3.<java.security.MessageDigest: byte[] digest(byte[])>($r4)
		Method: <com.google.android.exoplayer2.source.rtsp.auth.MD5: java.lang.String hash(java.lang.String)>
		SHA-256: 3bd65fcda1144780a118175565000d2a103cb9aec46dd25250fc8d7310e74ba1
		Secure: false
	Object:
		Variable: $r7
		Type: byte[]
		Statement: $r7 = interfaceinvoke $r23.<java.security.Key: byte[] getEncoded()>()
		Method: <com.google.android.play.core.internal.zzi: java.security.cert.X509Certificate[] zzj(java.nio.ByteBuffer,java.util.Map,java.security.cert.CertificateFactory)>
		SHA-256: 2617f2c6e116ee093d1e72f46ce1ebf082ea34d08687d617886f79b9ce47c1e7
		Secure: true
	Object:
		Variable: $r16
		Type: javax.crypto.SecretKey
		Statement: $r16 = virtualinvoke $r15.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <com.amazonaws.internal.keyvaluestore.KeyProvider18: java.security.Key a(java.lang.String)>
		SHA-256: 778bb9e9ad976e403a2526d7c931e2c0fddb242a043e105e2ac973ed388a2bb2
		Secure: false
	Object:
		Variable: $r3
		Type: javax.crypto.spec.IvParameterSpec
		Statement: specialinvoke $r3.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r1)
		Method: <com.amazonaws.internal.keyvaluestore.AWSKeyValueStore: java.security.spec.AlgorithmParameterSpec h(byte[])>
		SHA-256: 4900f820c721dd8af6aa8ae1e0b656249742a21a52de9c4468bbe1f756fa9c36
		Secure: false
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r2 = virtualinvoke $r6.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r3)
		Method: <org.apache.http.impl.auth.NTLMEngineImpl: byte[] lmHash(java.lang.String)>
		SHA-256: 9e21e63b8a13d6a2e31e6b805473b0da924400a88c243d471bc2e57b0597cc39
		Secure: false
	Object:
		Variable: $r3
		Type: java.security.MessageDigest
		Statement: $r3 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer301081)
		Method: <com.google.firebase.installations.local.IidStore: java.lang.String getIdFromPublicKey(java.security.PublicKey)>
		SHA-256: 5637b4552aa684fd69926f5841ab5f70d3b5fe4f9642533c48030667898a93da
		Secure: false
	Object:
		Variable: $r2
		Type: java.security.MessageDigest
		Statement: $r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer204968)
		Method: <com.rubetek.client.utils.AndroidUtils: java.lang.String Y(java.lang.String)>
		SHA-256: 1d31e05911072909cc91147235ed59e34bb40862367c9a8ffd578717914c7492
		Secure: false
	Object:
		Variable: $r6
		Type: byte[]
		Statement: $r6 = virtualinvoke $r7.<javax.crypto.Mac: byte[] doFinal(byte[])>($r6)
		Method: <com.amazonaws.mobileconnectors.cognitoidentityprovider.util.CognitoSecretHash: java.lang.String a(java.lang.String,java.lang.String,java.lang.String)>
		SHA-256: cd23651d0d51e50962d8b43011aa34ce49d48197ef06680da917b040d1c0d276
		Secure: false
	Object:
		Variable: $r1
		Type: byte[]
		Statement: virtualinvoke $r0.<java.security.SecureRandom: void nextBytes(byte[])>($r1)
		Method: <com.tozny.crypto.android.AesCbcWithIntegrity: byte[] o(int)>
		SHA-256: 243c3bfe01088b46160d45d3d16976ed927ad2021ac6b8b37d7ff95240ffa628
		Secure: true
	Object:
		Variable: $r35
		Type: java.security.SecureRandom
		Statement: specialinvoke $r35.<java.security.SecureRandom: void <init>()>()
		Method: <com.rubetek.client.modules.scenarios.ScenarioHelperKt: java.lang.Object f(rubetek.tag.homebuilder.Condition,java.util.List,java.util.List,kotlin.coroutines.Continuation)>
		SHA-256: f5cd2d4988e4f9fdfa590d5f7cb1d8435cf1af9fa60716f59c22a180e295d5ca
		Secure: true
	Object:
		Variable: $r14
		Type: java.security.KeyStore
		Statement: $r14 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>($r9)
		Method: <me.pushy.sdk.lib.paho.internal.security.SSLSocketFactoryFactory: javax.net.ssl.SSLContext getSSLContext(java.lang.String)>
		SHA-256: 5149894d05ef20df222d58c4a033421d6302e35e69a14f445f906bc16807ea17
		Secure: false
	Object:
		Variable: varReplacer221421
		Type: java.lang.String
		Statement: specialinvoke $r0.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r2, varReplacer221421)
		Method: <com.p2p.core.utils.DES: byte[] desEncrypt(byte[],byte[])>
		SHA-256: c06aef1f49aaba4c904b1f89f4d122a2fb64bf1a259514487ea6939ea1c8fb98
		Secure: false
	Object:
		Variable: $r7
		Type: javax.crypto.spec.IvParameterSpec
		Statement: specialinvoke $r7.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r1)
		Method: <com.google.android.exoplayer2.upstream.crypto.AesFlushingCipher: void <init>(int,byte[],long,long)>
		SHA-256: d9f9b6685ddf3461eb2ea2eff23ffe28902e5309125e8841c7ce2eb950fff47a
		Secure: false
	Object:
		Variable: $r7
		Type: java.security.MessageDigest
		Statement: $r7 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer153812)
		Method: <com.rubetek.client.modules.rtsp.RtspClient$Companion: java.lang.String C(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
		SHA-256: 34d354376412fe19be33248c06c2e90073eaa3aa6d8f305ca48f9662931800c4
		Secure: false
	Object:
		Variable: $r1
		Type: byte[]
		Statement: $r1 = virtualinvoke $r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r1)
		Method: <com.p2p.core.utils.DES: byte[] desEncrypt(byte[],byte[])>
		SHA-256: 7f1c0221e7550db5dbcd97e7bb408aaae33f72d23ec29ee1f8060fbdc54657f9
		Secure: false
	Object:
		Variable: $r2
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r7, varReplacer266279)
		Method: <com.amazonaws.cognito.clientcontext.util.SignatureGenerator: java.lang.String a(java.lang.String,java.lang.String,java.lang.String)>
		SHA-256: b649de4e40e87e22a082a1eee8c5df7dedb47dfc4f774df94e778f82b8f5ffff
		Secure: false
	Object:
		Variable: $r6
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r6.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r5, varReplacer258262)
		Method: <com.amazonaws.internal.keyvaluestore.KeyProvider10: java.security.Key b(java.lang.String)>
		SHA-256: 2b42c86892a8df64924da21b37eb08a2c75182ba32b638625dcd28bb33355dc5
		Secure: false
	Object:
		Variable: varReplacer289754
		Type: java.lang.String
		Statement: specialinvoke $r0.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r3, varReplacer289754)
		Method: <com.tozny.crypto.android.AesCbcWithIntegrity: com.tozny.crypto.android.AesCbcWithIntegrity$SecretKeys k()>
		SHA-256: 2c4d75180254dec10408f64c6846d2bebaee83a997d536fb6296139796c2a578
		Secure: false
	Object:
		Variable: $r4
		Type: byte[]
		Statement: $r4 = interfaceinvoke $r3.<java.security.Key: byte[] getEncoded()>()
		Method: <okhttp3.CertificatePinner$Companion: okio.ByteString sha1Hash(java.security.cert.X509Certificate)>
		SHA-256: 663bd72530921bd9a2cd76243de0d184d3a99349b4a8799c6786351667190775
		Secure: true
	Object:
		Variable: $r0
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r0.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r2, varReplacer336850)
		Method: <org.apache.http.impl.auth.NTLMEngineImpl: byte[] RC4(byte[],byte[])>
		SHA-256: 576a5d61080595e559f214f3f401dfdc7a79f80dc6dc870c421855c6be93cc5c
		Secure: false
	Object:
		Variable: $r25
		Type: javax.net.ssl.TrustManager[]
		Statement: $r25 = virtualinvoke $r24.<javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManager[] getTrustManagers()>()
		Method: <org.eclipse.paho.client.mqttv3.internal.security.SSLSocketFactoryFactory: javax.net.ssl.SSLContext m(java.lang.String)>
		SHA-256: 6e93d7d30540fe538db74b3eb0b171cfe95de593dd87afe6f5c74acd243858ef
		Secure: false
	Object:
		Variable: $r4
		Type: javax.crypto.SecretKey
		Statement: $r4 = virtualinvoke $r3.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <com.amazonaws.internal.keyvaluestore.KeyProvider10: java.security.Key a(java.lang.String)>
		SHA-256: f071310efc776934197986c3d67998ea03e5544dd9b1576ed11bcc61a6e320ef
		Secure: true
	Object:
		Variable: $r24
		Type: byte[]
		Statement: $r24 = virtualinvoke $r25.<java.security.MessageDigest: byte[] digest(byte[])>($r24)
		Method: <org.apache.http.impl.auth.DigestScheme: org.apache.http.Header createDigestHeader(org.apache.http.auth.Credentials,org.apache.http.HttpRequest)>
		SHA-256: d6819f5a090592a9c309f7dee8c1d3060c928c197153632cc3c4595ac59ae53a
		Secure: false
	Object:
		Variable: $r3
		Type: java.security.KeyStore
		Statement: $r3 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>(varReplacer281112)
		Method: <com.amazonaws.internal.keyvaluestore.KeyProvider18: byte[] e(java.lang.String,byte[])>
		SHA-256: 72137a3702c5fb74d47d0b3c198a00080e3c7ec3179d5306cf2e502f6d4698a0
		Secure: false
	Object:
		Variable: $r4
		Type: javax.net.ssl.TrustManagerFactory
		Statement: $r4 = staticinvoke <javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String)>($r3)
		Method: <org.acra.http.BaseHttpRequest: void b(javax.net.ssl.HttpsURLConnection)>
		SHA-256: b9e37ab635a4ecfac7dd25b9c212c649b7943984d07ef7d04d1fce98a70113cb
		Secure: true
	Object:
		Variable: $r2
		Type: javax.crypto.SecretKey
		Statement: $r2 = virtualinvoke $r1.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <com.tozny.crypto.android.AesCbcWithIntegrity: com.tozny.crypto.android.AesCbcWithIntegrity$SecretKeys k()>
		SHA-256: f5139c9347c2e0434fd6d42a0e49904c84e25331acbdaadab6ab0c6086fac89b
		Secure: true
	Object:
		Variable: $r22
		Type: java.security.spec.X509EncodedKeySpec
		Statement: specialinvoke $r22.<java.security.spec.X509EncodedKeySpec: void <init>(byte[])>($r5)
		Method: <com.google.android.play.core.internal.zzi: java.security.cert.X509Certificate[] zzj(java.nio.ByteBuffer,java.util.Map,java.security.cert.CertificateFactory)>
		SHA-256: 262af046782946adec274aff479c0441c71779302ce0a508be26578b900d9310
		Secure: false
	Object:
		Variable: $r0
		Type: java.security.Signature
		Statement: $r0 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>(varReplacer297405)
		Method: <com.google.api.client.util.SecurityUtils: java.security.Signature getSha1WithRsaSignatureAlgorithm()>
		SHA-256: 8967b1507d8fc0b9fc913d79d1c6a97e2fd264334982573ad02f08ea6c53a956
		Secure: false
	Object:
		Variable: $r4
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, $r5)
		Method: <com.google.android.exoplayer2.upstream.crypto.AesFlushingCipher: void <init>(int,byte[],long,long)>
		SHA-256: 904cc563415265daa258bb0005f4d8ce0eefc5d2a51ed39954b73bdc6cc251cb
		Secure: false
	Object:
		Variable: $r0
		Type: javax.crypto.Mac
		Statement: $r0 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>($r1)
		Method: <com.google.common.hash.MacHashFunction: javax.crypto.Mac getMac(java.lang.String,java.security.Key)>
		SHA-256: 6dfe92fb5526abc60bb706d9a02bc7267374c73eb4cfabeec75ce74a35a0603d
		Secure: false
	Object:
		Variable: $r7
		Type: javax.net.ssl.SSLContext
		Statement: $r7 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String,java.lang.String)>($r4, $r3)
		Method: <me.pushy.sdk.lib.paho.internal.security.SSLSocketFactoryFactory: javax.net.ssl.SSLContext getSSLContext(java.lang.String)>
		SHA-256: 2de0dbcb962ff3cb3e0d9dc8e9469638e8762c9aa5d9bef5cf875912fda1093
		Secure: false
	Object:
		Variable: $r24
		Type: byte[]
		Statement: $r24 = virtualinvoke $r16.<java.security.MessageDigest: byte[] digest(byte[])>($r24)
		Method: <org.apache.http.impl.auth.DigestScheme: org.apache.http.Header createDigestHeader(org.apache.http.auth.Credentials,org.apache.http.HttpRequest)>
		SHA-256: d36648b94075615d212b0236bc5cdfc92309766fe7b341b21d50caf50b71db90
		Secure: false
	Object:
		Variable: $r1
		Type: byte[]
		Statement: $r1 = virtualinvoke $r2.<java.security.MessageDigest: byte[] digest(byte[])>($r3)
		Method: <org.apache.http.impl.auth.NTLMEngineImpl$HMACMD5: byte[] getOutput()>
		SHA-256: 3bcbf4d912455255294e9bee4d91f33f3fa55dd4a67dc970c48252366cf97c1f
		Secure: false
	Object:
		Variable: $r1
		Type: byte[]
		Statement: $r1 = virtualinvoke $r6.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r2)
		Method: <org.apache.http.impl.auth.NTLMEngineImpl$CipherGen: byte[] getLanManagerSessionKey()>
		SHA-256: 20c0b14ef959330f298f228cee068b3719531af5ce3cac0a743f43bfa2bbeca3
		Secure: false
	Object:
		Variable: $r6
		Type: javax.crypto.spec.IvParameterSpec
		Statement: specialinvoke $r6.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r2)
		Method: <com.tozny.crypto.android.AesCbcWithIntegrity: byte[] c(com.tozny.crypto.android.AesCbcWithIntegrity$CipherTextIvMac,com.tozny.crypto.android.AesCbcWithIntegrity$SecretKeys)>
		SHA-256: 9d23acecca5e45cc1069adfc2d03e00a93fd4276bcba96c83eaf2f93157f90b4
		Secure: false
	Object:
		Variable: varReplacer297509
		Type: java.lang.String
		Statement: $r8 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>(varReplacer297509)
		Method: <com.google.api.client.auth.openidconnect.IdTokenVerifier$PublicKeyLoader: java.security.PublicKey buildRs256PublicKey(com.google.api.client.auth.openidconnect.IdTokenVerifier$PublicKeyLoader$JsonWebKey)>
		SHA-256: a1180f90a8af43e1bc1c43dabe6a92cd9873560941b97ee46c18edc241a94d03
		Secure: false
	Object:
		Variable: $r10
		Type: byte[]
		Statement: $r10 = virtualinvoke $r7.<java.security.MessageDigest: byte[] digest()>()
		Method: <com.rubetek.client.modules.rtsp.RtspClient$Companion: java.lang.String C(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
		SHA-256: 475d30257c59d9b09b756da53cb16964276d0d58e0f3d1e58ffacbd8d2a713f1
		Secure: false
	Object:
		Variable: $r6
		Type: javax.crypto.Mac
		Statement: $r6 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>(varReplacer297399)
		Method: <com.google.api.client.auth.oauth.OAuthHmacSigner: java.lang.String computeSignature(java.lang.String)>
		SHA-256: f28a1100455cec13c1bb914a1275b0c4f1d9edf0da5d49533855e79df9cc65d6
		Secure: false
	Object:
		Variable: $r2
		Type: java.security.KeyStore
		Statement: $r2 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>(varReplacer259614)
		Method: <com.amazonaws.internal.keyvaluestore.KeyProvider23: java.security.Key a(java.lang.String)>
		SHA-256: ac7e68a543fa596639cad0f36d9253df2bf915709ce3d8388ef7c736757b220
		Secure: false
	Object:
		Variable: $r24
		Type: javax.net.ssl.TrustManagerFactory
		Statement: $r24 = staticinvoke <javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String)>($r4)
		Method: <me.pushy.sdk.lib.paho.internal.security.SSLSocketFactoryFactory: javax.net.ssl.SSLContext getSSLContext(java.lang.String)>
		SHA-256: de66e4144aaa3aabd8d127116cf758b63d13d022f82524c5f32831cfbb2c1332
		Secure: false
	Object:
		Variable: $r11
		Type: javax.net.ssl.SSLContext
		Statement: $r11 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer54814)
		Method: <me.pushy.sdk.util.PushyCertificateManager: javax.net.SocketFactory getEnterpriseSslSocketFactory(android.content.Context)>
		SHA-256: 47a6b727e6fb2d92866e89fab23ac42d5fa8b91c8c9f94bc5b6fa205b557437b
		Secure: false
	Object:
		Variable: $r15
		Type: javax.crypto.KeyGenerator
		Statement: $r15 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer259646)
		Method: <com.amazonaws.internal.keyvaluestore.KeyProvider18: java.security.Key a(java.lang.String)>
		SHA-256: e8936b260b4eb5c7def996150783db7453fea0507480aa2215e6787e6cdc6343
		Secure: false
	Object:
		Variable: $r4
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r5, varReplacer297401)
		Method: <com.google.api.client.auth.oauth.OAuthHmacSha256Signer: java.lang.String computeSignature(java.lang.String)>
		SHA-256: d2c7c820d3e1acd56a835772f4843272ea6450f6287993906264c1d876fb99be
		Secure: false
	Object:
		Variable: varReplacer266279
		Type: java.lang.String
		Statement: specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r7, varReplacer266279)
		Method: <com.amazonaws.cognito.clientcontext.util.SignatureGenerator: java.lang.String a(java.lang.String,java.lang.String,java.lang.String)>
		SHA-256: e682f9a31e3dac0f39c23ea11acc799bf52d9e398c6e978de94580c59b6c7569
		Secure: false
	Object:
		Variable: $r3
		Type: java.security.KeyStore
		Statement: $r3 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>(varReplacer258280)
		Method: <com.amazonaws.internal.keyvaluestore.KeyProvider23: void c(java.lang.String)>
		SHA-256: 8ccf38d3a30e7c4060f8122bf030a0fd1ac0a10e8b9bc542f14cec394d7aa7bb
		Secure: false
	Object:
		Variable: varReplacer336850
		Type: java.lang.String
		Statement: specialinvoke $r0.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r2, varReplacer336850)
		Method: <org.apache.http.impl.auth.NTLMEngineImpl: byte[] RC4(byte[],byte[])>
		SHA-256: 185c98ca843df2518a7dcf0c2042ce854f8c4df3c95087fe01907dfa2c902095
		Secure: false
	Object:
		Variable: $r2
		Type: javax.crypto.SecretKey
		Statement: $r3 = interfaceinvoke $r2.<java.security.Key: byte[] getEncoded()>()
		Method: <com.tozny.crypto.android.AesCbcWithIntegrity$SecretKeys: java.lang.String toString()>
		SHA-256: 4cb4b724f6b72b3562329ab1a04614fbbee9eecea30c034373c1625f1488d46
		Secure: true
	Object:
		Variable: $r0
		Type: javax.net.ssl.SSLContext
		Statement: $r0 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer152338)
		Method: <org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.SSLSocketFactory getSocketFactory()>
		SHA-256: 471db62fe5ba9e0ce03bb2037340641de10cd305e48c3d80f3add4675a811722
		Secure: false
	Object:
		Variable: $r1
		Type: byte[]
		Statement: $r1 = virtualinvoke $r3.<java.security.MessageDigest: byte[] digest()>()
		Method: <com.google.firebase.crashlytics.internal.common.CommonUtils: java.lang.String hash(byte[],java.lang.String)>
		SHA-256: 847e78157c93691b2ae119253de6302419d14276894c4ea2f7fe9fb898fdae56
		Secure: false
	Object:
		Variable: varReplacer297401
		Type: java.lang.String
		Statement: specialinvoke $r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r5, varReplacer297401)
		Method: <com.google.api.client.auth.oauth.OAuthHmacSha256Signer: java.lang.String computeSignature(java.lang.String)>
		SHA-256: a341e296d8a3bac349da4c3a3fd5e65413b791083ee0b7f3aaa3005d3deb82a7
		Secure: false
	Object:
		Variable: $r6
		Type: javax.net.ssl.SSLParameters
		Statement: specialinvoke $r6.<javax.net.ssl.SSLParameters: void <init>()>()
		Method: <org.eclipse.paho.client.mqttv3.internal.SSLNetworkModule: void start()>
		SHA-256: 859fe0ec5a0ef670ee98b35ac915e8f21b89da12473bd5b28964a8131b54f41c
		Secure: false
	Object:
		Variable: $r6
		Type: javax.crypto.Mac
		Statement: $r6 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>($r5)
		Method: <com.amazonaws.mobileconnectors.iot.AWSIotWebSocketUrlSigner: byte[] h(byte[],byte[],com.amazonaws.auth.SigningAlgorithm)>
		SHA-256: 3ff9c44f9b354d292b866bc6130a277526bd42cf791511ce8356caa046b763cc
		Secure: false
	Object:
		Variable: $r2
		Type: java.security.KeyStore
		Statement: $r2 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>(varReplacer259634)
		Method: <com.amazonaws.internal.keyvaluestore.KeyProvider18: java.security.Key a(java.lang.String)>
		SHA-256: 96963eb03d192add1d421016a09506e9a0624391b999df5f25af995ae03200be
		Secure: false
	Object:
		Variable: varReplacer289737
		Type: int
		Statement: specialinvoke $r2.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r3, $r1, $i0, varReplacer289737)
		Method: <com.tozny.crypto.android.AesCbcWithIntegrity: com.tozny.crypto.android.AesCbcWithIntegrity$SecretKeys l(java.lang.String,byte[],int)>
		SHA-256: 953296c1d58655d46ac9025200a8c014ce78b37158e31253c7524ed45e134fb4
		Secure: false
	Object:
		Variable: $r0
		Type: java.security.Signature
		Statement: $r0 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>(varReplacer297392)
		Method: <com.google.api.client.util.SecurityUtils: java.security.Signature getSha256WithRsaSignatureAlgorithm()>
		SHA-256: 51751b3a0277fe3a802e1077d3f33a5748a06656cf18a605b231e88464182c96
		Secure: false
	Object:
		Variable: $r5
		Type: java.security.KeyStore
		Statement: $r5 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>($r4)
		Method: <org.acra.security.BaseKeyStoreFactory: java.security.KeyStore create(android.content.Context)>
		SHA-256: 22a183d5116504e02ad96ba67561ecf0f83bf3a7f2bfba4ad5fe01efac8fa773
		Secure: true
	Object:
		Variable: $r6
		Type: byte[]
		Statement: $r6 = virtualinvoke $r5.<java.security.MessageDigest: byte[] digest(byte[])>($r6)
		Method: <com.google.android.gms.common.zzn: java.lang.String zzd(boolean,java.lang.String,com.google.android.gms.common.zzj)>
		SHA-256: 3e5593a6601d3b83ed367e2a3085ea5e9cbecaa31e2606240708a885c86cb418
		Secure: false
	Object:
		Variable: varReplacer297397
		Type: java.lang.String
		Statement: specialinvoke $r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r5, varReplacer297397)
		Method: <com.google.api.client.auth.oauth.OAuthHmacSigner: java.lang.String computeSignature(java.lang.String)>
		SHA-256: 476b480d46283afaf62035b0de500e410a6d9ef4e737e6db8318a91331c40b77
		Secure: false
	Object:
		Variable: $r2
		Type: javax.crypto.Mac
		Statement: $r2 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>(varReplacer57588)
		Method: <com.tozny.crypto.android.AesCbcWithIntegrity: byte[] m(byte[],javax.crypto.SecretKey)>
		SHA-256: ce05a69f4ef59aa8a40ac2fe2307d1b03c38c4473cb3306ab145d4b358c593a8
		Secure: false
	Object:
		Variable: $r1
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r1.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r3, $r5)
		Method: <com.amazonaws.mobileconnectors.iot.AWSIotWebSocketUrlSigner: byte[] h(byte[],byte[],com.amazonaws.auth.SigningAlgorithm)>
		SHA-256: 917d34f6262430eb31c0a335065a357d743e3ccb67ec1293eb5e7ba4eea205c3
		Secure: false
	Object:
		Variable: $r12
		Type: javax.crypto.CipherOutputStream
		Statement: specialinvoke $r12.<javax.crypto.CipherOutputStream: void <init>(java.io.OutputStream,javax.crypto.Cipher)>($r5, $r10)
		Method: <com.google.android.exoplayer2.upstream.cache.CachedContentIndex$LegacyStorage: void writeFile(java.util.HashMap)>
		SHA-256: d25fda46376f2e332f56ea026ae45706bde4c3a80699c95ac5175b26870d5614
		Secure: false
	Object:
		Variable: $r7
		Type: javax.net.ssl.SSLContext
		Statement: $r7 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>($r4)
		Method: <org.eclipse.paho.client.mqttv3.internal.security.SSLSocketFactoryFactory: javax.net.ssl.SSLContext m(java.lang.String)>
		SHA-256: 6fd7d3b8066c703279882a3420272c1601894e97062d9b49438b90baa52b9ddb
		Secure: false
	Object:
		Variable: $r6
		Type: javax.crypto.Cipher
		Statement: $r6 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer337683)
		Method: <org.apache.http.impl.auth.NTLMEngineImpl: byte[] lmHash(java.lang.String)>
		SHA-256: a7341788c2aeb318200f218bb8e6b18c75284c69efef5210edd5d727812ff02
		Secure: false
	Object:
		Variable: $r2
		Type: byte[]
		Statement: $r2 = virtualinvoke $r6.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r2)
		Method: <com.amazonaws.internal.keyvaluestore.KeyProvider18: byte[] d(java.lang.String,byte[])>
		SHA-256: a61c9670fb9b07418bd36dd9c4105ba8f128e1f050a36a55a5a1325597b1a629
		Secure: false
	Object:
		Variable: $r13
		Type: java.security.spec.ECParameterSpec
		Statement: specialinvoke $r13.<java.security.spec.ECParameterSpec: void <init>(java.security.spec.EllipticCurve,java.security.spec.ECPoint,java.math.BigInteger,int)>($r9, $r12, $r4, $i1)
		Method: <org.conscrypt.OpenSSLECGroupContext: java.security.spec.ECParameterSpec getECParameterSpec()>
		SHA-256: 7223ae8f08ed0dba3dafb06f8e07e30310aca7c9be856d88494b5d1bd531fdf8
		Secure: true
	Object:
		Variable: $r10
		Type: java.security.KeyFactory
		Statement: $r10 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>($r8)
		Method: <org.conscrypt.OpenSSLX509Certificate: java.security.PublicKey getPublicKey()>
		SHA-256: 6635af12fb8498a7bf018ada279831a6e3024bb07fe12c7daed2b6fbc372e6bb
		Secure: false
	Object:
		Variable: $r2
		Type: java.security.KeyStore
		Statement: $r2 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>(varReplacer258277)
		Method: <com.amazonaws.internal.keyvaluestore.KeyProvider18: java.security.Key b(java.lang.String)>
		SHA-256: 77c678dbbcd69475fda2bc1a1687f1c098296a283ef59b253becf92691f49185
		Secure: false
	Object:
		Variable: $r5
		Type: java.lang.String
		Statement: specialinvoke $r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, $r5)
		Method: <com.google.android.exoplayer2.upstream.crypto.AesFlushingCipher: void <init>(int,byte[],long,long)>
		SHA-256: 8b962118ea3c603585afd0c9cb8eebc7393b428bc7f8f570f875d4bc8d807d0e
		Secure: false
	Object:
		Variable: $r6
		Type: javax.crypto.Mac
		Statement: $r6 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>(varReplacer297402)
		Method: <com.google.api.client.auth.oauth.OAuthHmacSha256Signer: java.lang.String computeSignature(java.lang.String)>
		SHA-256: f84c75166b0c3699e861041451d8971cfd551113355dbb8c44b5cd851d600b0
		Secure: false
	Object:
		Variable: $r4
		Type: java.security.MessageDigest
		Statement: $r4 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer287756)
		Method: <com.google.firebase.messaging.GmsRpc: java.lang.String getHashedFirebaseAppName()>
		SHA-256: 16005a46da662b491802509f0aab71a1952b00e5be877292381a27a47a3e4a52
		Secure: false
	Object:
		Variable: $r2
		Type: java.security.SecureRandom
		Statement: specialinvoke $r2.<java.security.SecureRandom: void <init>()>()
		Method: <com.rubetek.client.modules.authorization.AuthRepository: java.lang.String k()>
		SHA-256: 2df456043d86d193dfe878c3494fa5144b4075a0308134477b7f971aae7b2a5f
		Secure: true
	Object:
		Variable: $r0
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r0.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r2, varReplacer221421)
		Method: <com.p2p.core.utils.DES: byte[] desEncrypt(byte[],byte[])>
		SHA-256: 660aac468d9f3d829dac92d25e608f6a749c6eb74f2742de2ea9ca2527b00567
		Secure: false
	Object:
		Variable: $r3
		Type: javax.crypto.KeyGenerator
		Statement: $r3 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String,java.lang.String)>(varReplacer259618, varReplacer259619)
		Method: <com.amazonaws.internal.keyvaluestore.KeyProvider23: java.security.Key a(java.lang.String)>
		SHA-256: d41398a163f1f1b7f10d650b5d3ce6c4a6496ef06c874f682ae355c7798d5b3b
		Secure: true
	Object:
		Variable: $r3
		Type: java.security.MessageDigest
		Statement: $r3 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer166882)
		Method: <com.google.android.play.core.assetpacks.zzdq: java.lang.String zza(java.util.List)>
		SHA-256: 85001141a32ee7c471ce5ea5e6090acda6bf6785a4f9da5bc896bd18f8594e38
		Secure: false
	Object:
		Variable: $r1
		Type: java.lang.String
		Statement: specialinvoke $r7.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r4, $r1)
		Method: <com.amazonaws.mobileconnectors.cognitoidentityprovider.util.Hkdf: void g(byte[],byte[])>
		SHA-256: 11072dbe77a115c0c7eb90d40386c76a475ab853185fc6e4f80889ae299c24c0
		Secure: false
	Object:
		Variable: $r6
		Type: byte[]
		Statement: $r6 = interfaceinvoke $r5.<java.security.Key: byte[] getEncoded()>()
		Method: <com.amazonaws.internal.keyvaluestore.KeyProvider10: java.security.Key a(java.lang.String)>
		SHA-256: 4441bdd9ce235df1379cabb3899068b2cc2f017a7d918051dae61cf0de5511d0
		Secure: true
	Object:
		Variable: $r3
		Type: java.security.MessageDigest
		Statement: $r3 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r2)
		Method: <com.google.firebase.crashlytics.internal.common.CommonUtils: java.lang.String hash(byte[],java.lang.String)>
		SHA-256: 7fb5e1ca4e0ccb41306f524bfa8fe0a452898cd3171e10ddd8d49eb5eb47dc5a
		Secure: false
	Object:
		Variable: $r14
		Type: java.security.SecureRandom
		Statement: specialinvoke $r14.<java.security.SecureRandom: void <init>()>()
		Method: <com.amazonaws.internal.keyvaluestore.KeyProvider18: java.security.Key a(java.lang.String)>
		SHA-256: 3b0b8492e7449e0b3ea8ece2874965567774bd0b6cfef4ab90ad6c692b743134
		Secure: true
	Object:
		Variable: $r9
		Type: java.security.KeyStore
		Statement: $r9 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>($r5)
		Method: <me.pushy.sdk.util.PushyCertificateManager: javax.net.SocketFactory getEnterpriseSslSocketFactory(android.content.Context)>
		SHA-256: 4af7407c3db74b50dfdb4c15b2a11a76993c947b7bc8ba7ec9727cf11cca3fc6
		Secure: true
	Object:
		Variable: $r9
		Type: byte[]
		Statement: $r9 = virtualinvoke $r7.<java.security.MessageDigest: byte[] digest()>()
		Method: <com.rubetek.client.modules.rtsp.RtspClient$Companion: java.lang.String C(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
		SHA-256: 71d852a6ff00178c5e1fcc2ba18144971fe32e1c689220e498cd0221c4fb87eb
		Secure: false
	Object:
		Variable: $r7
		Type: java.security.SecureRandom
		Statement: specialinvoke $r7.<java.security.SecureRandom: void <init>()>()
		Method: <com.amazonaws.mobileconnectors.iot.AWSIotSslUtility: javax.net.ssl.SSLSocketFactory a(java.security.KeyStore,int)>
		SHA-256: 25c9aaea4f5c34364e37fd5d044f46b99fd36f12ef1975b6646fbcd7188f4e7a
		Secure: true
	Object:
		Variable: $r1
		Type: java.security.spec.X509EncodedKeySpec
		Statement: specialinvoke $r1.<java.security.spec.X509EncodedKeySpec: void <init>(byte[])>($r9)
		Method: <org.conscrypt.OpenSSLX509Certificate: java.security.PublicKey getPublicKey()>
		SHA-256: 7ac05a324707752a8fcdd9787a5fcda4e6af85c295ea6bb9f2ffcf779c41a30d
		Secure: false
	Object:
		Variable: $r2
		Type: byte[]
		Statement: $r2 = virtualinvoke $r6.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r2)
		Method: <org.apache.http.impl.auth.NTLMEngineImpl$CipherGen: byte[] getLanManagerSessionKey()>
		SHA-256: 4c2bed804f977b20cf1b602562e7e3f5832f7ee053eb178a69bb339124348109
		Secure: false
	Object:
		Variable: $r4
		Type: byte[]
		Statement: $r4 = interfaceinvoke $r3.<java.security.Key: byte[] getEncoded()>()
		Method: <okhttp3.CertificatePinner$Companion: okio.ByteString sha256Hash(java.security.cert.X509Certificate)>
		SHA-256: a9aa66239e8914d9c216c88c759e3fc4d412fa2ce6337415ad77a730de9838d7
		Secure: true
	Object:
		Variable: $r2
		Type: java.security.MessageDigest
		Statement: $r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer173157)
		Method: <com.amazonaws.mobileconnectors.iot.AWSIotWebSocketUrlSigner: byte[] e(java.lang.String)>
		SHA-256: fb7a73f2567ef22e66dd42365ac77d540b04c6efe4291625a0a5358358a6215d
		Secure: true
	Object:
		Variable: $r1
		Type: byte[]
		Statement: $r1 = virtualinvoke $r2.<java.security.Signature: byte[] sign()>()
		Method: <com.google.api.client.util.SecurityUtils: byte[] sign(java.security.Signature,java.security.PrivateKey,byte[])>
		SHA-256: e60f3d493380912bdcdaa66ca82898466304dc768681909814b839892d2b169c
		Secure: false
	Object:
		Variable: $r3
		Type: java.security.KeyStore
		Statement: $r3 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>(varReplacer279593)
		Method: <com.amazonaws.internal.keyvaluestore.KeyProvider18: byte[] d(java.lang.String,byte[])>
		SHA-256: 75b16be623b7498bd5f539ddd65896b5ddcacaca3ab96d518f4d6f760daa7a65
		Secure: false
	Object:
		Variable: $r14
		Type: java.security.KeyStore
		Statement: $r14 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>($r9)
		Method: <org.eclipse.paho.client.mqttv3.internal.security.SSLSocketFactoryFactory: javax.net.ssl.SSLContext m(java.lang.String)>
		SHA-256: 8ca32e7a619f6d439ce2104c6c119c9bcdc2bb140d11ce7542d46b85d53a5c01
		Secure: false
	Object:
		Variable: $r18
		Type: javax.net.ssl.SSLContext
		Statement: $r18 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer287797)
		Method: <com.meari.sdk.mqtt.f: void c()>
		SHA-256: a19877d33b98f772059b358e9b531ad38d79b1a3ea02f2f5359482cfa99da4e2
		Secure: false
	Object:
		Variable: $r9
		Type: javax.net.ssl.TrustManager[]
		Statement: $r9 = virtualinvoke $r4.<javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManager[] getTrustManagers()>()
		Method: <org.acra.http.BaseHttpRequest: void b(javax.net.ssl.HttpsURLConnection)>
		SHA-256: 87b8e65e65ec513459e68bc26781c5a797a8bda2aa9e71e13c8342983182819a
		Secure: true
	Object:
		Variable: varReplacer289748
		Type: java.lang.String
		Statement: specialinvoke $r6.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r3, varReplacer289748)
		Method: <com.tozny.crypto.android.AesCbcWithIntegrity: com.tozny.crypto.android.AesCbcWithIntegrity$SecretKeys n(java.lang.String)>
		SHA-256: b41a95b0f900c5efed0c93fd0a3a445ccab95a5fe0521845df69cda6a183041
		Secure: false
	Object:
		Variable: $r19
		Type: byte[]
		Statement: $r19 = virtualinvoke $r21.<javax.crypto.Mac: byte[] doFinal(byte[])>($r19)
		Method: <com.amazonaws.mobileconnectors.cognitoidentityprovider.CognitoUser: com.amazonaws.services.cognitoidentityprovider.model.RespondToAuthChallengeRequest N0(java.util.Map,java.lang.String,java.lang.String,java.lang.String,com.amazonaws.mobileconnectors.cognitoidentityprovider.CognitoUser$AuthenticationHelper)>
		SHA-256: c04b7d37585c21ee4ab3777443168ade24b979b894773442181dcc5e370dd80
		Secure: false
	Object:
		Variable: $r59
		Type: java.security.SecureRandom
		Statement: specialinvoke $r59.<java.security.SecureRandom: void <init>()>()
		Method: <com.rubetek.client.modules.scenarios.ScenarioHelperKt: java.lang.Object g(rubetek.tag.homebuilder.Condition,java.util.List,java.util.List,kotlin.coroutines.Continuation)>
		SHA-256: 946ad895fc6fca50d6eae1f053dcc08cba9486aee08bb59fa5d75dacf6ee65d4
		Secure: true
	Object:
		Variable: $r2
		Type: byte[]
		Statement: $r2 = virtualinvoke $r1.<java.security.MessageDigest: byte[] digest()>()
		Method: <com.google.common.hash.MessageDigestHashFunction$MessageDigestHasher: com.google.common.hash.HashCode hash()>
		SHA-256: 498aa274b0e0dc658a96e5b82797c2ef859caa8cc0a4a03329fbcf0be8023051
		Secure: true
	Object:
		Variable: $r2
		Type: byte[]
		Statement: $r2 = virtualinvoke $r1.<java.security.MessageDigest: byte[] digest()>()
		Method: <com.securepreferences.SecurePreferences: java.lang.String j(java.lang.String)>
		SHA-256: e2b715a5aca29f5b3e5c48f53993bedf57ea6fb74ff9af6978095ac1d54437f1
		Secure: true
	Object:
		Variable: $r4
		Type: byte[]
		Statement: $r4 = virtualinvoke $r3.<java.security.MessageDigest: byte[] digest()>()
		Method: <com.google.android.play.core.assetpacks.zzdq: java.lang.String zza(java.util.List)>
		SHA-256: 8d0949d25c03c4f8ef821ec6e6c83d60ac30fa701be68a7cbe04102c99c2bdd9
		Secure: false
	Object:
		Variable: $r8
		Type: javax.net.ssl.SSLContext
		Statement: $r8 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer330194)
		Method: <org.acra.http.BaseHttpRequest: void b(javax.net.ssl.HttpsURLConnection)>
		SHA-256: b7b51da3af2b337de3fa6dc31e83dc22b29d43fd811d71f2e7159c6ffb5da234
		Secure: false
	Object:
		Variable: $r0
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r0.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r3, varReplacer289754)
		Method: <com.tozny.crypto.android.AesCbcWithIntegrity: com.tozny.crypto.android.AesCbcWithIntegrity$SecretKeys k()>
		SHA-256: 4ca5ad8a6668a287754eef467f3cd0573fffe0226de80708ff3b90a6e91e678e
		Secure: false
	Object:
		Variable: $r1
		Type: java.lang.String
		Statement: specialinvoke $r7.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r2, $r1)
		Method: <com.amazonaws.mobileconnectors.cognitoidentityprovider.util.Hkdf: void g(byte[],byte[])>
		SHA-256: c8efbbc2113a4d80ea68f3abbf5212ddda4c7f2dd5216633264d7de240ccd769
		Secure: false
	Object:
		Variable: $r0
		Type: java.security.MessageDigest
		Statement: $r0 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer166607)
		Method: <com.google.android.gms.measurement.internal.zzlb: java.security.MessageDigest zzF()>
		SHA-256: 3106eb7aeb147948515971e4b37c428f279bccbcf8d54e0e66e442ce86cb4ade
		Secure: false
	Object:
		Variable: $r13
		Type: javax.crypto.Mac
		Statement: $r13 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>(varReplacer258830)
		Method: <com.amazonaws.mobileconnectors.cognitoidentityprovider.CognitoUser: com.amazonaws.services.cognitoidentityprovider.model.RespondToAuthChallengeRequest X(com.amazonaws.services.cognitoidentityprovider.model.RespondToAuthChallengeResult,java.lang.String,java.lang.String,com.amazonaws.mobileconnectors.cognitoidentityprovider.CognitoUser$AuthenticationHelper)>
		SHA-256: 9f81d7b655918f8fe407e8e1e26e4e1e6d1b9519fbdde4af4b5c540826bf21f1
		Secure: false
	Object:
		Variable: $r3
		Type: java.security.Signature
		Statement: $r3 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String,java.lang.String)>($r4, $r2)
		Method: <org.conscrypt.OpenSSLX509Certificate: void verifyInternal(java.security.PublicKey,java.lang.String)>
		SHA-256: 4b73d9ea47b70e095beb17e2b4e8c62bcb1a3b70cdd913b654094befd6fbd016
		Secure: false
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r3 = virtualinvoke $r2.<java.security.MessageDigest: byte[] digest(byte[])>($r3)
		Method: <me.pushy.sdk.lib.paho.internal.websocket.WebSocketHandshake: byte[] sha1(java.lang.String)>
		SHA-256: 6eda339e373514871fdcaa5a3395bb2434b6fe5d0b32f9405d0cd6757160c015
		Secure: false
	Object:
		Variable: $r8
		Type: java.lang.String
		Statement: $r10 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>($r8)
		Method: <org.conscrypt.OpenSSLX509Certificate: java.security.PublicKey getPublicKey()>
		SHA-256: fb24971f565cb4681c3c1e192adc31a35b4a987353817f6def6d3d265ac75389
		Secure: false
	Object:
		Variable: $r3
		Type: javax.crypto.KeyGenerator
		Statement: $r3 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer259625)
		Method: <com.amazonaws.internal.keyvaluestore.KeyProvider10: java.security.Key a(java.lang.String)>
		SHA-256: fb9421df2c2e5c0235597e0ac7380d01b66a7726d89626af30167565c4bcf683
		Secure: false
	Object:
		Variable: $r2
		Type: byte[]
		Statement: $r1 = virtualinvoke $r6.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r2)
		Method: <org.apache.http.impl.auth.NTLMEngineImpl$CipherGen: byte[] getLanManagerSessionKey()>
		SHA-256: f01b4884d325ff2cbaec4d337733306d4929c396fda945564d8b98b4e3ec7d23
		Secure: false
	Object:
		Variable: $r7
		Type: javax.crypto.SecretKey
		Statement: $r7 = virtualinvoke $r3.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <com.amazonaws.internal.keyvaluestore.KeyProvider23: java.security.Key a(java.lang.String)>
		SHA-256: 52c1f4d823dc06290800080b4991f45ba3aa3cf24f5f8e97801e1fdb786e3479
		Secure: true
	Object:
		Variable: $r17
		Type: javax.net.ssl.KeyManager[]
		Statement: $r17 = virtualinvoke $r16.<javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManager[] getKeyManagers()>()
		Method: <me.pushy.sdk.lib.paho.internal.security.SSLSocketFactoryFactory: javax.net.ssl.SSLContext getSSLContext(java.lang.String)>
		SHA-256: cd0e3b76762bcc893e3b8c71b838de88e9ec2eaaec5c03709c5f4ebb7add121e
		Secure: false
	Object:
		Variable: $r2
		Type: byte[]
		Statement: $r2 = virtualinvoke $r1.<java.security.MessageDigest: byte[] digest()>()
		Method: <com.google.common.hash.MessageDigestHashFunction$MessageDigestHasher: com.google.common.hash.HashCode hash()>
		SHA-256: 498aa274b0e0dc658a96e5b82797c2ef859caa8cc0a4a03329fbcf0be8023051
		Secure: true
	Object:
		Variable: $r6
		Type: javax.crypto.Cipher
		Statement: $r6 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer337312)
		Method: <org.apache.http.impl.auth.NTLMEngineImpl$CipherGen: byte[] getLanManagerSessionKey()>
		SHA-256: 9106a55e5318f6e3d02944955dd174044266f70f81953f5fb99c8c59338dcf26
		Secure: false
	Object:
		Variable: $r11
		Type: byte[]
		Statement: $r11 = virtualinvoke $r13.<javax.crypto.Mac: byte[] doFinal(byte[])>($r11)
		Method: <com.amazonaws.mobileconnectors.cognitoidentityprovider.CognitoUser: com.amazonaws.services.cognitoidentityprovider.model.RespondToAuthChallengeRequest X(com.amazonaws.services.cognitoidentityprovider.model.RespondToAuthChallengeResult,java.lang.String,java.lang.String,com.amazonaws.mobileconnectors.cognitoidentityprovider.CognitoUser$AuthenticationHelper)>
		SHA-256: db3fab4e5b461c8118e0851cde92eaa947e0456b26744b9319d9ed17bf849560
		Secure: false
	Object:
		Variable: $r14
		Type: java.security.KeyStore
		Statement: $r14 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>($r9)
		Method: <me.pushy.sdk.lib.paho.internal.security.SSLSocketFactoryFactory: javax.net.ssl.SSLContext getSSLContext(java.lang.String)>
		SHA-256: 5149894d05ef20df222d58c4a033421d6302e35e69a14f445f906bc16807ea17
		Secure: false
	Object:
		Variable: $r21
		Type: javax.crypto.Mac
		Statement: $r21 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>(varReplacer101083)
		Method: <com.amazonaws.mobileconnectors.cognitoidentityprovider.CognitoUser: com.amazonaws.services.cognitoidentityprovider.model.RespondToAuthChallengeRequest N0(java.util.Map,java.lang.String,java.lang.String,java.lang.String,com.amazonaws.mobileconnectors.cognitoidentityprovider.CognitoUser$AuthenticationHelper)>
		SHA-256: 75786911517902998213f6b048cc14d7b4912362dbbf02ddd7f4583c2468ecb3
		Secure: false
	Object:
		Variable: varReplacer220908
		Type: java.lang.String
		Statement: specialinvoke $r0.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r3, varReplacer220908)
		Method: <com.meari.sdk.utils.HmacshaUtil: byte[] HmacSHA1Encrypt(java.lang.String,java.lang.String)>
		SHA-256: 966c87262208ca6729db0ea05cc635bde2d1c8162833ca95f27eb0bfe3a87dd7
		Secure: false
	Object:
		Variable: $r1
		Type: javax.net.ssl.SSLContext
		Statement: $r1 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String,java.security.Provider)>(varReplacer277808, $r2)
		Method: <okhttp3.internal.platform.BouncyCastlePlatform: javax.net.ssl.SSLContext newSSLContext()>
		SHA-256: ff20d20d7bbec3b799152c062f803ee398ce95cc64522e7644f7fd9782dfabb5
		Secure: false
	Object:
		Variable: $r1
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r1.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r3, $r5)
		Method: <com.amazonaws.auth.AbstractAWSSigner: byte[] v(byte[],byte[],com.amazonaws.auth.SigningAlgorithm)>
		SHA-256: 4f3dbefbea9b6e6bef5759e46cb750ad38a29551ae2789af9d15dc74fc4b8b44
		Secure: false
	Object:
		Variable: $r8
		Type: java.security.Key
		Statement: $r8 = virtualinvoke $r0.<java.security.KeyStore: java.security.Key getKey(java.lang.String,char[])>($r1, $r7)
		Method: <com.amazonaws.mobileconnectors.iot.AWSIotKeystoreHelper: java.security.KeyStore b(java.security.KeyStore,java.lang.String,java.lang.String)>
		SHA-256: 7c54a9f8cba35f4f589690713130298def6efb15badcad8aadfe1d2438188bf0
		Secure: false
	Object:
		Variable: $r3
		Type: byte[]
		Statement: virtualinvoke $r2.<java.security.SecureRandom: void nextBytes(byte[])>($r3)
		Method: <com.rubetek.client.modules.authorization.AuthRepository: java.lang.String k()>
		SHA-256: b8fca0243ea182bd55773f96a9f93beae8b485cfc6ea7f1fdd60889582feea2d
		Secure: true
	Object:
		Variable: $r2
		Type: byte[]
		Statement: $r2 = virtualinvoke $r1.<javax.crypto.Mac: byte[] doFinal()>()
		Method: <com.google.common.hash.MacHashFunction$MacHasher: com.google.common.hash.HashCode hash()>
		SHA-256: a89d37061ba0dac61e1b08aaf3eb3497c39726681770418d4469691a8e1f6dbc
		Secure: false
	Object:
		Variable: $r2
		Type: byte[]
		Statement: $r2 = virtualinvoke $r6.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r2)
		Method: <com.amazonaws.internal.keyvaluestore.KeyProvider18: byte[] e(java.lang.String,byte[])>
		SHA-256: bddbd2de49726236469b67772909103d73fce72d1acce4817b8f19a571e5aa5b
		Secure: false
	Object:
		Variable: $r5
		Type: java.security.KeyStore
		Statement: $r5 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>($r3)
		Method: <com.amazonaws.mobileconnectors.iot.AWSIotKeystoreHelper: java.security.KeyStore a(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
		SHA-256: 362cfa33f2a38260f0e5e447632b46a9d2d2dbebefd32e39c98f87d47e7ba6b9
		Secure: false
	Object:
		Variable: $r4
		Type: java.security.MessageDigest
		Statement: $r4 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r3)
		Method: <org.apache.http.impl.auth.DigestScheme: java.security.MessageDigest createMessageDigest(java.lang.String)>
		SHA-256: bafd683999767fa653a59f6561b5fb73a4ec80f20b87a366e3f277c0d9c77bd
		Secure: false
	Object:
		Variable: $r0
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r0.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r2, varReplacer221417)
		Method: <com.p2p.core.utils.DES: byte[] desDecrypt(byte[],byte[])>
		SHA-256: f055ec098be531b38dce2aad4470207fc135d6d55690369d78add4230ca0158c
		Secure: false
	Object:
		Variable: varReplacer297502
		Type: java.lang.String
		Statement: $r13 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>(varReplacer297502)
		Method: <com.google.api.client.auth.openidconnect.IdTokenVerifier$PublicKeyLoader: java.security.PublicKey buildEs256PublicKey(com.google.api.client.auth.openidconnect.IdTokenVerifier$PublicKeyLoader$JsonWebKey)>
		SHA-256: ae26951a83145120474008c7e52e555fb7699afe9aa5cb8791879201235042ba
		Secure: false
	Object:
		Variable: $r7
		Type: java.security.MessageDigest
		Statement: $r7 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r6)
		Method: <com.google.android.play.core.internal.zzi: byte[][] zzk(int[],com.google.android.play.core.internal.zzc[])>
		SHA-256: bb34e06cd50742b9bc175663cecb2f47b22f0f4e039d41f02bca062dc6f7a83
		Secure: true
	Object:
		Variable: $r9
		Type: javax.crypto.spec.IvParameterSpec
		Statement: specialinvoke $r9.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r7)
		Method: <com.google.android.exoplayer2.upstream.cache.CachedContentIndex$LegacyStorage: void writeFile(java.util.HashMap)>
		SHA-256: 2c509f54f169000fda7a2d594f0a37a51d8a71318d9074548051a677d33a5aaa
		Secure: false
	Object:
		Variable: $r2
		Type: javax.net.ssl.SSLContext
		Statement: $r2 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer311206)
		Method: <com.amazonaws.http.UrlHttpClient: void e(javax.net.ssl.HttpsURLConnection)>
		SHA-256: 4e6bd08e9498ee1e88a5063a40b66b859af9e8b99ff715cfd76c940346297dee
		Secure: false
	Object:
		Variable: $r9
		Type: byte[]
		Statement: $r9 = virtualinvoke $r7.<java.security.MessageDigest: byte[] digest()>()
		Method: <com.rubetek.client.modules.rtsp.RtspClient$Companion: java.lang.String C(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
		SHA-256: 71d852a6ff00178c5e1fcc2ba18144971fe32e1c689220e498cd0221c4fb87eb
		Secure: false
	Object:
		Variable: varReplacer101069
		Type: java.lang.String
		Statement: specialinvoke $r22.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r19, varReplacer101069)
		Method: <com.amazonaws.mobileconnectors.cognitoidentityprovider.CognitoUser: com.amazonaws.services.cognitoidentityprovider.model.RespondToAuthChallengeRequest N0(java.util.Map,java.lang.String,java.lang.String,java.lang.String,com.amazonaws.mobileconnectors.cognitoidentityprovider.CognitoUser$AuthenticationHelper)>
		SHA-256: 9fd2ce5e1ee0e5c542884a9c3294fdc4740415feaff412c480aa88a21a8c8f2d
		Secure: false
	Object:
		Variable: $r8
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r8.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r6, varReplacer289741)
		Method: <com.tozny.crypto.android.AesCbcWithIntegrity: com.tozny.crypto.android.AesCbcWithIntegrity$SecretKeys l(java.lang.String,byte[],int)>
		SHA-256: 8749260b61611cf2f89cff7b38802a0a520e0a741df9d80d9264ca4cae7d914b
		Secure: true
	Object:
		Variable: $i0
		Type: int
		Statement: $i0 = virtualinvoke $r35.<java.util.Random: int nextInt()>()
		Method: <com.rubetek.client.modules.scenarios.ScenarioHelperKt: java.lang.Object f(rubetek.tag.homebuilder.Condition,java.util.List,java.util.List,kotlin.coroutines.Continuation)>
		SHA-256: 8fd25fc55936a76ffce7d5c0b225e6529feb66cb58676f0795a8282f42dd9223
		Secure: true
	Object:
		Variable: $r14
		Type: java.security.PublicKey
		Statement: $r14 = virtualinvoke $r13.<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>($r12)
		Method: <com.google.api.client.auth.openidconnect.IdTokenVerifier$PublicKeyLoader: java.security.PublicKey buildEs256PublicKey(com.google.api.client.auth.openidconnect.IdTokenVerifier$PublicKeyLoader$JsonWebKey)>
		SHA-256: ac69a931aac7c52ec33dc323f231bd041dcfde90ec0225d1e713de487b8141f6
		Secure: false
	Object:
		Variable: $r1
		Type: byte[]
		Statement: $r0 = virtualinvoke $r6.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r1)
		Method: <org.apache.http.impl.auth.NTLMEngineImpl: byte[] lmResponse(byte[],byte[])>
		SHA-256: f3032edeac7c36138c9692e3752032f05ac7c2bf8405b2ac66a1a7396af18c32
		Secure: false
	Object:
		Variable: $r8
		Type: java.security.AlgorithmParameters
		Statement: $r8 = staticinvoke <java.security.AlgorithmParameters: java.security.AlgorithmParameters getInstance(java.lang.String)>(varReplacer297504)
		Method: <com.google.api.client.auth.openidconnect.IdTokenVerifier$PublicKeyLoader: java.security.PublicKey buildEs256PublicKey(com.google.api.client.auth.openidconnect.IdTokenVerifier$PublicKeyLoader$JsonWebKey)>
		SHA-256: ef0777ba39f936af2b363900f5e9ca79920aebf0d44e249faca21223623b5027
		Secure: false
	Object:
		Variable: $r6
		Type: javax.crypto.Cipher
		Statement: $r6 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.lang.String)>(varReplacer279588, varReplacer279589)
		Method: <com.amazonaws.internal.keyvaluestore.KeyProvider18: byte[] d(java.lang.String,byte[])>
		SHA-256: 86e0572c69cd5eca27828934e027ab79b1635ad83c0a1f659e0b453446ad5ba8
		Secure: false
	Object:
		Variable: $r1
		Type: byte[]
		Statement: $r1 = virtualinvoke $r4.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r1)
		Method: <com.tozny.crypto.android.AesCbcWithIntegrity: com.tozny.crypto.android.AesCbcWithIntegrity$CipherTextIvMac h(byte[],com.tozny.crypto.android.AesCbcWithIntegrity$SecretKeys)>
		SHA-256: 85ae4d0807f5b9d94a5c30f723005eaae07f21ea63e4ee903616803eae0a5f7e
		Secure: false
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r3 = virtualinvoke $r2.<java.security.MessageDigest: byte[] digest()>()
		Method: <org.apache.http.impl.auth.NTLMEngineImpl$HMACMD5: void <init>(byte[])>
		SHA-256: d5cf1f8de9a5f17cad5006e43f64e63b02f8f56706a9e139ea0baeb6f7532b60
		Secure: false
	Object:
		Variable: $r5
		Type: javax.crypto.SecretKey
		Statement: $r5 = virtualinvoke $r4.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>($r2)
		Method: <com.tozny.crypto.android.AesCbcWithIntegrity: com.tozny.crypto.android.AesCbcWithIntegrity$SecretKeys l(java.lang.String,byte[],int)>
		SHA-256: b22037b23af8804fdfd73d672e9bf2b55b3cd1f560b8e516ae89141f68edb02f
		Secure: false
	Object:
		Variable: $r0
		Type: java.security.SecureRandom
		Statement: specialinvoke $r0.<java.security.SecureRandom: void <init>()>()
		Method: <com.google.api.client.auth.oauth.OAuthParameters: void <clinit>()>
		SHA-256: 32d2a5fed6ce7e3541979b3e25cdb197d368f51d226c0a9eafe64eaaaab35731
		Secure: true
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r1 = virtualinvoke $r2.<java.security.MessageDigest: byte[] digest(byte[])>($r3)
		Method: <org.apache.http.impl.auth.NTLMEngineImpl$HMACMD5: byte[] getOutput()>
		SHA-256: f6730166425cdde60c0ca0f7f01862a2b9705ad5b213be5cd1a19bc89976254d
		Secure: false
	Object:
		Variable: $r3
		Type: javax.crypto.Cipher
		Statement: $r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer221420)
		Method: <com.p2p.core.utils.DES: byte[] desEncrypt(byte[],byte[])>
		SHA-256: ec304ce1bb51bb076e5c35bc395f6a78dd44e527748b467babe9307b4a4261d9
		Secure: false
	Object:
		Variable: $r16
		Type: javax.net.ssl.KeyManagerFactory
		Statement: $r16 = staticinvoke <javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManagerFactory getInstance(java.lang.String)>($r11)
		Method: <me.pushy.sdk.lib.paho.internal.security.SSLSocketFactoryFactory: javax.net.ssl.SSLContext getSSLContext(java.lang.String)>
		SHA-256: 3502fa758305a1dec42a6535b8ce8189f7707f9bdc917efceea97f5a2943e84d
		Secure: false
	Object:
		Variable: $r4
		Type: java.security.KeyStore
		Statement: $r4 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>($r3)
		Method: <com.amazonaws.mobileconnectors.iot.AWSIotKeystoreHelper: java.security.KeyStore b(java.security.KeyStore,java.lang.String,java.lang.String)>
		SHA-256: 842f41f11ba44a44cec3e7495731ea031d489218055489fade12aeaf34d2ce6e
		Secure: true
	Object:
		Variable: $r2
		Type: java.security.MessageDigest
		Statement: $r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r1)
		Method: <okio.ByteString: okio.ByteString i(java.lang.String)>
		SHA-256: 2a11d9726d42a9eb52012908918cad1dc870d8e56cb5a01ede4d65515f31293d
		Secure: false
	Object:
		Variable: $r9
		Type: java.security.spec.ECGenParameterSpec
		Statement: specialinvoke $r9.<java.security.spec.ECGenParameterSpec: void <init>(java.lang.String)>(varReplacer297503)
		Method: <com.google.api.client.auth.openidconnect.IdTokenVerifier$PublicKeyLoader: java.security.PublicKey buildEs256PublicKey(com.google.api.client.auth.openidconnect.IdTokenVerifier$PublicKeyLoader$JsonWebKey)>
		SHA-256: 546ecc7419f3e600bdf0cfdac8d632f5f21316768c25efe37ef1a45ab621e3b4
		Secure: true
	Object:
		Variable: $r10
		Type: byte[]
		Statement: $i1 = virtualinvoke $r7.<java.security.MessageDigest: int digest(byte[],int,int)>($r10, $i1, $i11)
		Method: <com.google.android.play.core.internal.zzi: byte[][] zzk(int[],com.google.android.play.core.internal.zzc[])>
		SHA-256: 9bcb9de2136393d4501d52a87d162f857a0e7522a50a7b9fa936dec58be0679
		Secure: true
	Object:
		Variable: $r24
		Type: byte[]
		Statement: $r24 = virtualinvoke $r25.<java.security.MessageDigest: byte[] digest(byte[])>($r24)
		Method: <org.apache.http.impl.auth.DigestScheme: org.apache.http.Header createDigestHeader(org.apache.http.auth.Credentials,org.apache.http.HttpRequest)>
		SHA-256: d6819f5a090592a9c309f7dee8c1d3060c928c197153632cc3c4595ac59ae53a
		Secure: false
	Object:
		Variable: $r3
		Type: java.security.MessageDigest
		Statement: $r3 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer337340)
		Method: <org.apache.http.impl.auth.NTLMEngineImpl: byte[] ntlm2SessionResponse(byte[],byte[],byte[])>
		SHA-256: ba6246762479f8f73739c18bb48a94f0fa3d570e9c00e6184fb49e02e8ab25ea
		Secure: false
	Object:
		Variable: $r4
		Type: javax.net.ssl.KeyManagerFactory
		Statement: $r4 = staticinvoke <javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManagerFactory getInstance(java.lang.String)>($r3)
		Method: <com.amazonaws.mobileconnectors.iot.AWSIotSslUtility: javax.net.ssl.SSLSocketFactory a(java.security.KeyStore,int)>
		SHA-256: 8084959884f18bbea1c3b7c70fac3c3d5a70509c03194e06655215956fb5cf79
		Secure: false
	Object:
		Variable: $r1
		Type: byte[]
		Statement: $r1 = virtualinvoke $r4.<java.security.MessageDigest: byte[] digest(byte[])>($r1)
		Method: <com.google.android.gms.measurement.internal.zzkv: long zzd(byte[])>
		SHA-256: 6cfc3ea5ded05c33bb4b02e66ff74b86d957ba674c6e9dcb533302cf26e54c55
		Secure: false
	Object:
		Variable: $r5
		Type: byte[]
		Statement: $r5 = virtualinvoke $r3.<java.security.MessageDigest: byte[] digest()>()
		Method: <com.google.android.gms.internal.firebase-auth-api.zzyv: java.lang.String zzm(java.lang.String,java.lang.String)>
		SHA-256: 703694f2e63c88455552e82847738869ca99e1423a1e82957802c59e3bdb2b07
		Secure: true
	Object:
		Variable: $r0
		Type: java.security.MessageDigest
		Statement: $r0 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r2)
		Method: <com.google.android.gms.common.util.AndroidUtilsLight: java.security.MessageDigest zza(java.lang.String)>
		SHA-256: c613dcbe025721f48d3fcab4e003017d7cb704971fc9d0296bae42be0b7eb30a
		Secure: false
	Object:
		Variable: $r4
		Type: byte[]
		Statement: $r4 = virtualinvoke $r5.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r4)
		Method: <com.amazonaws.internal.keyvaluestore.AWSKeyValueStore: java.lang.String c(java.security.Key,java.security.spec.AlgorithmParameterSpec,java.lang.String)>
		SHA-256: edfd2b11e8e63432004d2f2e8ae5bf7e1876b7d21db9910fb7a27c41577a82e3
		Secure: false
	Object:
		Variable: $r3
		Type: javax.net.ssl.TrustManager[]
		Statement: $r3 = virtualinvoke $r2.<javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManager[] getTrustManagers()>()
		Method: <okhttp3.internal.platform.ConscryptPlatform: javax.net.ssl.X509TrustManager platformTrustManager()>
		SHA-256: 15a76129680a3cd57380001c355c828c5afc3ba9ce32fff65b352ff3390bbd6
		Secure: false
	Object:
		Variable: $r24
		Type: javax.net.ssl.TrustManagerFactory
		Statement: $r24 = staticinvoke <javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String,java.lang.String)>($r4, $r11)
		Method: <org.eclipse.paho.client.mqttv3.internal.security.SSLSocketFactoryFactory: javax.net.ssl.SSLContext m(java.lang.String)>
		SHA-256: e90592647b8e12efba15909d6f2488b0e340e9ed854c98c61543250f471e24ae
		Secure: false
	Object:
		Variable: $r1
		Type: javax.net.ssl.SSLContext
		Statement: $r1 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String,java.security.Provider)>(varReplacer277806, $r2)
		Method: <okhttp3.internal.platform.ConscryptPlatform: javax.net.ssl.SSLContext newSSLContext()>
		SHA-256: 90c255f92a5e0f7bc1d2fed7e2c9c62d8c674c81ba00b780e78640fd5257f4eb
		Secure: false
	Object:
		Variable: $r24
		Type: java.security.Signature
		Statement: $r24 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>($r13)
		Method: <com.google.android.play.core.internal.zzi: java.security.cert.X509Certificate[] zzj(java.nio.ByteBuffer,java.util.Map,java.security.cert.CertificateFactory)>
		SHA-256: 2733eb0ce4c60e57b98e525bba9b793c6187bacac7cf4e7d320ee29605ac851a
		Secure: false
	Object:
		Variable: $r0
		Type: byte[]
		Statement: $r0 = virtualinvoke $r6.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r1)
		Method: <org.apache.http.impl.auth.NTLMEngineImpl: byte[] lmResponse(byte[],byte[])>
		SHA-256: cdf1555884c268f883b6f786392d353b2786b4804be8408b66194b7c76399250
		Secure: false
	Object:
		Variable: $r6
		Type: javax.crypto.Cipher
		Statement: $r6 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.lang.String)>(varReplacer281115, varReplacer281116)
		Method: <com.amazonaws.internal.keyvaluestore.KeyProvider18: byte[] e(java.lang.String,byte[])>
		SHA-256: fbbd80a1e91f58823d8c69107064375d46357acdd851abfd2675aafaa76079c9
		Secure: false
	Object:
		Variable: $r6
		Type: javax.net.ssl.KeyManager[]
		Statement: $r6 = virtualinvoke $r4.<javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManager[] getKeyManagers()>()
		Method: <com.amazonaws.mobileconnectors.iot.AWSIotSslUtility: javax.net.ssl.SSLSocketFactory a(java.security.KeyStore,int)>
		SHA-256: cbe8c5bd2b14ddd7c0baa36dd847405caa3a858eecaa4436c7a61c065e09abf6
		Secure: false
	Object:
		Variable: varReplacer337349
		Type: java.lang.String
		Statement: specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, varReplacer337349)
		Method: <org.apache.http.impl.auth.NTLMEngineImpl: java.security.Key createDESKey(byte[],int)>
		SHA-256: 9e61209a269dd9c11246ca4c9ec4a9f533b181b71cadda20e688053290c04a46
		Secure: false
	Object:
		Variable: $r8
		Type: java.security.KeyStore
		Statement: $r8 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>($r7)
		Method: <com.amazonaws.mobileconnectors.iot.AWSIotKeystoreHelper: java.lang.Boolean d(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
		SHA-256: e7b6a9dd46ff8aad21dbb6ad4486b53b286c6478b3d58fcda0e8870c0327213b
		Secure: false
	Object:
		Variable: $r5
		Type: byte[]
		Statement: $r5 = virtualinvoke $r4.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r5)
		Method: <com.amazonaws.internal.keyvaluestore.AWSKeyValueStore: java.lang.String d(java.security.Key,java.security.spec.AlgorithmParameterSpec,java.lang.String)>
		SHA-256: a8a44a0cb799acb34448323c7f8f823bb673b34d4fec9a56525b0cc56678272b
		Secure: false
	Object:
		Variable: $r10
		Type: javax.net.ssl.TrustManagerFactory
		Statement: $r10 = staticinvoke <javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String)>($r5)
		Method: <me.pushy.sdk.util.PushyCertificateManager: javax.net.SocketFactory getEnterpriseSslSocketFactory(android.content.Context)>
		SHA-256: 5dccbd73f87c17e173fe75399be05f33c9ba2cec1c2c096b1f10750f7ce91201
		Secure: true
	Object:
		Variable: $r7
		Type: java.security.KeyStore
		Statement: $r7 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>(varReplacer258291)
		Method: <com.amazonaws.internal.keyvaluestore.KeyProvider18: void c(java.lang.String)>
		SHA-256: f4495bb082b5092fbbfe3ba1815ce929e1bb7ae5e79853a5a6118bc835ea50de
		Secure: false
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r3 = virtualinvoke $r4.<java.security.MessageDigest: byte[] digest()>()
		Method: <com.rubetek.client.modules.authorization.AuthRepository: java.lang.String j()>
		SHA-256: 16a486a5ae9e1a123d686d0ed1f5534dcffb20f41c723c0969415003d14aa190
		Secure: true
	Object:
		Variable: $r3
		Type: javax.crypto.Cipher
		Statement: $r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer336848)
		Method: <org.apache.http.impl.auth.NTLMEngineImpl: byte[] RC4(byte[],byte[])>
		SHA-256: 69d1ba98f57d137a3e49be1e98bd6668454574a1413d25260fc2dceb48d654d0
		Secure: false
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r3 = interfaceinvoke $r2.<java.security.Key: byte[] getEncoded()>()
		Method: <com.tozny.crypto.android.AesCbcWithIntegrity$SecretKeys: java.lang.String toString()>
		SHA-256: 6ace729edcd5c6999de4792ecd927a29da60d1dc62af7c786d5793d2ee049dbb
		Secure: true
	Object:
		Variable: $r17
		Type: byte[]
		Statement: $r17 = interfaceinvoke $r16.<java.security.Key: byte[] getEncoded()>()
		Method: <com.amazonaws.internal.keyvaluestore.KeyProvider18: java.security.Key a(java.lang.String)>
		SHA-256: 28a1949cd5fc3ac5c05369afd90b0e816b68a322857bb11723768b45d033cdd2
		Secure: true
	Object:
		Variable: $r2
		Type: java.security.MessageDigest
		Statement: $r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer254638)
		Method: <com.google.android.play.core.internal.zzcg: java.lang.String zza(byte[])>
		SHA-256: 67f61c338c978a3abd3c8bc1861f8a93476433a43503c1c699a92731e6583e62
		Secure: true
	Object:
		Variable: $r8
		Type: javax.crypto.Cipher
		Statement: $r8 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer260079)
		Method: <com.meari.sdk.utils.DesUtils: java.lang.String encode(java.lang.String,java.lang.String,java.lang.String)>
		SHA-256: 72a37583784b5a36e487c7e3683381aa031b5c32f14e0ec3b3b7cd687bd9416f
		Secure: false
	Object:
		Variable: $r7
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r7.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, varReplacer289738)
		Method: <com.tozny.crypto.android.AesCbcWithIntegrity: com.tozny.crypto.android.AesCbcWithIntegrity$SecretKeys l(java.lang.String,byte[],int)>
		SHA-256: 2f19c78cc673c9a4e004da4fab3251ecffa8e9902e9dbcb8b6978d7039dd3f1f
		Secure: true
	Object:
		Variable: $r4
		Type: byte[]
		Statement: $r4 = virtualinvoke $r2.<java.security.MessageDigest: byte[] digest()>()
		Method: <com.rubetek.client.utils.AndroidUtils: java.lang.String Y(java.lang.String)>
		SHA-256: bacb0d0f1991b8f50fafc527f9668cbe0f37e54ee9e8ba0c08fa9e53495f8f93
		Secure: false
	Object:
		Variable: $r10
		Type: java.security.KeyStore
		Statement: $r10 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>(varReplacer101573)
		Method: <com.meari.sdk.utils.SdkUtils: javax.net.SocketFactory getIotFactory(android.content.Context)>
		SHA-256: 3efe78b67d79d8ada1d69e05b208f9b724ad92adcd8c4b2a9857d992973a64d4
		Secure: false
	Object:
		Variable: $r25
		Type: javax.net.ssl.TrustManager[]
		Statement: $r25 = virtualinvoke $r24.<javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManager[] getTrustManagers()>()
		Method: <me.pushy.sdk.lib.paho.internal.security.SSLSocketFactoryFactory: javax.net.ssl.SSLContext getSSLContext(java.lang.String)>
		SHA-256: 4845d370b2525dcea0df759ea58084eaf3dcb6fdbc3f0bf5f8bd3b0be6f2613e
		Secure: false
	Object:
		Variable: $r2
		Type: javax.net.ssl.SSLContext
		Statement: $r2 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer228916)
		Method: <com.amazonaws.mobileconnectors.iot.AWSIotSslUtility: javax.net.ssl.SSLSocketFactory a(java.security.KeyStore,int)>
		SHA-256: abb7cfb0b323cf92a85e9c3e6675741c23bf9affd181da3f2bd74524fec2ad00
		Secure: false
	Object:
		Variable: $r0
		Type: javax.crypto.spec.IvParameterSpec
		Statement: specialinvoke $r0.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r3)
		Method: <com.tozny.crypto.android.AesCbcWithIntegrity: com.tozny.crypto.android.AesCbcWithIntegrity$CipherTextIvMac h(byte[],com.tozny.crypto.android.AesCbcWithIntegrity$SecretKeys)>
		SHA-256: 7c22d33300e2ca2d96fd922ae03edca90b734668aa3f313b53a9f1a24649fbe8
		Secure: true
	Object:
		Variable: $r1
		Type: javax.crypto.Mac
		Statement: $r1 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>($r2)
		Method: <com.amazonaws.mobileconnectors.cognitoidentityprovider.util.Hkdf: javax.crypto.Mac b()>
		SHA-256: d73d44c74b32ca5b9f53e397c8063d4dfac03a61743add04954ab8721e403502
		Secure: false
	Object:
		Variable: $r1
		Type: byte[]
		Statement: $r1 = virtualinvoke $r2.<java.security.MessageDigest: byte[] digest()>()
		Method: <com.google.android.play.core.internal.zzcg: java.lang.String zza(byte[])>
		SHA-256: 13b57a1c306079f5b7deef364a7020fadb423d91dfb84c86b47343b011ac6093
		Secure: true
	Object:
		Variable: $r2
		Type: javax.net.ssl.TrustManager[]
		Statement: $r2 = virtualinvoke $r1.<javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManager[] getTrustManagers()>()
		Method: <okhttp3.internal.platform.BouncyCastlePlatform: javax.net.ssl.X509TrustManager platformTrustManager()>
		SHA-256: 84f17b7e3930c76e2b174d27b9668ee8d3209ae5512e2c539d541e6ef4265515
		Secure: false
	Object:
		Variable: $r6
		Type: java.security.Key
		Statement: $r6 = virtualinvoke $r2.<java.security.KeyStore: java.security.Key getKey(java.lang.String,char[])>($r1, varReplacer258255)
		Method: <com.amazonaws.internal.keyvaluestore.KeyProvider23: java.security.Key b(java.lang.String)>
		SHA-256: 9a225b23ad340067e18fa39bd57a2635b5054665d6a71f0e643389e194d60b60
		Secure: false
	Object:
		Variable: $r2
		Type: java.security.SecureRandom
		Statement: specialinvoke $r2.<java.security.SecureRandom: void <init>()>()
		Method: <com.amazonaws.internal.keyvaluestore.KeyProvider10: java.security.Key a(java.lang.String)>
		SHA-256: 503cdf3392978e0387f3ef9f1549207ba7091d850964654294cc97757b2511ca
		Secure: true
	Object:
		Variable: $r3
		Type: java.security.MessageDigest
		Statement: $r3 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer288382)
		Method: <com.google.android.exoplayer2.source.rtsp.auth.MD5: java.lang.String hash(java.lang.String)>
		SHA-256: ef47732c588f21e2bc17619039317615d4bbdf9caf45d359719bae73a588d0f7
		Secure: false
	Object:
		Variable: $r22
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r22.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r19, varReplacer101069)
		Method: <com.amazonaws.mobileconnectors.cognitoidentityprovider.CognitoUser: com.amazonaws.services.cognitoidentityprovider.model.RespondToAuthChallengeRequest N0(java.util.Map,java.lang.String,java.lang.String,java.lang.String,com.amazonaws.mobileconnectors.cognitoidentityprovider.CognitoUser$AuthenticationHelper)>
		SHA-256: 229e5c07b2f7d3441c6a86b603032ffab4ef1b178bda0a26f7aad139ce7aae9a
		Secure: false
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r3 = interfaceinvoke $r0.<java.security.Key: byte[] getEncoded()>()
		Method: <org.conscrypt.OpenSSLKey: org.conscrypt.OpenSSLKey fromKeyMaterial(java.security.PrivateKey)>
		SHA-256: 45642c58c6601c9e0991d39ba56e5832354993e69247664720ff01324fc7a57d
		Secure: true
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r3 = virtualinvoke $r2.<java.security.MessageDigest: byte[] digest()>()
		Method: <org.apache.http.impl.auth.NTLMEngineImpl$HMACMD5: byte[] getOutput()>
		SHA-256: 8dda2f10cd4911a51ea6f84d756034bbd2b170b00e8eb73d84894dc35d4275e0
		Secure: false
	Object:
		Variable: $r3
		Type: javax.net.ssl.TrustManagerFactory
		Statement: $r3 = staticinvoke <javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String,java.security.Provider)>($r1, $r2)
		Method: <okhttp3.internal.platform.OpenJSSEPlatform: javax.net.ssl.X509TrustManager platformTrustManager()>
		SHA-256: 1027fce20723454b26980f38c5edb26bcec19bffa5b6443c75459b577c51d460
		Secure: false
	Object:
		Variable: $r4
		Type: java.security.spec.X509EncodedKeySpec
		Statement: specialinvoke $r4.<java.security.spec.X509EncodedKeySpec: void <init>(byte[])>($r2)
		Method: <com.google.firebase.installations.local.IidStore: java.security.PublicKey parseKey(java.lang.String)>
		SHA-256: aea7fce58cc2c3232d1730517ff25b7e58e8210bf5f593374b5621a96b219086
		Secure: false
	Object:
		Variable: $r1
		Type: java.security.SecureRandom
		Statement: specialinvoke $r1.<java.security.SecureRandom: void <init>()>()
		Method: <org.apache.http.impl.auth.DigestScheme: java.lang.String createCnonce()>
		SHA-256: 51809b40f955da1fb4b3dcfeefebf59f1dd607b449e09656926351c68b1d5de6
		Secure: true
	Object:
		Variable: $r1
		Type: java.security.SecureRandom
		Statement: $r1 = staticinvoke <java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String)>(varReplacer336451)
		Method: <org.apache.http.impl.auth.NTLMEngineImpl: void <clinit>()>
		SHA-256: 8e53d68e0a9f022be34e4b851038890ff0f36d4948a351f3225b3047b60ae0c8
		Secure: true
	Object:
		Variable: $r2
		Type: javax.net.ssl.TrustManagerFactory
		Statement: $r2 = staticinvoke <javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String)>($r1)
		Method: <okhttp3.internal.platform.Platform: javax.net.ssl.X509TrustManager platformTrustManager()>
		SHA-256: 5fb6984969c8c0f60ee84399ef18a49aa63648c889757c4080685ad119ecd903
		Secure: false
	Object:
		Variable: varReplacer258262
		Type: java.lang.String
		Statement: specialinvoke $r6.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r5, varReplacer258262)
		Method: <com.amazonaws.internal.keyvaluestore.KeyProvider10: java.security.Key b(java.lang.String)>
		SHA-256: ae298b81be1f4129aaa71fbf4892e2169b6f240980537f68c74c0af31b101772
		Secure: false
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r3 = virtualinvoke $r2.<java.security.MessageDigest: byte[] digest()>()
		Method: <okio.ByteString: okio.ByteString i(java.lang.String)>
		SHA-256: c8da1c96027d215669b2f7b541ecaeda4fd18919e1d9f9c4f42b0911bc448c1c
		Secure: false
	Object:
		Variable: $r7
		Type: java.security.MessageDigest
		Statement: $r7 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r6)
		Method: <com.google.android.play.core.internal.zzi: byte[][] zzk(int[],com.google.android.play.core.internal.zzc[])>
		SHA-256: bb34e06cd50742b9bc175663cecb2f47b22f0f4e039d41f02bca062dc6f7a83
		Secure: true
	Object:
		Variable: varReplacer312989
		Type: java.lang.String
		Statement: $r3 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>(varReplacer312989)
		Method: <com.google.firebase.installations.local.IidStore: java.security.PublicKey parseKey(java.lang.String)>
		SHA-256: 891a39e1b6ee626a5b690215111867921fda9c4ef20744a6c1a3fb6f1de0d176
		Secure: false
	Object:
		Variable: $r7
		Type: javax.crypto.Mac
		Statement: $r7 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>(varReplacer95378)
		Method: <com.amazonaws.mobileconnectors.cognitoidentityprovider.util.CognitoSecretHash: java.lang.String a(java.lang.String,java.lang.String,java.lang.String)>
		SHA-256: 614e83c6797bae89c5d8e22798eb0d8586726c895dcd864b674e75bce9df9eaf
		Secure: false
	Object:
		Variable: $r9
		Type: java.security.PublicKey
		Statement: $r9 = virtualinvoke $r8.<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>($r7)
		Method: <com.google.api.client.auth.openidconnect.IdTokenVerifier$PublicKeyLoader: java.security.PublicKey buildRs256PublicKey(com.google.api.client.auth.openidconnect.IdTokenVerifier$PublicKeyLoader$JsonWebKey)>
		SHA-256: 6953703f305adc035f612e80d2df5ed7605784e1d7b8d0fda353472a68fd93e9
		Secure: false
	Object:
		Variable: $r5
		Type: javax.crypto.SecretKey
		Statement: $r6 = interfaceinvoke $r5.<java.security.Key: byte[] getEncoded()>()
		Method: <com.tozny.crypto.android.AesCbcWithIntegrity: com.tozny.crypto.android.AesCbcWithIntegrity$SecretKeys l(java.lang.String,byte[],int)>
		SHA-256: 4a307fa0f9b75146558e3ecfbadbab90eb18ecd24c13c53069214dc104b84c36
		Secure: true
	Object:
		Variable: $r2
		Type: javax.crypto.spec.PBEKeySpec
		Statement: specialinvoke $r2.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r3, $r1, $i0, varReplacer289737)
		Method: <com.tozny.crypto.android.AesCbcWithIntegrity: com.tozny.crypto.android.AesCbcWithIntegrity$SecretKeys l(java.lang.String,byte[],int)>
		SHA-256: 75317024f3be7effdf5774b8d8f6378b060374da12b0f8e8fdb340b33f9cfc40
		Secure: false
	Object:
		Variable: $r1
		Type: byte[]
		Statement: $r1 = virtualinvoke $r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r1)
		Method: <org.apache.http.impl.auth.NTLMEngineImpl: byte[] RC4(byte[],byte[])>
		SHA-256: ea5cf3d45880768851153806f1be65c24f77d411cab6ce954960ab1ca31e861e
		Secure: false
	Object:
		Variable: $r5
		Type: java.lang.String
		Statement: specialinvoke $r1.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r3, $r5)
		Method: <com.amazonaws.auth.AbstractAWSSigner: byte[] v(byte[],byte[],com.amazonaws.auth.SigningAlgorithm)>
		SHA-256: 6a1556dad77fc7ef8911b2d8ef3ee40b73641eaa39b02cfc88ef8de1f8fc5b9f
		Secure: false
	Object:
		Variable: $r1
		Type: java.security.SecureRandom
		Statement: specialinvoke $r1.<java.security.SecureRandom: void <init>()>()
		Method: <com.google.android.gms.measurement.internal.zzlb: void zzaA()>
		SHA-256: 6483e4adec30a7f4c3e402020905ac1a3ff169c1648260ee41f8a7a2d49ca986
		Secure: true
	Object:
		Variable: $r8
		Type: byte[]
		Statement: $z0 = virtualinvoke $r24.<java.security.Signature: boolean verify(byte[])>($r8)
		Method: <com.google.android.play.core.internal.zzi: java.security.cert.X509Certificate[] zzj(java.nio.ByteBuffer,java.util.Map,java.security.cert.CertificateFactory)>
		SHA-256: 55cb5088d9b1b3fdfea9086d9659211a26418cb192854053870ac00f677ab919
		Secure: false
	Object:
		Variable: $r5
		Type: byte[]
		Statement: $r5 = virtualinvoke $r3.<javax.crypto.Mac: byte[] doFinal()>()
		Method: <com.amazonaws.mobileconnectors.cognitoidentityprovider.util.Hkdf: void c(byte[],int,byte[],int)>
		SHA-256: 615a5314dc5f6660e42a7903890cc59bfba6def52dd9866e7da32a6aad0b7cc3
		Secure: false
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r3 = interfaceinvoke $r2.<java.security.Key: byte[] getEncoded()>()
		Method: <com.tozny.crypto.android.AesCbcWithIntegrity$SecretKeys: java.lang.String toString()>
		SHA-256: 6ace729edcd5c6999de4792ecd927a29da60d1dc62af7c786d5793d2ee049dbb
		Secure: true
	Object:
		Variable: $r4
		Type: javax.crypto.Cipher
		Statement: $r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer228576)
		Method: <com.amazonaws.internal.keyvaluestore.AWSKeyValueStore: java.lang.String d(java.security.Key,java.security.spec.AlgorithmParameterSpec,java.lang.String)>
		SHA-256: e71a67e280470d3763430e74b1f7c048465ff928e7bd354b428a4988cd568337
		Secure: false
	Object:
		Variable: $r2
		Type: javax.net.ssl.TrustManagerFactory
		Statement: $r2 = staticinvoke <javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String)>($r1)
		Method: <okhttp3.internal.platform.ConscryptPlatform: javax.net.ssl.X509TrustManager platformTrustManager()>
		SHA-256: 316cbc86e080130334eaabd60025d96084375d0058312a103cd3255ba6f0aeb
		Secure: false
	Object:
		Variable: $z0
		Type: boolean
		Statement: $z0 = virtualinvoke $r24.<java.security.Signature: boolean verify(byte[])>($r8)
		Method: <com.google.android.play.core.internal.zzi: java.security.cert.X509Certificate[] zzj(java.nio.ByteBuffer,java.util.Map,java.security.cert.CertificateFactory)>
		SHA-256: dd8f96f36f8e0cc2ad7716108d934aa93fce08863a20bfb3f3d96c19458966a7
		Secure: false
	Object:
		Variable: varReplacer289741
		Type: java.lang.String
		Statement: specialinvoke $r8.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r6, varReplacer289741)
		Method: <com.tozny.crypto.android.AesCbcWithIntegrity: com.tozny.crypto.android.AesCbcWithIntegrity$SecretKeys l(java.lang.String,byte[],int)>
		SHA-256: 9b58c5a41d2c189529c58bc52ff0e692bf1b7f2c7618441318a3725ccaee8982
		Secure: true
	Object:
		Variable: $r2
		Type: java.security.MessageDigest
		Statement: $r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer285397)
		Method: <org.eclipse.paho.client.mqttv3.internal.websocket.WebSocketHandshake: byte[] e(java.lang.String)>
		SHA-256: fe5165f074bd51f9fc9140519945d755db0688b091c0e896f458d661dbe73727
		Secure: false
	Object:
		Variable: $r14
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r14.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r11, varReplacer258821)
		Method: <com.amazonaws.mobileconnectors.cognitoidentityprovider.CognitoUser: com.amazonaws.services.cognitoidentityprovider.model.RespondToAuthChallengeRequest X(com.amazonaws.services.cognitoidentityprovider.model.RespondToAuthChallengeResult,java.lang.String,java.lang.String,com.amazonaws.mobileconnectors.cognitoidentityprovider.CognitoUser$AuthenticationHelper)>
		SHA-256: 5f35608a77092018d112db60cab1e568898920e8e86ae6bba52444b08d10fd8f
		Secure: false
	Object:
		Variable: $r2
		Type: byte[]
		Statement: $r2 = virtualinvoke $r5.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r2)
		Method: <com.tozny.crypto.android.AesCbcWithIntegrity: byte[] c(com.tozny.crypto.android.AesCbcWithIntegrity$CipherTextIvMac,com.tozny.crypto.android.AesCbcWithIntegrity$SecretKeys)>
		SHA-256: abc3d0555839b67fae73c60c2bade5f4599f39046f129be141fe475a6057b8d6
		Secure: false
	Object:
		Variable: $r7
		Type: javax.net.ssl.SSLContext
		Statement: $r7 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String,java.lang.String)>($r4, $r3)
		Method: <org.eclipse.paho.client.mqttv3.internal.security.SSLSocketFactoryFactory: javax.net.ssl.SSLContext m(java.lang.String)>
		SHA-256: 6ce26975531a1cc6657f3c6e62c3f0f11bcc537f63f6d191408a72661873c6b3
		Secure: false
	Object:
		Variable: $r16
		Type: javax.net.ssl.KeyManagerFactory
		Statement: $r16 = staticinvoke <javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManagerFactory getInstance(java.lang.String)>($r11)
		Method: <org.eclipse.paho.client.mqttv3.internal.security.SSLSocketFactoryFactory: javax.net.ssl.SSLContext m(java.lang.String)>
		SHA-256: 9874d80d5ffc1b612283b4d3a090e0c226769a0cf475383238d9bcb291ce4fe7
		Secure: false
	Object:
		Variable: $r2
		Type: javax.crypto.SecretKey
		Statement: $r3 = interfaceinvoke $r2.<java.security.Key: byte[] getEncoded()>()
		Method: <com.tozny.crypto.android.AesCbcWithIntegrity$SecretKeys: java.lang.String toString()>
		SHA-256: 4cb4b724f6b72b3562329ab1a04614fbbee9eecea30c034373c1625f1488d46
		Secure: true
	Object:
		Variable: $r5
		Type: java.security.PublicKey
		Statement: $r5 = virtualinvoke $r3.<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>($r4)
		Method: <com.google.firebase.installations.local.IidStore: java.security.PublicKey parseKey(java.lang.String)>
		SHA-256: 28692ce99d5c8ca35ce46bda2fa73a18f9a164f9dc67aed298a1311d42163d12
		Secure: false
	Object:
		Variable: $r7
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r7.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r4, $r1)
		Method: <com.amazonaws.mobileconnectors.cognitoidentityprovider.util.Hkdf: void g(byte[],byte[])>
		SHA-256: a31d9a13934d426b585ac9d2ab9971bed259f4a92448ce7b4c1ea84e76da83d7
		Secure: false
	Object:
		Variable: $r7
		Type: byte[]
		Statement: $r7 = virtualinvoke $r5.<java.security.MessageDigest: byte[] digest(byte[])>($r7)
		Method: <com.google.android.gms.common.util.AndroidUtilsLight: byte[] getPackageCertificateHashBytes(android.content.Context,java.lang.String)>
		SHA-256: b1b700d3bac9a15845b2a1446581968f445f05df9861b6e2918912b25ad1a23d
		Secure: false
	Object:
		Variable: $r4
		Type: java.security.SecureRandom
		Statement: specialinvoke $r4.<java.security.SecureRandom: void <init>()>()
		Method: <com.amazonaws.internal.keyvaluestore.AWSKeyValueStore: void <init>(android.content.Context,java.lang.String,boolean)>
		SHA-256: 20bc9fdee9dd8ed47518c3a1f562b50678b856e856a6acc6ee499f45af1dab7e
		Secure: true
	Object:
		Variable: $r6
		Type: javax.crypto.Mac
		Statement: $r6 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>($r1)
		Method: <com.amazonaws.mobileconnectors.cognitoidentityprovider.util.Hkdf: void g(byte[],byte[])>
		SHA-256: cb454cbafbf9257741f800ae3a5100e0ca39f1ccca9b6e0848fb93cca38cd9ae
		Secure: false
	Object:
		Variable: $r2
		Type: javax.net.ssl.SSLContext
		Statement: $r2 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String,java.lang.String)>(varReplacer228917, varReplacer228918)
		Method: <com.amazonaws.mobileconnectors.iot.AWSIotSslUtility: javax.net.ssl.SSLSocketFactory a(java.security.KeyStore,int)>
		SHA-256: 2fcf00ef90d2d6fcaf00b5e542ede28e26f2741ce6de744d22a883aaf5f8ca16
		Secure: false
	Object:
		Variable: $r5
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r5.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],int,int,java.lang.String)>($r2, varReplacer289749, $i0, varReplacer289750)
		Method: <com.tozny.crypto.android.AesCbcWithIntegrity: com.tozny.crypto.android.AesCbcWithIntegrity$SecretKeys n(java.lang.String)>
		SHA-256: 93faf2c535d0552235434b2a081eb5eb4ca2c2b91dcb88dbed8b1015a2c9bd4e
		Secure: false
	Object:
		Variable: $r5
		Type: java.lang.String
		Statement: specialinvoke $r1.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r3, $r5)
		Method: <com.amazonaws.mobileconnectors.iot.AWSIotWebSocketUrlSigner: byte[] h(byte[],byte[],com.amazonaws.auth.SigningAlgorithm)>
		SHA-256: e95485876d78e764f1e79d9c04a4e33fdcfefa533c64348d58d7b51f31c6fa8f
		Secure: false
	Object:
		Variable: $r6
		Type: javax.crypto.SecretKeyFactory
		Statement: $r6 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>(varReplacer260078)
		Method: <com.meari.sdk.utils.DesUtils: java.lang.String encode(java.lang.String,java.lang.String,java.lang.String)>
		SHA-256: 3e3852a6a2dc01e4ff65e3d9cba610a28c5c2664d6b3cd5867826d414a06c3f0
		Secure: false
	Object:
		Variable: $r13
		Type: java.security.KeyPairGenerator
		Statement: $r13 = staticinvoke <java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(java.lang.String,java.lang.String)>(varReplacer259640, varReplacer259641)
		Method: <com.amazonaws.internal.keyvaluestore.KeyProvider18: java.security.Key a(java.lang.String)>
		SHA-256: 4052fcdb1bcfd1a41aa8d5cbad941f6ff3c0971815a7ebdeea90c7d110c1bba6
		Secure: false
	Object:
		Variable: $r14
		Type: java.security.KeyStore
		Statement: $r14 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>($r9)
		Method: <org.eclipse.paho.client.mqttv3.internal.security.SSLSocketFactoryFactory: javax.net.ssl.SSLContext m(java.lang.String)>
		SHA-256: 8ca32e7a619f6d439ce2104c6c119c9bcdc2bb140d11ce7542d46b85d53a5c01
		Secure: false
	Object:
		Variable: $r24
		Type: javax.net.ssl.TrustManagerFactory
		Statement: $r24 = staticinvoke <javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String,java.lang.String)>($r4, $r11)
		Method: <me.pushy.sdk.lib.paho.internal.security.SSLSocketFactoryFactory: javax.net.ssl.SSLContext getSSLContext(java.lang.String)>
		SHA-256: fd0c4a58400177d31bbe9ea62ad6d455eb87001952d7b82065a2d5b455cb75b7
		Secure: false
	Object:
		Variable: $r2
		Type: javax.crypto.spec.GCMParameterSpec
		Statement: specialinvoke $r2.<javax.crypto.spec.GCMParameterSpec: void <init>(int,byte[])>(varReplacer228571, $r1)
		Method: <com.amazonaws.internal.keyvaluestore.AWSKeyValueStore: java.security.spec.AlgorithmParameterSpec h(byte[])>
		SHA-256: 637acca769f3d87a377f6b0997d0a240a5b818fcea38a42556da2c874774957b
		Secure: false

Findings in Java Class: com.meari.sdk.utils.SdkUtils

	 in Method: javax.net.SocketFactory getIotFactory(android.content.Context)
		ConstraintError violating CrySL rule for javax.net.ssl.SSLContext (on Object #c45256b33873040a132695b86eb377f4d45ff48da4304737a1502555ff775c0)
			First parameter (with value "TLSv1") should be any of {TLSv1.2}
			at statement: $r4 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer101585)

		ConstraintError violating CrySL rule for java.security.KeyStore (on Object #3efe78b67d79d8ada1d69e05b208f9b724ad92adcd8c4b2a9857d992973a64d4)
			First parameter (with value "BKS") should be any of {JCEKS, JKS, DKS, PKCS11, PKCS12}
			at statement: $r10 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>(varReplacer101573)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			First parameter was not properly generated as generatedKeyManagers
			at statement: virtualinvoke $r4.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer101574, $r12, $r13)

		ForbiddenMethodError violating CrySL rule for javax.net.ssl.SSLContext
			Detected call to forbidden method javax.net.ssl.SSLContext getDefault() of class javax.net.ssl.SSLContext. Instead, call method <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String,java.security.Provider)>, <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>, <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String,java.lang.String)>.
			at statement: $r4 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getDefault()>()

		ConstraintError violating CrySL rule for javax.net.ssl.TrustManagerFactory (on Object #9959ca85952b18b725b22ba54081e7f07f7391fa52bdd54a2ac597dbfc97aba7)
			First parameter (with value "X509") should be any of {PKIX, SunX509}
			at statement: $r11 = staticinvoke <javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String)>(varReplacer101588)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.TrustManagerFactory
			First parameter was not properly generated as generatedKeyStore
			at statement: virtualinvoke $r11.<javax.net.ssl.TrustManagerFactory: void init(java.security.KeyStore)>($r10)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Second parameter was not properly generated as generatedTrustManagers
			at statement: virtualinvoke $r4.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer101574, $r12, $r13)


Findings in Java Class: me.pushy.sdk.util.PushyCertificateManager

	 in Method: javax.net.SocketFactory getEnterpriseSslSocketFactory(android.content.Context)
		ConstraintError violating CrySL rule for javax.net.ssl.SSLContext (on Object #47a6b727e6fb2d92866e89fab23ac42d5fa8b91c8c9f94bc5b6fa205b557437b)
			First parameter (with value "TLS") should be any of {TLSv1.2}
			at statement: $r11 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer54814)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Third parameter was not properly generated as randomized
			at statement: virtualinvoke $r11.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer54815, $r12, varReplacer54815)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			First parameter was not properly generated as generatedKeyManagers
			at statement: virtualinvoke $r11.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer54815, $r12, varReplacer54815)


Findings in Java Class: com.tozny.crypto.android.AesCbcWithIntegrity

	 in Method: byte[] m(byte[],javax.crypto.SecretKey)
		TypestateError violating CrySL rule for javax.crypto.Mac (on Object #ce05a69f4ef59aa8a40ac2fe2307d1b03c38c4473cb3306ab145d4b358c593a8)
			Unexpected call to method <javax.crypto.Mac: byte[] doFinal(byte[])> on object of type javax.crypto.Mac. Expect a call to one of the following methods javax.crypto.Mac: void update(byte[]),javax.crypto.Mac: void doFinal(byte[],int),javax.crypto.Mac: byte[] doFinal(),javax.crypto.Mac: void update(byte),javax.crypto.Mac: void update(byte[],int,int)
			at statement: $r1 = virtualinvoke $r2.<javax.crypto.Mac: byte[] doFinal(byte[])>($r1)


	 in Method: com.tozny.crypto.android.AesCbcWithIntegrity$SecretKeys l(java.lang.String,byte[],int)
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.PBEKeySpec
			Second parameter was not properly generated as randomized
			at statement: specialinvoke $r2.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r3, $r1, $i0, varReplacer289737)

		NeverTypeOfError violating CrySL rule for javax.crypto.spec.PBEKeySpec (on Object #75317024f3be7effdf5774b8d8f6378b060374da12b0f8e8fdb340b33f9cfc40)
			First parameter should never be of type java.lang.String.
			at statement: specialinvoke $r2.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r3, $r1, $i0, varReplacer289737)

		HardCodedError violating CrySL rule for javax.crypto.spec.PBEKeySpec (on Object #75317024f3be7effdf5774b8d8f6378b060374da12b0f8e8fdb340b33f9cfc40)
			First parameter should never be hardcoded.
			at statement: specialinvoke $r2.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r3, $r1, $i0, varReplacer289737)

		IncompleteOperationError violating CrySL rule for javax.crypto.spec.PBEKeySpec (on Object #75317024f3be7effdf5774b8d8f6378b060374da12b0f8e8fdb340b33f9cfc40)
			Operation on object of type javax.crypto.spec.PBEKeySpec object not completed. Expected call to clearPassword
			at statement: $r5 = virtualinvoke $r4.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>($r2)

		RequiredPredicateError violating CrySL rule for javax.crypto.SecretKeyFactory
			First parameter was not properly generated as speccedKey
			at statement: $r5 = virtualinvoke $r4.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>($r2)

		ConstraintError violating CrySL rule for javax.crypto.SecretKeyFactory (on Object #84f264fb14af19eddeb4446a73025c65fc0dd087d156a9e0ef11c2c67651c783)
			First parameter (with value "PBKDF2WithHmacSHA1") should be any of {PBKDF2WithHmacSHA512, PBKDF2WithHmacSHA384, PBKDF2WithHmacSHA256, PBKDF2WithHmacSHA224, PBEWithHmacSHA512AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA224AndAES_128, PBEWithHmacSHA256AndAES_128, PBEWithHmacSHA224AndAES_256, PBEWithHmacSHA256AndAES_256, PBEWithHmacSHA384AndAES_256, PBEWithHmacSHA512AndAES_256}
			at statement: $r4 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>(varReplacer289744)


	 in Method: byte[] c(com.tozny.crypto.android.AesCbcWithIntegrity$CipherTextIvMac,com.tozny.crypto.android.AesCbcWithIntegrity$SecretKeys)
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.IvParameterSpec
			First parameter was not properly generated as randomized
			at statement: specialinvoke $r6.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r2)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generatedKey
			at statement: virtualinvoke $r5.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer57584, $r4, $r6)


	 in Method: com.tozny.crypto.android.AesCbcWithIntegrity$CipherTextIvMac h(byte[],com.tozny.crypto.android.AesCbcWithIntegrity$SecretKeys)
		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generatedKey
			at statement: virtualinvoke $r4.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer57872, $r5, $r0)


	 in Method: com.tozny.crypto.android.AesCbcWithIntegrity$SecretKeys n(java.lang.String)
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as preparedKeyMaterial
			at statement: specialinvoke $r5.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],int,int,java.lang.String)>($r2, varReplacer289749, $i0, varReplacer289750)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as preparedKeyMaterial
			at statement: specialinvoke $r6.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r3, varReplacer289748)


	 in Method: com.tozny.crypto.android.AesCbcWithIntegrity$SecretKeys k()
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as preparedKeyMaterial
			at statement: specialinvoke $r0.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r3, varReplacer289754)


Findings in Java Class: com.rubetek.client.modules.rtsp.utils.NetUtils

	 in Method: javax.net.ssl.SSLSocket c(java.lang.String,int,int)
		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Second parameter was not properly generated as generatedTrustManagers
			at statement: virtualinvoke $r2.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer83321, $r9, varReplacer83321)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Third parameter was not properly generated as randomized
			at statement: virtualinvoke $r2.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer83321, $r9, varReplacer83321)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			First parameter was not properly generated as generatedKeyManagers
			at statement: virtualinvoke $r2.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer83321, $r9, varReplacer83321)

		ConstraintError violating CrySL rule for javax.net.ssl.SSLContext (on Object #a21cf3a0edbe1c0015b5d26ea2807ea26b8cbee7f3cb26b5f1b7a71e98fa2d64)
			First parameter (with value "TLS") should be any of {TLSv1.2}
			at statement: $r2 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer83323)


Findings in Java Class: com.google.android.gms.common.util.AndroidUtilsLight

	 in Method: java.security.MessageDigest zza(java.lang.String)
		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #c613dcbe025721f48d3fcab4e003017d7cb704971fc9d0296bae42be0b7eb30a)
			First parameter (with value "SHA1") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: $r0 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r2)

		IncompleteOperationError violating CrySL rule for java.security.MessageDigest (on Object #c613dcbe025721f48d3fcab4e003017d7cb704971fc9d0296bae42be0b7eb30a)
			Operation on object of type java.security.MessageDigest object not completed. Expected call to digest, update
			at statement: $r0 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r2)


	 in Method: byte[] getPackageCertificateHashBytes(android.content.Context,java.lang.String)
		IncompleteOperationError violating CrySL rule for java.security.MessageDigest (on Object #c613dcbe025721f48d3fcab4e003017d7cb704971fc9d0296bae42be0b7eb30a)
			Operation on object of type java.security.MessageDigest object not completed. Expected call to digest, update
			at statement: $r5 = staticinvoke <com.google.android.gms.common.util.AndroidUtilsLight: java.security.MessageDigest zza(java.lang.String)>(varReplacer280935)


Findings in Java Class: org.eclipse.paho.client.mqttv3.internal.SSLNetworkModule

	 in Method: void start()
		IncompleteOperationError violating CrySL rule for javax.net.ssl.SSLParameters (on Object #859fe0ec5a0ef670ee98b35ac915e8f21b89da12473bd5b28964a8131b54f41c)
			Operation on object of type javax.net.ssl.SSLParameters object not completed. Expected call to setProtocols, setCipherSuites
			at statement: virtualinvoke $r9.<javax.net.ssl.SSLSocket: void setSSLParameters(javax.net.ssl.SSLParameters)>($r6)

		IncompleteOperationError violating CrySL rule for javax.net.ssl.SSLParameters (on Object #859fe0ec5a0ef670ee98b35ac915e8f21b89da12473bd5b28964a8131b54f41c)
			Operation on object of type javax.net.ssl.SSLParameters object not completed. Expected call to setProtocols, setCipherSuites
			at statement: virtualinvoke $r9.<javax.net.ssl.SSLSocket: void setSSLParameters(javax.net.ssl.SSLParameters)>($r6)

		IncompleteOperationError violating CrySL rule for javax.net.ssl.SSLParameters (on Object #859fe0ec5a0ef670ee98b35ac915e8f21b89da12473bd5b28964a8131b54f41c)
			Operation on object of type javax.net.ssl.SSLParameters object not completed. Expected call to setProtocols, setCipherSuites
			at statement: virtualinvoke $r9.<javax.net.ssl.SSLSocket: void setSSLParameters(javax.net.ssl.SSLParameters)>($r6)

		IncompleteOperationError violating CrySL rule for javax.net.ssl.SSLParameters (on Object #859fe0ec5a0ef670ee98b35ac915e8f21b89da12473bd5b28964a8131b54f41c)
			Operation on object of type javax.net.ssl.SSLParameters object not completed. Expected call to setProtocols, setCipherSuites
			at statement: virtualinvoke $r9.<javax.net.ssl.SSLSocket: void setSSLParameters(javax.net.ssl.SSLParameters)>($r6)


Findings in Java Class: org.apache.http.conn.ssl.SSLSocketFactory

	 in Method: org.apache.http.conn.ssl.SSLSocketFactory getSocketFactory()
		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Second parameter was not properly generated as generatedTrustManagers
			at statement: virtualinvoke $r0.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer152339, varReplacer152339, varReplacer152339)

		ConstraintError violating CrySL rule for javax.net.ssl.SSLContext (on Object #471db62fe5ba9e0ce03bb2037340641de10cd305e48c3d80f3add4675a811722)
			First parameter (with value "TLS") should be any of {TLSv1.2}
			at statement: $r0 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer152338)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			First parameter was not properly generated as generatedKeyManagers
			at statement: virtualinvoke $r0.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer152339, varReplacer152339, varReplacer152339)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Third parameter was not properly generated as randomized
			at statement: virtualinvoke $r0.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer152339, varReplacer152339, varReplacer152339)


Findings in Java Class: com.rubetek.client.modules.rtsp.RtspClient$Companion

	 in Method: java.lang.String C(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #34d354376412fe19be33248c06c2e90073eaa3aa6d8f305ca48f9662931800c4)
			First parameter (with value "MD5") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: $r7 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer153812)


Findings in Java Class: com.google.android.gms.measurement.internal.zzlb

	 in Method: java.security.MessageDigest zzF()
		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #3106eb7aeb147948515971e4b37c428f279bccbcf8d54e0e66e442ce86cb4ade)
			First parameter (with value "MD5") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: $r0 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer166607)

		IncompleteOperationError violating CrySL rule for java.security.MessageDigest (on Object #3106eb7aeb147948515971e4b37c428f279bccbcf8d54e0e66e442ce86cb4ade)
			Operation on object of type java.security.MessageDigest object not completed. Expected call to digest, update
			at statement: $r0 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer166607)


Findings in Java Class: com.google.android.gms.measurement.internal.zzjo

	 in Method: java.lang.String zzf(java.lang.String,boolean)
		IncompleteOperationError violating CrySL rule for java.security.MessageDigest (on Object #3106eb7aeb147948515971e4b37c428f279bccbcf8d54e0e66e442ce86cb4ade)
			Operation on object of type java.security.MessageDigest object not completed. Expected call to digest, update
			at statement: $r7 = staticinvoke <com.google.android.gms.measurement.internal.zzlb: java.security.MessageDigest zzF()>()


Findings in Java Class: com.google.android.gms.measurement.internal.zzdy

	 in Method: com.google.android.gms.measurement.internal.zzq zzj(java.lang.String)
		IncompleteOperationError violating CrySL rule for java.security.MessageDigest (on Object #3106eb7aeb147948515971e4b37c428f279bccbcf8d54e0e66e442ce86cb4ade)
			Operation on object of type java.security.MessageDigest object not completed. Expected call to digest, update
			at statement: $r17 = staticinvoke <com.google.android.gms.measurement.internal.zzlb: java.security.MessageDigest zzF()>()

		IncompleteOperationError violating CrySL rule for java.security.MessageDigest (on Object #3106eb7aeb147948515971e4b37c428f279bccbcf8d54e0e66e442ce86cb4ade)
			Operation on object of type java.security.MessageDigest object not completed. Expected call to update, java.security.MessageDigest: byte[] digest(byte[])
			at statement: $r24 = virtualinvoke $r17.<java.security.MessageDigest: byte[] digest(byte[])>($r24)


Findings in Java Class: com.google.android.gms.measurement.internal.zzkv

	 in Method: long zzd(byte[])
		IncompleteOperationError violating CrySL rule for java.security.MessageDigest (on Object #3106eb7aeb147948515971e4b37c428f279bccbcf8d54e0e66e442ce86cb4ade)
			Operation on object of type java.security.MessageDigest object not completed. Expected call to digest, update
			at statement: $r4 = staticinvoke <com.google.android.gms.measurement.internal.zzlb: java.security.MessageDigest zzF()>()


Findings in Java Class: com.google.android.play.core.assetpacks.zzdq

	 in Method: java.lang.String zza(java.util.List)
		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #85001141a32ee7c471ce5ea5e6090acda6bf6785a4f9da5bc896bd18f8594e38)
			First parameter (with value "SHA256") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: $r3 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer166882)

		TypestateError violating CrySL rule for java.security.MessageDigest (on Object #85001141a32ee7c471ce5ea5e6090acda6bf6785a4f9da5bc896bd18f8594e38)
			Unexpected call to method <java.security.MessageDigest: byte[] digest()> on object of type java.security.MessageDigest. Expect a call to one of the following methods java.security.MessageDigest: void update(byte[],int,int),java.security.MessageDigest: void update(java.nio.ByteBuffer),java.security.MessageDigest: byte[] digest(byte[]),java.security.MessageDigest: void update(byte),java.security.MessageDigest: void update(byte[])
			at statement: $r4 = virtualinvoke $r3.<java.security.MessageDigest: byte[] digest()>()


Findings in Java Class: com.amazonaws.mobileconnectors.iot.AWSIotWebSocketUrlSigner

	 in Method: byte[] h(byte[],byte[],com.amazonaws.auth.SigningAlgorithm)
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as preparedKeyMaterial
			at statement: specialinvoke $r1.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r3, $r5)

		TypestateError violating CrySL rule for javax.crypto.Mac (on Object #3ff9c44f9b354d292b866bc6130a277526bd42cf791511ce8356caa046b763cc)
			Unexpected call to method <javax.crypto.Mac: byte[] doFinal(byte[])> on object of type javax.crypto.Mac. Expect a call to one of the following methods javax.crypto.Mac: void update(byte[]),javax.crypto.Mac: void doFinal(byte[],int),javax.crypto.Mac: byte[] doFinal(),javax.crypto.Mac: void update(byte),javax.crypto.Mac: void update(byte[],int,int)
			at statement: $r2 = virtualinvoke $r6.<javax.crypto.Mac: byte[] doFinal(byte[])>($r2)


Findings in Java Class: com.google.android.play.core.internal.zzi

	 in Method: byte[][] zzk(int[],com.google.android.play.core.internal.zzc[])
		IncompleteOperationError violating CrySL rule for java.security.MessageDigest (on Object #bb34e06cd50742b9bc175663cecb2f47b22f0f4e039d41f02bca062dc6f7a83)
			Operation on object of type java.security.MessageDigest object not completed. Expected call to digest, update
			at statement: $r5 = newarray (java.security.MessageDigest)[$i4]

		TypestateError violating CrySL rule for java.security.MessageDigest (on Object #bb34e06cd50742b9bc175663cecb2f47b22f0f4e039d41f02bca062dc6f7a83)
			Unexpected call to method <java.security.MessageDigest: int digest(byte[],int,int)> on object of type java.security.MessageDigest. Expect a call to one of the following methods java.security.MessageDigest: void update(byte[],int,int),java.security.MessageDigest: void update(java.nio.ByteBuffer),java.security.MessageDigest: byte[] digest(byte[]),java.security.MessageDigest: void update(byte),java.security.MessageDigest: void update(byte[])
			at statement: $i1 = virtualinvoke $r7.<java.security.MessageDigest: int digest(byte[],int,int)>($r10, $i1, $i11)

		IncompleteOperationError violating CrySL rule for java.security.MessageDigest (on Object #bb34e06cd50742b9bc175663cecb2f47b22f0f4e039d41f02bca062dc6f7a83)
			Operation on object of type java.security.MessageDigest object not completed. Expected call to digest, update
			at statement: $r7 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r6)

		IncompleteOperationError violating CrySL rule for java.security.MessageDigest (on Object #bb34e06cd50742b9bc175663cecb2f47b22f0f4e039d41f02bca062dc6f7a83)
			Operation on object of type java.security.MessageDigest object not completed. Expected call to java.security.MessageDigest: int digest(byte[],int,int), update, java.security.MessageDigest: byte[] digest(byte[]), java.security.MessageDigest: byte[] digest()
			at statement: $i1 = virtualinvoke $r7.<java.security.MessageDigest: int digest(byte[],int,int)>($r10, $i1, $i11)

		IncompleteOperationError violating CrySL rule for java.security.MessageDigest (on Object #bb34e06cd50742b9bc175663cecb2f47b22f0f4e039d41f02bca062dc6f7a83)
			Operation on object of type java.security.MessageDigest object not completed. Expected call to java.security.MessageDigest: int digest(byte[],int,int), update, java.security.MessageDigest: byte[] digest(byte[]), java.security.MessageDigest: byte[] digest()
			at statement: $r4 = virtualinvoke $r7.<java.security.MessageDigest: byte[] digest(byte[])>($r4)

		IncompleteOperationError violating CrySL rule for java.security.MessageDigest (on Object #bb34e06cd50742b9bc175663cecb2f47b22f0f4e039d41f02bca062dc6f7a83)
			Operation on object of type java.security.MessageDigest object not completed. Expected call to digest, update
			at statement: interfaceinvoke $r2.<com.google.android.play.core.internal.zzc: void zzb(java.security.MessageDigest[],long,int)>($r5, $l5, $i9)


	 in Method: java.security.cert.X509Certificate[] zzj(java.nio.ByteBuffer,java.util.Map,java.security.cert.CertificateFactory)
		RequiredPredicateError violating CrySL rule for java.security.Signature
			First parameter was not properly generated as generatedPubkey
			at statement: virtualinvoke $r24.<java.security.Signature: void initVerify(java.security.PublicKey)>($r23)

		RequiredPredicateError violating CrySL rule for java.security.KeyFactory
			First parameter was not properly generated as speccedKey
			at statement: $r23 = virtualinvoke $r21.<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>($r22)

		RequiredPredicateError violating CrySL rule for java.security.spec.X509EncodedKeySpec
			First parameter was not properly generated as preparedKeyMaterial
			at statement: specialinvoke $r22.<java.security.spec.X509EncodedKeySpec: void <init>(byte[])>($r5)


Findings in Java Class: com.rubetek.client.utils.AndroidUtils

	 in Method: java.lang.String Y(java.lang.String)
		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #1d31e05911072909cc91147235ed59e34bb40862367c9a8ffd578717914c7492)
			First parameter (with value "MD5") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: $r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer204968)


	 in Method: void <clinit>()
		RequiredPredicateError violating CrySL rule for java.security.SecureRandom
			First parameter was not properly generated as randomized
			at statement: virtualinvoke $r7.<java.security.SecureRandom: void setSeed(byte[])>($r10)


Findings in Java Class: com.google.android.exoplayer2.upstream.DataSchemeDataSource

	 in Method: long open(com.google.android.exoplayer2.upstream.DataSpec)
		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #3ba11e35386f6f90c206ad6406d15c16f9b73baef68bd9b75a23bfddf345e69d)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to init
			at statement: virtualinvoke r0.<com.google.android.exoplayer2.upstream.BaseDataSource: void transferInitializing(com.google.android.exoplayer2.upstream.DataSpec)>($r1)


Findings in Java Class: com.google.android.exoplayer2.upstream.FileDataSource

	 in Method: void close()
		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #3ba11e35386f6f90c206ad6406d15c16f9b73baef68bd9b75a23bfddf345e69d)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to init
			at statement: virtualinvoke r0.<com.google.android.exoplayer2.upstream.BaseDataSource: void transferEnded()>()


	 in Method: long open(com.google.android.exoplayer2.upstream.DataSpec)
		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #3ba11e35386f6f90c206ad6406d15c16f9b73baef68bd9b75a23bfddf345e69d)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to init
			at statement: virtualinvoke r0.<com.google.android.exoplayer2.upstream.BaseDataSource: void transferInitializing(com.google.android.exoplayer2.upstream.DataSpec)>($r1)


Findings in Java Class: com.google.android.exoplayer2.upstream.DefaultHttpDataSource

	 in Method: void skipInternal()
		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #3ba11e35386f6f90c206ad6406d15c16f9b73baef68bd9b75a23bfddf345e69d)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to init
			at statement: virtualinvoke r0.<com.google.android.exoplayer2.upstream.BaseDataSource: void bytesTransferred(int)>($i3)


	 in Method: void close()
		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #3ba11e35386f6f90c206ad6406d15c16f9b73baef68bd9b75a23bfddf345e69d)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to init
			at statement: specialinvoke r0.<com.google.android.exoplayer2.upstream.DefaultHttpDataSource: void closeConnectionQuietly()>()

		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #3ba11e35386f6f90c206ad6406d15c16f9b73baef68bd9b75a23bfddf345e69d)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to init
			at statement: virtualinvoke r0.<com.google.android.exoplayer2.upstream.BaseDataSource: void transferEnded()>()


	 in Method: long open(com.google.android.exoplayer2.upstream.DataSpec)
		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #3ba11e35386f6f90c206ad6406d15c16f9b73baef68bd9b75a23bfddf345e69d)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to init
			at statement: specialinvoke r0.<com.google.android.exoplayer2.upstream.DefaultHttpDataSource: void closeConnectionQuietly()>()

		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #3ba11e35386f6f90c206ad6406d15c16f9b73baef68bd9b75a23bfddf345e69d)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to init
			at statement: specialinvoke r0.<com.google.android.exoplayer2.upstream.DefaultHttpDataSource: void closeConnectionQuietly()>()

		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #3ba11e35386f6f90c206ad6406d15c16f9b73baef68bd9b75a23bfddf345e69d)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to init
			at statement: specialinvoke r0.<com.google.android.exoplayer2.upstream.DefaultHttpDataSource: void closeConnectionQuietly()>()

		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #3ba11e35386f6f90c206ad6406d15c16f9b73baef68bd9b75a23bfddf345e69d)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to init
			at statement: specialinvoke r0.<com.google.android.exoplayer2.upstream.DefaultHttpDataSource: void closeConnectionQuietly()>()


	 in Method: java.net.HttpURLConnection makeConnection(com.google.android.exoplayer2.upstream.DataSpec)
		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #3ba11e35386f6f90c206ad6406d15c16f9b73baef68bd9b75a23bfddf345e69d)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to init
			at statement: $r8 = specialinvoke r0.<com.google.android.exoplayer2.upstream.DefaultHttpDataSource: java.net.HttpURLConnection makeConnection(java.net.URL,int,byte[],long,long,boolean,boolean,java.util.Map)>($r3, $i2, $r6, $l3, $l4, $z0, varReplacer220163, $r7)


Findings in Java Class: com.google.android.exoplayer2.upstream.cache.CacheDataSource

	 in Method: int read(byte[],int,int)
		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #3ba11e35386f6f90c206ad6406d15c16f9b73baef68bd9b75a23bfddf345e69d)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to init
			at statement: specialinvoke r0.<com.google.android.exoplayer2.upstream.cache.CacheDataSource: void handleBeforeThrow(java.lang.Throwable)>($r3)

		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #3ba11e35386f6f90c206ad6406d15c16f9b73baef68bd9b75a23bfddf345e69d)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to init
			at statement: specialinvoke r0.<com.google.android.exoplayer2.upstream.cache.CacheDataSource: void handleBeforeThrow(java.lang.Throwable)>($r4)


	 in Method: void close()
		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #3ba11e35386f6f90c206ad6406d15c16f9b73baef68bd9b75a23bfddf345e69d)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to init
			at statement: specialinvoke r0.<com.google.android.exoplayer2.upstream.cache.CacheDataSource: void handleBeforeThrow(java.lang.Throwable)>($r1)


	 in Method: long open(com.google.android.exoplayer2.upstream.DataSpec)
		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #3ba11e35386f6f90c206ad6406d15c16f9b73baef68bd9b75a23bfddf345e69d)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to init
			at statement: specialinvoke r0.<com.google.android.exoplayer2.upstream.cache.CacheDataSource: void notifyCacheIgnored(int)>($i1)

		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #3ba11e35386f6f90c206ad6406d15c16f9b73baef68bd9b75a23bfddf345e69d)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to init
			at statement: specialinvoke r0.<com.google.android.exoplayer2.upstream.cache.CacheDataSource: void handleBeforeThrow(java.lang.Throwable)>($r10)

		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #3ba11e35386f6f90c206ad6406d15c16f9b73baef68bd9b75a23bfddf345e69d)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to init
			at statement: $i1 = specialinvoke r0.<com.google.android.exoplayer2.upstream.cache.CacheDataSource: int shouldIgnoreCacheForRequest(com.google.android.exoplayer2.upstream.DataSpec)>($r1)


Findings in Java Class: com.google.android.exoplayer2.upstream.DataSourceInputStream

	 in Method: void checkOpened()
		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #3ba11e35386f6f90c206ad6406d15c16f9b73baef68bd9b75a23bfddf345e69d)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to init
			at statement: interfaceinvoke $r2.<com.google.android.exoplayer2.upstream.DataSource: long open(com.google.android.exoplayer2.upstream.DataSpec)>($r1)


Findings in Java Class: com.google.android.exoplayer2.upstream.cache.CacheUtil

	 in Method: long readAndDiscard(com.google.android.exoplayer2.upstream.DataSpec,long,long,com.google.android.exoplayer2.upstream.DataSource,byte[],com.google.android.exoplayer2.util.PriorityTaskManager,int,com.google.android.exoplayer2.upstream.cache.CacheUtil$ProgressNotifier,boolean,java.util.concurrent.atomic.AtomicBoolean)
		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #3ba11e35386f6f90c206ad6406d15c16f9b73baef68bd9b75a23bfddf345e69d)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to init
			at statement: staticinvoke <com.google.android.exoplayer2.util.Util: void closeQuietly(com.google.android.exoplayer2.upstream.DataSource)>($r1)


	 in Method: void cache(com.google.android.exoplayer2.upstream.DataSpec,com.google.android.exoplayer2.upstream.cache.Cache,com.google.android.exoplayer2.upstream.cache.CacheKeyFactory,com.google.android.exoplayer2.upstream.cache.CacheDataSource,byte[],com.google.android.exoplayer2.util.PriorityTaskManager,int,com.google.android.exoplayer2.upstream.cache.CacheUtil$ProgressListener,java.util.concurrent.atomic.AtomicBoolean,boolean)
		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #3ba11e35386f6f90c206ad6406d15c16f9b73baef68bd9b75a23bfddf345e69d)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to init
			at statement: $l5 = staticinvoke <com.google.android.exoplayer2.upstream.cache.CacheUtil: long readAndDiscard(com.google.android.exoplayer2.upstream.DataSpec,long,long,com.google.android.exoplayer2.upstream.DataSource,byte[],com.google.android.exoplayer2.util.PriorityTaskManager,int,com.google.android.exoplayer2.upstream.cache.CacheUtil$ProgressNotifier,boolean,java.util.concurrent.atomic.AtomicBoolean)>($r0, $l2, $l5, $r3, $r4, $r5, $i0, $r8, $z2, $r7)


Findings in Java Class: com.google.android.exoplayer2.upstream.ContentDataSource

	 in Method: long open(com.google.android.exoplayer2.upstream.DataSpec)
		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #3ba11e35386f6f90c206ad6406d15c16f9b73baef68bd9b75a23bfddf345e69d)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to init
			at statement: virtualinvoke r0.<com.google.android.exoplayer2.upstream.BaseDataSource: void transferInitializing(com.google.android.exoplayer2.upstream.DataSpec)>($r1)


	 in Method: void close()
		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #3ba11e35386f6f90c206ad6406d15c16f9b73baef68bd9b75a23bfddf345e69d)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to init
			at statement: virtualinvoke r0.<com.google.android.exoplayer2.upstream.BaseDataSource: void transferEnded()>()

		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #3ba11e35386f6f90c206ad6406d15c16f9b73baef68bd9b75a23bfddf345e69d)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to init
			at statement: virtualinvoke r0.<com.google.android.exoplayer2.upstream.BaseDataSource: void transferEnded()>()

		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #3ba11e35386f6f90c206ad6406d15c16f9b73baef68bd9b75a23bfddf345e69d)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to init
			at statement: virtualinvoke r0.<com.google.android.exoplayer2.upstream.BaseDataSource: void transferEnded()>()


Findings in Java Class: com.google.android.exoplayer2.upstream.RawResourceDataSource

	 in Method: void close()
		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #3ba11e35386f6f90c206ad6406d15c16f9b73baef68bd9b75a23bfddf345e69d)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to init
			at statement: virtualinvoke r0.<com.google.android.exoplayer2.upstream.BaseDataSource: void transferEnded()>()

		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #3ba11e35386f6f90c206ad6406d15c16f9b73baef68bd9b75a23bfddf345e69d)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to init
			at statement: virtualinvoke r0.<com.google.android.exoplayer2.upstream.BaseDataSource: void transferEnded()>()

		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #3ba11e35386f6f90c206ad6406d15c16f9b73baef68bd9b75a23bfddf345e69d)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to init
			at statement: virtualinvoke r0.<com.google.android.exoplayer2.upstream.BaseDataSource: void transferEnded()>()


	 in Method: long open(com.google.android.exoplayer2.upstream.DataSpec)
		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #3ba11e35386f6f90c206ad6406d15c16f9b73baef68bd9b75a23bfddf345e69d)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to init
			at statement: virtualinvoke r0.<com.google.android.exoplayer2.upstream.BaseDataSource: void transferInitializing(com.google.android.exoplayer2.upstream.DataSpec)>($r2)


Findings in Java Class: com.google.android.exoplayer2.upstream.ByteArrayDataSource

	 in Method: long open(com.google.android.exoplayer2.upstream.DataSpec)
		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #3ba11e35386f6f90c206ad6406d15c16f9b73baef68bd9b75a23bfddf345e69d)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to init
			at statement: virtualinvoke r0.<com.google.android.exoplayer2.upstream.BaseDataSource: void transferInitializing(com.google.android.exoplayer2.upstream.DataSpec)>($r3)


Findings in Java Class: com.google.android.exoplayer2.offline.ProgressiveDownloader

	 in Method: void download(com.google.android.exoplayer2.offline.Downloader$ProgressListener)
		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #3ba11e35386f6f90c206ad6406d15c16f9b73baef68bd9b75a23bfddf345e69d)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to init
			at statement: staticinvoke <com.google.android.exoplayer2.upstream.cache.CacheUtil: void cache(com.google.android.exoplayer2.upstream.DataSpec,com.google.android.exoplayer2.upstream.cache.Cache,com.google.android.exoplayer2.upstream.cache.CacheKeyFactory,com.google.android.exoplayer2.upstream.cache.CacheDataSource,byte[],com.google.android.exoplayer2.util.PriorityTaskManager,int,com.google.android.exoplayer2.upstream.cache.CacheUtil$ProgressListener,java.util.concurrent.atomic.AtomicBoolean,boolean)>($r1, $r2, $r3, $r4, $r5, $r6, varReplacer83606, $r9, $r7, varReplacer83607)


Findings in Java Class: com.google.android.exoplayer2.upstream.AssetDataSource

	 in Method: long open(com.google.android.exoplayer2.upstream.DataSpec)
		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #3ba11e35386f6f90c206ad6406d15c16f9b73baef68bd9b75a23bfddf345e69d)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to init
			at statement: virtualinvoke r0.<com.google.android.exoplayer2.upstream.BaseDataSource: void transferInitializing(com.google.android.exoplayer2.upstream.DataSpec)>($r1)


	 in Method: void close()
		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #3ba11e35386f6f90c206ad6406d15c16f9b73baef68bd9b75a23bfddf345e69d)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to init
			at statement: virtualinvoke r0.<com.google.android.exoplayer2.upstream.BaseDataSource: void transferEnded()>()


Findings in Java Class: com.meari.sdk.utils.HmacshaUtil

	 in Method: byte[] HmacSHA1Encrypt(java.lang.String,java.lang.String)
		ConstraintError violating CrySL rule for javax.crypto.spec.SecretKeySpec (on Object #b9eb289899a9a1a2053150bf4cbbb9cf909c64f9a61f8c3c07902aaf94e9ec09)
			Second parameter (with value "HmacSHA1") should be any of {AES, HmacSHA224, HmacSHA256, HmacSHA384, HmacSHA512}
			at statement: specialinvoke $r0.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r3, varReplacer220908)

		TypestateError violating CrySL rule for javax.crypto.Mac (on Object #e11b9df300a0c3fc953f7a02fd29d29818e8fb3515ead95ce779fb220d98e1b5)
			Unexpected call to method <javax.crypto.Mac: byte[] doFinal(byte[])> on object of type javax.crypto.Mac. Expect a call to one of the following methods javax.crypto.Mac: void update(byte[]),javax.crypto.Mac: void doFinal(byte[],int),javax.crypto.Mac: byte[] doFinal(),javax.crypto.Mac: void update(byte),javax.crypto.Mac: void update(byte[],int,int)
			at statement: $r3 = virtualinvoke $r4.<javax.crypto.Mac: byte[] doFinal(byte[])>($r3)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as preparedKeyMaterial
			at statement: specialinvoke $r0.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r3, varReplacer220908)


Findings in Java Class: com.p2p.core.utils.DES

	 in Method: byte[] desDecrypt(byte[],byte[])
		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #54e8b6f51190ae08b4d41c9deea8c601f408f683f996bbf41c92d9ad912476a6)
			First parameter (with value "DES/ECB/NoPadding") should be any of {AES, PBEWithHmacSHA224AndAES_128, PBEWithHmacSHA256AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA512AndAES_128, PBEWithHmacSHA224AndAES_256, PBEWithHmacSHA256AndAES_256, PBEWithHmacSHA384AndAES_256, PBEWithHmacSHA512AndAES_256}
			at statement: $r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer221419)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generatedKey
			at statement: virtualinvoke $r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer221418, $r0)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as preparedKeyMaterial
			at statement: specialinvoke $r0.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r2, varReplacer221417)

		ConstraintError violating CrySL rule for javax.crypto.spec.SecretKeySpec (on Object #f055ec098be531b38dce2aad4470207fc135d6d55690369d78add4230ca0158c)
			Second parameter (with value "DES") should be any of {AES, HmacSHA224, HmacSHA256, HmacSHA384, HmacSHA512}
			at statement: specialinvoke $r0.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r2, varReplacer221417)


	 in Method: byte[] desEncrypt(byte[],byte[])
		ConstraintError violating CrySL rule for javax.crypto.spec.SecretKeySpec (on Object #660aac468d9f3d829dac92d25e608f6a749c6eb74f2742de2ea9ca2527b00567)
			Second parameter (with value "DES") should be any of {AES, HmacSHA224, HmacSHA256, HmacSHA384, HmacSHA512}
			at statement: specialinvoke $r0.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r2, varReplacer221421)

		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #ec304ce1bb51bb076e5c35bc395f6a78dd44e527748b467babe9307b4a4261d9)
			First parameter (with value "DES/ECB/NoPadding") should be any of {AES, PBEWithHmacSHA224AndAES_128, PBEWithHmacSHA256AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA512AndAES_128, PBEWithHmacSHA224AndAES_256, PBEWithHmacSHA256AndAES_256, PBEWithHmacSHA384AndAES_256, PBEWithHmacSHA512AndAES_256}
			at statement: $r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer221420)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as preparedKeyMaterial
			at statement: specialinvoke $r0.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r2, varReplacer221421)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generatedKey
			at statement: virtualinvoke $r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer221422, $r0)


Findings in Java Class: com.amazonaws.mobileconnectors.iot.AWSIotKeystoreHelper

	 in Method: java.security.KeyStore a(java.lang.String,java.lang.String,java.lang.String,java.lang.String)
		NeverTypeOfError violating CrySL rule for java.security.KeyStore (on Object #362cfa33f2a38260f0e5e447632b46a9d2d2dbebefd32e39c98f87d47e7ba6b9)
			Second parameter should never be of type java.lang.String.
			at statement: virtualinvoke $r5.<java.security.KeyStore: void load(java.io.InputStream,char[])>($r6, $r7)

		HardCodedError violating CrySL rule for java.security.KeyStore (on Object #362cfa33f2a38260f0e5e447632b46a9d2d2dbebefd32e39c98f87d47e7ba6b9)
			Second parameter should never be hardcoded.
			at statement: virtualinvoke $r5.<java.security.KeyStore: void load(java.io.InputStream,char[])>($r6, $r7)


	 in Method: java.lang.Boolean d(java.lang.String,java.lang.String,java.lang.String,java.lang.String)
		NeverTypeOfError violating CrySL rule for java.security.KeyStore (on Object #e7b6a9dd46ff8aad21dbb6ad4486b53b286c6478b3d58fcda0e8870c0327213b)
			Second parameter should never be of type java.lang.String.
			at statement: virtualinvoke $r8.<java.security.KeyStore: void load(java.io.InputStream,char[])>($r2, $r9)

		HardCodedError violating CrySL rule for java.security.KeyStore (on Object #e7b6a9dd46ff8aad21dbb6ad4486b53b286c6478b3d58fcda0e8870c0327213b)
			Second parameter should never be hardcoded.
			at statement: virtualinvoke $r8.<java.security.KeyStore: void load(java.io.InputStream,char[])>($r2, $r9)


Findings in Java Class: com.google.firebase.crashlytics.internal.common.CommonUtils

	 in Method: java.lang.String hash(byte[],java.lang.String)
		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #7fb5e1ca4e0ccb41306f524bfa8fe0a452898cd3171e10ddd8d49eb5eb47dc5a)
			First parameter (with value "SHA-1") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: $r3 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r2)


Findings in Java Class: com.amazonaws.mobileconnectors.iot.AWSIotSslUtility

	 in Method: javax.net.ssl.SSLSocketFactory a(java.security.KeyStore,int)
		RequiredPredicateError violating CrySL rule for javax.net.ssl.KeyManagerFactory
			First parameter was not properly generated as generatedKeyStore
			at statement: virtualinvoke $r4.<javax.net.ssl.KeyManagerFactory: void init(java.security.KeyStore,char[])>($r0, $r5)

		NeverTypeOfError violating CrySL rule for javax.net.ssl.KeyManagerFactory (on Object #8084959884f18bbea1c3b7c70fac3c3d5a70509c03194e06655215956fb5cf79)
			Second parameter should never be of type java.lang.String.
			at statement: virtualinvoke $r4.<javax.net.ssl.KeyManagerFactory: void init(java.security.KeyStore,char[])>($r0, $r5)

		HardCodedError violating CrySL rule for javax.net.ssl.KeyManagerFactory (on Object #8084959884f18bbea1c3b7c70fac3c3d5a70509c03194e06655215956fb5cf79)
			Second parameter should never be hardcoded.
			at statement: virtualinvoke $r4.<javax.net.ssl.KeyManagerFactory: void init(java.security.KeyStore,char[])>($r0, $r5)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			First parameter was not properly generated as generatedKeyManagers
			at statement: virtualinvoke $r2.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>($r6, varReplacer228919, $r7)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Second parameter was not properly generated as generatedTrustManagers
			at statement: virtualinvoke $r2.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>($r6, varReplacer228919, $r7)


Findings in Java Class: com.amazonaws.mobileconnectors.cognitoidentityprovider.util.Hkdf

	 in Method: void g(byte[],byte[])
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as preparedKeyMaterial
			at statement: specialinvoke $r7.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r2, $r1)

		TypestateError violating CrySL rule for javax.crypto.Mac (on Object #cb454cbafbf9257741f800ae3a5100e0ca39f1ccca9b6e0848fb93cca38cd9ae)
			Unexpected call to method <javax.crypto.Mac: byte[] doFinal(byte[])> on object of type javax.crypto.Mac. Expect a call to one of the following methods javax.crypto.Mac: void update(byte[]),javax.crypto.Mac: void doFinal(byte[],int),javax.crypto.Mac: byte[] doFinal(),javax.crypto.Mac: void update(byte),javax.crypto.Mac: void update(byte[],int,int)
			at statement: $r2 = virtualinvoke $r6.<javax.crypto.Mac: byte[] doFinal(byte[])>($r2)


	 in Method: void c(byte[],int,byte[],int)
		IncompleteOperationError violating CrySL rule for javax.crypto.Mac (on Object #d73d44c74b32ca5b9f53e397c8063d4dfac03a61743add04954ab8721e403502)
			Operation on object of type javax.crypto.Mac object not completed. Expected call to javax.crypto.Mac: void doFinal(byte[],int), update, javax.crypto.Mac: byte[] doFinal()
			at statement: $r5 = virtualinvoke $r3.<javax.crypto.Mac: byte[] doFinal()>()

		IncompleteOperationError violating CrySL rule for javax.crypto.Mac (on Object #d73d44c74b32ca5b9f53e397c8063d4dfac03a61743add04954ab8721e403502)
			Operation on object of type javax.crypto.Mac object not completed. Expected call to update, doFinal
			at statement: $i1 = virtualinvoke $r3.<javax.crypto.Mac: int getMacLength()>()

		TypestateError violating CrySL rule for javax.crypto.Mac (on Object #d73d44c74b32ca5b9f53e397c8063d4dfac03a61743add04954ab8721e403502)
			Unexpected call to method update on object of type javax.crypto.Mac.
			at statement: virtualinvoke $r3.<javax.crypto.Mac: void update(byte[])>($r4)


	 in Method: javax.crypto.Mac b()
		RequiredPredicateError violating CrySL rule for javax.crypto.Mac
			First parameter was not properly generated as generatedKey
			at statement: virtualinvoke $r1.<javax.crypto.Mac: void init(java.security.Key)>($r3)


Findings in Java Class: com.google.android.exoplayer2.upstream.cache.CachedContentIndex$LegacyStorage

	 in Method: boolean readFile(java.util.HashMap,android.util.SparseArray)
		IncompleteOperationError violating CrySL rule for javax.crypto.CipherInputStream (on Object #6b30d6219e1be8a5e0a9a049ef7eb5d6780a49f6a7b22f8ed8fe44856ade655b)
			Operation on object of type javax.crypto.CipherInputStream object not completed. Expected call to read
			at statement: specialinvoke $r10.<java.io.DataInputStream: void <init>(java.io.InputStream)>($r18)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.IvParameterSpec
			First parameter was not properly generated as randomized
			at statement: specialinvoke $r16.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r15)


	 in Method: void writeFile(java.util.HashMap)
		IncompleteOperationError violating CrySL rule for javax.crypto.CipherOutputStream (on Object #d25fda46376f2e332f56ea026ae45706bde4c3a80699c95ac5175b26870d5614)
			Operation on object of type javax.crypto.CipherOutputStream object not completed. Expected call to write
			at statement: specialinvoke $r2.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r12)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.IvParameterSpec
			First parameter was not properly generated as randomized
			at statement: specialinvoke $r9.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r7)


Findings in Java Class: com.amazonaws.internal.keyvaluestore.KeyProvider23

	 in Method: java.security.Key b(java.lang.String)
		ConstraintError violating CrySL rule for java.security.KeyStore (on Object #14b30f82a69229dd24cabc23ab356dfd94f61c83d2b78e0ecac3d02731e22203)
			First parameter (with value "AndroidKeyStore") should be any of {JCEKS, JKS, DKS, PKCS11, PKCS12}
			at statement: $r2 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>(varReplacer258248)


	 in Method: void c(java.lang.String)
		ConstraintError violating CrySL rule for java.security.KeyStore (on Object #8ccf38d3a30e7c4060f8122bf030a0fd1ac0a10e8b9bc542f14cec394d7aa7bb)
			First parameter (with value "AndroidKeyStore") should be any of {JCEKS, JKS, DKS, PKCS11, PKCS12}
			at statement: $r3 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>(varReplacer258280)


	 in Method: java.security.Key a(java.lang.String)
		ConstraintError violating CrySL rule for java.security.KeyStore (on Object #ac7e68a543fa596639cad0f36d9253df2bf915709ce3d8388ef7c736757b220)
			First parameter (with value "AndroidKeyStore") should be any of {JCEKS, JKS, DKS, PKCS11, PKCS12}
			at statement: $r2 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>(varReplacer259614)


Findings in Java Class: com.amazonaws.internal.keyvaluestore.KeyProvider18

	 in Method: java.security.Key b(java.lang.String)
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as preparedKeyMaterial
			at statement: specialinvoke $r7.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r6, varReplacer258271)

		ConstraintError violating CrySL rule for java.security.KeyStore (on Object #77c678dbbcd69475fda2bc1a1687f1c098296a283ef59b253becf92691f49185)
			First parameter (with value "AndroidKeyStore") should be any of {JCEKS, JKS, DKS, PKCS11, PKCS12}
			at statement: $r2 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>(varReplacer258277)


	 in Method: void c(java.lang.String)
		ConstraintError violating CrySL rule for java.security.KeyStore (on Object #f4495bb082b5092fbbfe3ba1815ce929e1bb7ae5e79853a5a6118bc835ea50de)
			First parameter (with value "AndroidKeyStore") should be any of {JCEKS, JKS, DKS, PKCS11, PKCS12}
			at statement: $r7 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>(varReplacer258291)


	 in Method: java.security.Key a(java.lang.String)
		RequiredPredicateError violating CrySL rule for javax.crypto.KeyGenerator
			Second parameter was not properly generated as randomized
			at statement: virtualinvoke $r15.<javax.crypto.KeyGenerator: void init(int,java.security.SecureRandom)>(varReplacer259631, $r14)

		RequiredPredicateError violating CrySL rule for java.security.KeyPairGenerator
			First parameter was not properly generated as preparedRSA
			at statement: virtualinvoke $r13.<java.security.KeyPairGenerator: void initialize(java.security.spec.AlgorithmParameterSpec)>($r12)

		ConstraintError violating CrySL rule for java.security.KeyStore (on Object #96963eb03d192add1d421016a09506e9a0624391b999df5f25af995ae03200be)
			First parameter (with value "AndroidKeyStore") should be any of {JCEKS, JKS, DKS, PKCS11, PKCS12}
			at statement: $r2 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>(varReplacer259634)

		IncompleteOperationError violating CrySL rule for java.security.KeyPairGenerator (on Object #4052fcdb1bcfd1a41aa8d5cbad941f6ff3c0971815a7ebdeea90c7d110c1bba6)
			Operation on object of type java.security.KeyPairGenerator object not completed. Expected call to java.security.KeyPairGenerator: java.security.KeyPair generateKeyPair(), genKeyPair, java.security.KeyPairGeneratorSpi: java.security.KeyPair generateKeyPair()
			at statement: virtualinvoke $r13.<java.security.KeyPairGenerator: java.security.KeyPair generateKeyPair()>()


	 in Method: byte[] d(java.lang.String,byte[])
		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generatedKey
			at statement: virtualinvoke $r6.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer279590, $r7)

		IncompleteOperationError violating CrySL rule for java.security.KeyStore (on Object #75b16be623b7498bd5f539ddd65896b5ddcacaca3ab96d518f4d6f760daa7a65)
			Operation on object of type java.security.KeyStore object not completed. Expected call to getKey
			at statement: $r4 = virtualinvoke $r3.<java.security.KeyStore: java.security.KeyStore$Entry getEntry(java.lang.String,java.security.KeyStore$ProtectionParameter)>($r1, varReplacer279595)

		ConstraintError violating CrySL rule for java.security.KeyStore (on Object #75b16be623b7498bd5f539ddd65896b5ddcacaca3ab96d518f4d6f760daa7a65)
			First parameter (with value "AndroidKeyStore") should be any of {JCEKS, JKS, DKS, PKCS11, PKCS12}
			at statement: $r3 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>(varReplacer279593)


	 in Method: byte[] e(java.lang.String,byte[])
		ConstraintError violating CrySL rule for java.security.KeyStore (on Object #72137a3702c5fb74d47d0b3c198a00080e3c7ec3179d5306cf2e502f6d4698a0)
			First parameter (with value "AndroidKeyStore") should be any of {JCEKS, JKS, DKS, PKCS11, PKCS12}
			at statement: $r3 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>(varReplacer281112)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generatedKey
			at statement: virtualinvoke $r6.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer281118, $r8)

		IncompleteOperationError violating CrySL rule for java.security.KeyStore (on Object #72137a3702c5fb74d47d0b3c198a00080e3c7ec3179d5306cf2e502f6d4698a0)
			Operation on object of type java.security.KeyStore object not completed. Expected call to getKey
			at statement: $r4 = virtualinvoke $r3.<java.security.KeyStore: java.security.KeyStore$Entry getEntry(java.lang.String,java.security.KeyStore$ProtectionParameter)>($r1, varReplacer281113)


Findings in Java Class: com.amazonaws.internal.keyvaluestore.KeyProvider10

	 in Method: java.security.Key a(java.lang.String)
		TypestateError violating CrySL rule for javax.crypto.KeyGenerator (on Object #fb9421df2c2e5c0235597e0ac7380d01b66a7726d89626af30167565c4bcf683)
			Unexpected call to method generateKey on object of type javax.crypto.KeyGenerator.
			at statement: $r5 = virtualinvoke $r3.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()


	 in Method: java.security.Key b(java.lang.String)
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as preparedKeyMaterial
			at statement: specialinvoke $r6.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r5, varReplacer258262)


Findings in Java Class: com.meari.sdk.utils.DesUtils

	 in Method: java.lang.String encode(java.lang.String,java.lang.String,java.lang.String)
		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #72a37583784b5a36e487c7e3683381aa031b5c32f14e0ec3b3b7cd687bd9416f)
			First parameter (with value "desede/CBC/PKCS5Padding") should be any of {AES, PBEWithHmacSHA224AndAES_128, PBEWithHmacSHA256AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA512AndAES_128, PBEWithHmacSHA224AndAES_256, PBEWithHmacSHA256AndAES_256, PBEWithHmacSHA384AndAES_256, PBEWithHmacSHA512AndAES_256}
			at statement: $r8 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer260079)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.IvParameterSpec
			First parameter was not properly generated as randomized
			at statement: specialinvoke $r1.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r5)

		ConstraintError violating CrySL rule for javax.crypto.SecretKeyFactory (on Object #3e3852a6a2dc01e4ff65e3d9cba610a28c5c2664d6b3cd5867826d414a06c3f0)
			First parameter (with value "desede") should be any of {PBKDF2WithHmacSHA512, PBKDF2WithHmacSHA384, PBKDF2WithHmacSHA256, PBKDF2WithHmacSHA224, PBEWithHmacSHA512AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA224AndAES_128, PBEWithHmacSHA256AndAES_128, PBEWithHmacSHA224AndAES_256, PBEWithHmacSHA256AndAES_256, PBEWithHmacSHA384AndAES_256, PBEWithHmacSHA512AndAES_256}
			at statement: $r6 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>(varReplacer260078)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generatedKey
			at statement: virtualinvoke $r8.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer260081, $r7, $r1)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Third parameter was not properly generated as preparedIV [ with CBC, It's required to use IVParameterSpec]
			at statement: virtualinvoke $r8.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer260081, $r7, $r1)

		RequiredPredicateError violating CrySL rule for javax.crypto.SecretKeyFactory
			First parameter was not properly generated as speccedKey
			at statement: $r7 = virtualinvoke $r6.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>($r4)


Findings in Java Class: okio.ByteString

	 in Method: okio.ByteString i(java.lang.String)
		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #2a11d9726d42a9eb52012908918cad1dc870d8e56cb5a01ede4d65515f31293d)
			First parameter (with value "SHA-1") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: $r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r1)


Findings in Java Class: okio.SegmentedByteString

	 in Method: okio.ByteString i(java.lang.String)
		TypestateError violating CrySL rule for java.security.MessageDigest (on Object #7bc46a73aeafc018467f7f68aa9a50c42f02576a20abd0da670b2a78d8ea25a7)
			Unexpected call to method <java.security.MessageDigest: byte[] digest()> on object of type java.security.MessageDigest. Expect a call to one of the following methods java.security.MessageDigest: void update(byte[],int,int),java.security.MessageDigest: void update(java.nio.ByteBuffer),java.security.MessageDigest: byte[] digest(byte[]),java.security.MessageDigest: void update(byte),java.security.MessageDigest: void update(byte[])
			at statement: $r5 = virtualinvoke $r2.<java.security.MessageDigest: byte[] digest()>()

		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #7bc46a73aeafc018467f7f68aa9a50c42f02576a20abd0da670b2a78d8ea25a7)
			First parameter (with value "SHA-1") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: $r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r1)


Findings in Java Class: com.google.common.hash.AbstractHashFunction

	 in Method: com.google.common.hash.HashCode hashObject(java.lang.Object,com.google.common.hash.Funnel)
		IncompleteOperationError violating CrySL rule for javax.crypto.Mac (on Object #6dfe92fb5526abc60bb706d9a02bc7267374c73eb4cfabeec75ce74a35a0603d)
			Operation on object of type javax.crypto.Mac object not completed. Expected call to update, doFinal
			at statement: $r4 = interfaceinvoke $r3.<com.google.common.hash.Hasher: com.google.common.hash.HashCode hash()>()

		IncompleteOperationError violating CrySL rule for java.security.MessageDigest (on Object #f4e887286d0504cb5722b1da9a4eac06d6ea434977af7216dbf1f6217c285838)
			Operation on object of type java.security.MessageDigest object not completed. Expected call to digest, update
			at statement: $r4 = interfaceinvoke $r3.<com.google.common.hash.Hasher: com.google.common.hash.HashCode hash()>()


Findings in Java Class: com.google.common.hash.AbstractCompositeHashFunction

	 in Method: com.google.common.hash.Hasher newHasher()
		IncompleteOperationError violating CrySL rule for javax.crypto.Mac (on Object #6dfe92fb5526abc60bb706d9a02bc7267374c73eb4cfabeec75ce74a35a0603d)
			Operation on object of type javax.crypto.Mac object not completed. Expected call to update, doFinal
			at statement: $r4 = specialinvoke r0.<com.google.common.hash.AbstractCompositeHashFunction: com.google.common.hash.Hasher fromHashers(com.google.common.hash.Hasher[])>($r1)

		IncompleteOperationError violating CrySL rule for java.security.MessageDigest (on Object #f4e887286d0504cb5722b1da9a4eac06d6ea434977af7216dbf1f6217c285838)
			Operation on object of type java.security.MessageDigest object not completed. Expected call to digest, update
			at statement: $r4 = specialinvoke r0.<com.google.common.hash.AbstractCompositeHashFunction: com.google.common.hash.Hasher fromHashers(com.google.common.hash.Hasher[])>($r1)


Findings in Java Class: com.google.common.hash.MessageDigestHashFunction$MessageDigestHasher

	 in Method: com.google.common.hash.HashCode hash()
		TypestateError violating CrySL rule for java.security.MessageDigest (on Object #f4e887286d0504cb5722b1da9a4eac06d6ea434977af7216dbf1f6217c285838)
			Unexpected call to method <java.security.MessageDigest: byte[] digest()> on object of type java.security.MessageDigest. Expect a call to one of the following methods java.security.MessageDigest: void update(byte[],int,int),java.security.MessageDigest: void update(java.nio.ByteBuffer),java.security.MessageDigest: byte[] digest(byte[]),java.security.MessageDigest: void update(byte),java.security.MessageDigest: void update(byte[])
			at statement: $r2 = virtualinvoke $r1.<java.security.MessageDigest: byte[] digest()>()

		TypestateError violating CrySL rule for java.security.MessageDigest (on Object #f4e887286d0504cb5722b1da9a4eac06d6ea434977af7216dbf1f6217c285838)
			Unexpected call to method <java.security.MessageDigest: byte[] digest()> on object of type java.security.MessageDigest. Expect a call to one of the following methods java.security.MessageDigest: void update(byte[],int,int),java.security.MessageDigest: void update(java.nio.ByteBuffer),java.security.MessageDigest: byte[] digest(byte[]),java.security.MessageDigest: void update(byte),java.security.MessageDigest: void update(byte[])
			at statement: $r2 = virtualinvoke $r1.<java.security.MessageDigest: byte[] digest()>()


Findings in Java Class: okhttp3.internal.platform.OpenJSSEPlatform

	 in Method: javax.net.ssl.SSLContext newSSLContext()
		ConstraintError violating CrySL rule for javax.net.ssl.SSLContext (on Object #17f902d2307e71553f9f985d2b641921879fc7f719619ae0f84f38fa7d50c093)
			First parameter (with value "TLSv1.3") should be any of {TLSv1.2}
			at statement: $r1 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String,java.security.Provider)>(varReplacer277802, $r2)


	 in Method: javax.net.ssl.X509TrustManager platformTrustManager()
		RequiredPredicateError violating CrySL rule for javax.net.ssl.TrustManagerFactory
			First parameter was not properly generated as generatedKeyStore
			at statement: virtualinvoke $r3.<javax.net.ssl.TrustManagerFactory: void init(java.security.KeyStore)>(varReplacer255362)


Findings in Java Class: okhttp3.internal.platform.Platform

	 in Method: javax.net.ssl.SSLContext newSSLContext()
		ConstraintError violating CrySL rule for javax.net.ssl.SSLContext (on Object #6b25cc59ecf585a068956208dc8b467805cdff30941c522ec19ee894ca623669)
			First parameter (with value "TLS") should be any of {TLSv1.2}
			at statement: $r1 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer277804)


	 in Method: javax.net.ssl.SSLSocketFactory newSslSocketFactory(javax.net.ssl.X509TrustManager)
		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Second parameter was not properly generated as generatedTrustManagers
			at statement: virtualinvoke $r2.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer255382, $r8, varReplacer255382)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			First parameter was not properly generated as generatedKeyManagers
			at statement: virtualinvoke $r2.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer255382, $r8, varReplacer255382)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Third parameter was not properly generated as randomized
			at statement: virtualinvoke $r2.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer255382, $r8, varReplacer255382)


	 in Method: javax.net.ssl.X509TrustManager platformTrustManager()
		RequiredPredicateError violating CrySL rule for javax.net.ssl.TrustManagerFactory
			First parameter was not properly generated as generatedKeyStore
			at statement: virtualinvoke $r2.<javax.net.ssl.TrustManagerFactory: void init(java.security.KeyStore)>(varReplacer255368)


Findings in Java Class: okhttp3.internal.platform.ConscryptPlatform

	 in Method: javax.net.ssl.SSLContext newSSLContext()
		ConstraintError violating CrySL rule for javax.net.ssl.SSLContext (on Object #90c255f92a5e0f7bc1d2fed7e2c9c62d8c674c81ba00b780e78640fd5257f4eb)
			First parameter (with value "TLS") should be any of {TLSv1.2}
			at statement: $r1 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String,java.security.Provider)>(varReplacer277806, $r2)


	 in Method: javax.net.ssl.SSLSocketFactory newSslSocketFactory(javax.net.ssl.X509TrustManager)
		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			First parameter was not properly generated as generatedKeyManagers
			at statement: virtualinvoke $r2.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer255386, $r5, varReplacer255386)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Third parameter was not properly generated as randomized
			at statement: virtualinvoke $r2.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer255386, $r5, varReplacer255386)


	 in Method: javax.net.ssl.X509TrustManager platformTrustManager()
		RequiredPredicateError violating CrySL rule for javax.net.ssl.TrustManagerFactory
			First parameter was not properly generated as generatedKeyStore
			at statement: virtualinvoke $r2.<javax.net.ssl.TrustManagerFactory: void init(java.security.KeyStore)>(varReplacer255372)


Findings in Java Class: okhttp3.internal.platform.BouncyCastlePlatform

	 in Method: javax.net.ssl.SSLContext newSSLContext()
		ConstraintError violating CrySL rule for javax.net.ssl.SSLContext (on Object #ff20d20d7bbec3b799152c062f803ee398ce95cc64522e7644f7fd9782dfabb5)
			First parameter (with value "TLS") should be any of {TLSv1.2}
			at statement: $r1 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String,java.security.Provider)>(varReplacer277808, $r2)


	 in Method: javax.net.ssl.X509TrustManager platformTrustManager()
		RequiredPredicateError violating CrySL rule for javax.net.ssl.TrustManagerFactory
			First parameter was not properly generated as generatedKeyStore
			at statement: virtualinvoke $r1.<javax.net.ssl.TrustManagerFactory: void init(java.security.KeyStore)>(varReplacer255379)


Findings in Java Class: org.eclipse.paho.client.mqttv3.internal.websocket.WebSocketHandshake

	 in Method: byte[] e(java.lang.String)
		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #fe5165f074bd51f9fc9140519945d755db0688b091c0e896f458d661dbe73727)
			First parameter (with value "SHA1") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: $r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer285397)


Findings in Java Class: me.pushy.sdk.lib.paho.internal.websocket.WebSocketHandshake

	 in Method: byte[] sha1(java.lang.String)
		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #53738009d6d33fa1a3a423af37075a7967c008166cb25ac1995a6b7a0f4e4040)
			First parameter (with value "SHA1") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: $r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer285404)


Findings in Java Class: com.google.firebase.messaging.GmsRpc

	 in Method: java.lang.String getHashedFirebaseAppName()
		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #16005a46da662b491802509f0aab71a1952b00e5be877292381a27a47a3e4a52)
			First parameter (with value "SHA-1") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: $r4 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer287756)


Findings in Java Class: com.meari.sdk.mqtt.f

	 in Method: void c()
		ConstraintError violating CrySL rule for javax.net.ssl.TrustManagerFactory (on Object #710a35ba56a56fa3fec4c333abf642570929d524acf0adacbdcf9c2fc76f7a0b)
			First parameter (with value "X509") should be any of {PKIX, SunX509}
			at statement: $r16 = staticinvoke <javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String)>(varReplacer287796)

		NeverTypeOfError violating CrySL rule for java.security.KeyStore (on Object #f4a17902cccd62d6bf77ff929ceae4e1e6f0be612261587224f32d6025d91f24)
			Second parameter should never be of type java.lang.String.
			at statement: virtualinvoke $r10.<java.security.KeyStore: void load(java.io.InputStream,char[])>($r12, $r8)

		HardCodedError violating CrySL rule for java.security.KeyStore (on Object #f4a17902cccd62d6bf77ff929ceae4e1e6f0be612261587224f32d6025d91f24)
			Second parameter should never be hardcoded.
			at statement: virtualinvoke $r10.<java.security.KeyStore: void load(java.io.InputStream,char[])>($r12, $r8)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.TrustManagerFactory
			First parameter was not properly generated as generatedKeyStore
			at statement: virtualinvoke $r16.<javax.net.ssl.TrustManagerFactory: void init(java.security.KeyStore)>($r10)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			First parameter was not properly generated as generatedKeyManagers
			at statement: virtualinvoke $r18.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer287794, $r17, varReplacer287794)

		ConstraintError violating CrySL rule for java.security.KeyStore (on Object #f4a17902cccd62d6bf77ff929ceae4e1e6f0be612261587224f32d6025d91f24)
			First parameter (with value "BKS") should be any of {JCEKS, JKS, DKS, PKCS11, PKCS12}
			at statement: $r10 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>(varReplacer287802)

		ConstraintError violating CrySL rule for javax.net.ssl.SSLContext (on Object #a19877d33b98f772059b358e9b531ad38d79b1a3ea02f2f5359482cfa99da4e2)
			First parameter (with value "TLS") should be any of {TLSv1.2}
			at statement: $r18 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer287797)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Third parameter was not properly generated as randomized
			at statement: virtualinvoke $r18.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer287794, $r17, varReplacer287794)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Second parameter was not properly generated as generatedTrustManagers
			at statement: virtualinvoke $r18.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer287794, $r17, varReplacer287794)


Findings in Java Class: com.google.android.exoplayer2.source.rtsp.auth.MD5

	 in Method: java.lang.String hash(java.lang.String)
		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #ef47732c588f21e2bc17619039317615d4bbdf9caf45d359719bae73a588d0f7)
			First parameter (with value "MD5") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: $r3 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer288382)


Findings in Java Class: com.neovisionaries.ws.client.HandshakeReader

	 in Method: void g(com.neovisionaries.ws.client.StatusLine,java.util.Map,java.lang.String)
		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #a562db72f79583189a9622d9a95bdd44b44c95c1ec5b49b60d5752cbec1eadc2)
			First parameter (with value "SHA-1") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: $r9 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer294641)


Findings in Java Class: com.google.api.client.auth.oauth.OAuthHmacSigner

	 in Method: java.lang.String computeSignature(java.lang.String)
		TypestateError violating CrySL rule for javax.crypto.Mac (on Object #f28a1100455cec13c1bb914a1275b0c4f1d9edf0da5d49533855e79df9cc65d6)
			Unexpected call to method <javax.crypto.Mac: byte[] doFinal(byte[])> on object of type javax.crypto.Mac. Expect a call to one of the following methods javax.crypto.Mac: void update(byte[]),javax.crypto.Mac: void doFinal(byte[],int),javax.crypto.Mac: byte[] doFinal(),javax.crypto.Mac: void update(byte),javax.crypto.Mac: void update(byte[],int,int)
			at statement: $r5 = virtualinvoke $r6.<javax.crypto.Mac: byte[] doFinal(byte[])>($r5)

		ConstraintError violating CrySL rule for javax.crypto.spec.SecretKeySpec (on Object #f9d2ceb2807a58cde79f7e85a90adc4b230920bf89758c87ce73707c0588a01a)
			Second parameter (with value "HmacSHA1") should be any of {AES, HmacSHA224, HmacSHA256, HmacSHA384, HmacSHA512}
			at statement: specialinvoke $r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r5, varReplacer297397)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as preparedKeyMaterial
			at statement: specialinvoke $r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r5, varReplacer297397)


Findings in Java Class: com.google.api.client.auth.oauth.OAuthHmacSha256Signer

	 in Method: java.lang.String computeSignature(java.lang.String)
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as preparedKeyMaterial
			at statement: specialinvoke $r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r5, varReplacer297401)

		TypestateError violating CrySL rule for javax.crypto.Mac (on Object #f84c75166b0c3699e861041451d8971cfd551113355dbb8c44b5cd851d600b0)
			Unexpected call to method <javax.crypto.Mac: byte[] doFinal(byte[])> on object of type javax.crypto.Mac. Expect a call to one of the following methods javax.crypto.Mac: void update(byte[]),javax.crypto.Mac: void doFinal(byte[],int),javax.crypto.Mac: byte[] doFinal(),javax.crypto.Mac: void update(byte),javax.crypto.Mac: void update(byte[],int,int)
			at statement: $r5 = virtualinvoke $r6.<javax.crypto.Mac: byte[] doFinal(byte[])>($r5)


Findings in Java Class: com.google.api.client.util.SecurityUtils

	 in Method: java.security.Signature getSha1WithRsaSignatureAlgorithm()
		ConstraintError violating CrySL rule for java.security.Signature (on Object #8967b1507d8fc0b9fc913d79d1c6a97e2fd264334982573ad02f08ea6c53a956)
			First parameter (with value "SHA1withRSA") should be any of {SHA256withRSA, SHA256withECDSA, SHA256withDSA, SHA224withDSA, NONEwithDSA, SHA1withDSA}
			at statement: $r0 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>(varReplacer297405)


	 in Method: byte[] sign(java.security.Signature,java.security.PrivateKey,byte[])
		RequiredPredicateError violating CrySL rule for java.security.Signature
			First parameter was not properly generated as generatedPrivkey
			at statement: virtualinvoke $r2.<java.security.Signature: void initSign(java.security.PrivateKey)>($r0)


Findings in Java Class: com.google.api.client.auth.openidconnect.IdTokenVerifier$PublicKeyLoader

	 in Method: java.security.PublicKey buildEs256PublicKey(com.google.api.client.auth.openidconnect.IdTokenVerifier$PublicKeyLoader$JsonWebKey)
		ConstraintError violating CrySL rule for java.security.AlgorithmParameters (on Object #ef0777ba39f936af2b363900f5e9ca79920aebf0d44e249faca21223623b5027)
			First parameter (with value "EC") should be any of {AES, Blowfish, DESede, DiffieHellman, DH, OEAP, PBEWithHmacSHA224AndAES_128, PBEWithHmacSHA256AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA512AndAES_128, PBEWithHmacSHA224AndAES_256, PBEWithHmacSHA256AndAES_256, PBEWithHmacSHA384AndAES_256, PBEWithHmacSHA512AndAES_256}
			at statement: $r8 = staticinvoke <java.security.AlgorithmParameters: java.security.AlgorithmParameters getInstance(java.lang.String)>(varReplacer297504)

		RequiredPredicateError violating CrySL rule for java.security.KeyFactory
			First parameter was not properly generated as speccedKey
			at statement: $r14 = virtualinvoke $r13.<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>($r12)


	 in Method: java.security.PublicKey buildRs256PublicKey(com.google.api.client.auth.openidconnect.IdTokenVerifier$PublicKeyLoader$JsonWebKey)
		RequiredPredicateError violating CrySL rule for java.security.KeyFactory
			First parameter was not properly generated as speccedKey
			at statement: $r9 = virtualinvoke $r8.<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>($r7)


Findings in Java Class: com.google.firebase.installations.local.IidStore

	 in Method: java.lang.String getIdFromPublicKey(java.security.PublicKey)
		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #5637b4552aa684fd69926f5841ab5f70d3b5fe4f9642533c48030667898a93da)
			First parameter (with value "SHA1") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: $r3 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer301081)


	 in Method: java.security.PublicKey parseKey(java.lang.String)
		RequiredPredicateError violating CrySL rule for java.security.KeyFactory
			First parameter was not properly generated as speccedKey
			at statement: $r5 = virtualinvoke $r3.<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>($r4)

		RequiredPredicateError violating CrySL rule for java.security.spec.X509EncodedKeySpec
			First parameter was not properly generated as preparedKeyMaterial
			at statement: specialinvoke $r4.<java.security.spec.X509EncodedKeySpec: void <init>(byte[])>($r2)


Findings in Java Class: me.pushy.sdk.lib.paho.internal.security.SSLSocketFactoryFactory

	 in Method: javax.net.ssl.SSLContext getSSLContext(java.lang.String)
		ConstraintError violating CrySL rule for javax.net.ssl.SSLContext (on Object #faf8a006ee2bf18d70acac36e6184b973d313a1f622eaa10afaeb42c1349d99c)
			First parameter (with value "TLS") should be any of {TLSv1.2}
			at statement: $r7 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>($r4)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Second parameter was not properly generated as generatedTrustManagers
			at statement: virtualinvoke $r7.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>($r17, $r25, varReplacer302065)

		NeverTypeOfError violating CrySL rule for javax.net.ssl.KeyManagerFactory (on Object #3502fa758305a1dec42a6535b8ce8189f7707f9bdc917efceea97f5a2943e84d)
			Second parameter should never be of type java.lang.String.
			at statement: virtualinvoke $r16.<javax.net.ssl.KeyManagerFactory: void init(java.security.KeyStore,char[])>($r14, $r10)

		HardCodedError violating CrySL rule for javax.net.ssl.KeyManagerFactory (on Object #3502fa758305a1dec42a6535b8ce8189f7707f9bdc917efceea97f5a2943e84d)
			Second parameter should never be hardcoded.
			at statement: virtualinvoke $r16.<javax.net.ssl.KeyManagerFactory: void init(java.security.KeyStore,char[])>($r14, $r10)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.TrustManagerFactory
			First parameter was not properly generated as generatedKeyStore
			at statement: virtualinvoke $r24.<javax.net.ssl.TrustManagerFactory: void init(java.security.KeyStore)>($r14)

		ConstraintError violating CrySL rule for javax.net.ssl.SSLContext (on Object #2de0dbcb962ff3cb3e0d9dc8e9469638e8762c9aa5d9bef5cf875912fda1093)
			First parameter (with value "TLS") should be any of {TLSv1.2}
			at statement: $r7 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String,java.lang.String)>($r4, $r3)

		NeverTypeOfError violating CrySL rule for java.security.KeyStore (on Object #5149894d05ef20df222d58c4a033421d6302e35e69a14f445f906bc16807ea17)
			Second parameter should never be of type java.lang.String.
			at statement: virtualinvoke $r14.<java.security.KeyStore: void load(java.io.InputStream,char[])>($r15, $r10)

		HardCodedError violating CrySL rule for java.security.KeyStore (on Object #5149894d05ef20df222d58c4a033421d6302e35e69a14f445f906bc16807ea17)
			Second parameter should never be hardcoded.
			at statement: virtualinvoke $r14.<java.security.KeyStore: void load(java.io.InputStream,char[])>($r15, $r10)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			First parameter was not properly generated as generatedKeyManagers
			at statement: virtualinvoke $r7.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>($r17, $r25, varReplacer302065)

		NeverTypeOfError violating CrySL rule for java.security.KeyStore (on Object #5149894d05ef20df222d58c4a033421d6302e35e69a14f445f906bc16807ea17)
			Second parameter should never be of type java.lang.String.
			at statement: virtualinvoke $r14.<java.security.KeyStore: void load(java.io.InputStream,char[])>($r15, $r10)

		HardCodedError violating CrySL rule for java.security.KeyStore (on Object #5149894d05ef20df222d58c4a033421d6302e35e69a14f445f906bc16807ea17)
			Second parameter should never be hardcoded.
			at statement: virtualinvoke $r14.<java.security.KeyStore: void load(java.io.InputStream,char[])>($r15, $r10)

		NeverTypeOfError violating CrySL rule for javax.net.ssl.KeyManagerFactory (on Object #3502fa758305a1dec42a6535b8ce8189f7707f9bdc917efceea97f5a2943e84d)
			Second parameter should never be of type java.lang.String.
			at statement: virtualinvoke $r16.<javax.net.ssl.KeyManagerFactory: void init(java.security.KeyStore,char[])>($r14, $r10)

		HardCodedError violating CrySL rule for javax.net.ssl.KeyManagerFactory (on Object #3502fa758305a1dec42a6535b8ce8189f7707f9bdc917efceea97f5a2943e84d)
			Second parameter should never be hardcoded.
			at statement: virtualinvoke $r16.<javax.net.ssl.KeyManagerFactory: void init(java.security.KeyStore,char[])>($r14, $r10)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Third parameter was not properly generated as randomized
			at statement: virtualinvoke $r7.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>($r17, $r25, varReplacer302065)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.KeyManagerFactory
			First parameter was not properly generated as generatedKeyStore
			at statement: virtualinvoke $r16.<javax.net.ssl.KeyManagerFactory: void init(java.security.KeyStore,char[])>($r14, $r10)

		NeverTypeOfError violating CrySL rule for java.security.KeyStore (on Object #5149894d05ef20df222d58c4a033421d6302e35e69a14f445f906bc16807ea17)
			Second parameter should never be of type java.lang.String.
			at statement: virtualinvoke $r14.<java.security.KeyStore: void load(java.io.InputStream,char[])>($r15, $r10)

		HardCodedError violating CrySL rule for java.security.KeyStore (on Object #5149894d05ef20df222d58c4a033421d6302e35e69a14f445f906bc16807ea17)
			Second parameter should never be hardcoded.
			at statement: virtualinvoke $r14.<java.security.KeyStore: void load(java.io.InputStream,char[])>($r15, $r10)


Findings in Java Class: com.amazonaws.auth.AbstractAWSSigner

	 in Method: byte[] v(byte[],byte[],com.amazonaws.auth.SigningAlgorithm)
		TypestateError violating CrySL rule for javax.crypto.Mac (on Object #3266d5e2525ddde35fe2fb531cbab811c48e57cdf817aa55f889c3e8ea4208a7)
			Unexpected call to method <javax.crypto.Mac: byte[] doFinal(byte[])> on object of type javax.crypto.Mac. Expect a call to one of the following methods javax.crypto.Mac: void update(byte[]),javax.crypto.Mac: void doFinal(byte[],int),javax.crypto.Mac: byte[] doFinal(),javax.crypto.Mac: void update(byte),javax.crypto.Mac: void update(byte[],int,int)
			at statement: $r2 = virtualinvoke $r6.<javax.crypto.Mac: byte[] doFinal(byte[])>($r2)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as preparedKeyMaterial
			at statement: specialinvoke $r1.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r3, $r5)


	 in Method: byte[] q(java.io.InputStream)
		IncompleteOperationError violating CrySL rule for java.security.DigestInputStream (on Object #9a42f5fce6ab5e869256ff69a376ac48773f99a18c8536697b6a39dd63ec220e)
			Operation on object of type com.amazonaws.internal.SdkDigestInputStream object not completed. Expected call to read
			at statement: $r2 = virtualinvoke $r3.<java.security.DigestInputStream: java.security.MessageDigest getMessageDigest()>()


Findings in Java Class: com.amazonaws.http.UrlHttpClient

	 in Method: void e(javax.net.ssl.HttpsURLConnection)
		ConstraintError violating CrySL rule for javax.net.ssl.SSLContext (on Object #4e6bd08e9498ee1e88a5063a40b66b859af9e8b99ff715cfd76c940346297dee)
			First parameter (with value "TLS") should be any of {TLSv1.2}
			at statement: $r2 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer311206)


Findings in Java Class: org.eclipse.paho.client.mqttv3.internal.security.SSLSocketFactoryFactory

	 in Method: javax.net.ssl.SSLContext m(java.lang.String)
		NeverTypeOfError violating CrySL rule for javax.net.ssl.KeyManagerFactory (on Object #9874d80d5ffc1b612283b4d3a090e0c226769a0cf475383238d9bcb291ce4fe7)
			Second parameter should never be of type java.lang.String.
			at statement: virtualinvoke $r16.<javax.net.ssl.KeyManagerFactory: void init(java.security.KeyStore,char[])>($r14, $r10)

		HardCodedError violating CrySL rule for javax.net.ssl.KeyManagerFactory (on Object #9874d80d5ffc1b612283b4d3a090e0c226769a0cf475383238d9bcb291ce4fe7)
			Second parameter should never be hardcoded.
			at statement: virtualinvoke $r16.<javax.net.ssl.KeyManagerFactory: void init(java.security.KeyStore,char[])>($r14, $r10)

		ConstraintError violating CrySL rule for javax.net.ssl.SSLContext (on Object #6fd7d3b8066c703279882a3420272c1601894e97062d9b49438b90baa52b9ddb)
			First parameter (with value "TLS") should be any of {TLSv1.2}
			at statement: $r7 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>($r4)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Third parameter was not properly generated as randomized
			at statement: virtualinvoke $r7.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>($r17, $r25, varReplacer312511)

		NeverTypeOfError violating CrySL rule for java.security.KeyStore (on Object #8ca32e7a619f6d439ce2104c6c119c9bcdc2bb140d11ce7542d46b85d53a5c01)
			Second parameter should never be of type java.lang.String.
			at statement: virtualinvoke $r14.<java.security.KeyStore: void load(java.io.InputStream,char[])>($r15, $r10)

		HardCodedError violating CrySL rule for java.security.KeyStore (on Object #8ca32e7a619f6d439ce2104c6c119c9bcdc2bb140d11ce7542d46b85d53a5c01)
			Second parameter should never be hardcoded.
			at statement: virtualinvoke $r14.<java.security.KeyStore: void load(java.io.InputStream,char[])>($r15, $r10)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			First parameter was not properly generated as generatedKeyManagers
			at statement: virtualinvoke $r7.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>($r17, $r25, varReplacer312511)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.KeyManagerFactory
			First parameter was not properly generated as generatedKeyStore
			at statement: virtualinvoke $r16.<javax.net.ssl.KeyManagerFactory: void init(java.security.KeyStore,char[])>($r14, $r10)

		ConstraintError violating CrySL rule for javax.net.ssl.SSLContext (on Object #6ce26975531a1cc6657f3c6e62c3f0f11bcc537f63f6d191408a72661873c6b3)
			First parameter (with value "TLS") should be any of {TLSv1.2}
			at statement: $r7 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String,java.lang.String)>($r4, $r3)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Second parameter was not properly generated as generatedTrustManagers
			at statement: virtualinvoke $r7.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>($r17, $r25, varReplacer312511)

		NeverTypeOfError violating CrySL rule for javax.net.ssl.KeyManagerFactory (on Object #9874d80d5ffc1b612283b4d3a090e0c226769a0cf475383238d9bcb291ce4fe7)
			Second parameter should never be of type java.lang.String.
			at statement: virtualinvoke $r16.<javax.net.ssl.KeyManagerFactory: void init(java.security.KeyStore,char[])>($r14, $r10)

		HardCodedError violating CrySL rule for javax.net.ssl.KeyManagerFactory (on Object #9874d80d5ffc1b612283b4d3a090e0c226769a0cf475383238d9bcb291ce4fe7)
			Second parameter should never be hardcoded.
			at statement: virtualinvoke $r16.<javax.net.ssl.KeyManagerFactory: void init(java.security.KeyStore,char[])>($r14, $r10)

		NeverTypeOfError violating CrySL rule for java.security.KeyStore (on Object #8ca32e7a619f6d439ce2104c6c119c9bcdc2bb140d11ce7542d46b85d53a5c01)
			Second parameter should never be of type java.lang.String.
			at statement: virtualinvoke $r14.<java.security.KeyStore: void load(java.io.InputStream,char[])>($r15, $r10)

		HardCodedError violating CrySL rule for java.security.KeyStore (on Object #8ca32e7a619f6d439ce2104c6c119c9bcdc2bb140d11ce7542d46b85d53a5c01)
			Second parameter should never be hardcoded.
			at statement: virtualinvoke $r14.<java.security.KeyStore: void load(java.io.InputStream,char[])>($r15, $r10)

		NeverTypeOfError violating CrySL rule for java.security.KeyStore (on Object #8ca32e7a619f6d439ce2104c6c119c9bcdc2bb140d11ce7542d46b85d53a5c01)
			Second parameter should never be of type java.lang.String.
			at statement: virtualinvoke $r14.<java.security.KeyStore: void load(java.io.InputStream,char[])>($r15, $r10)

		HardCodedError violating CrySL rule for java.security.KeyStore (on Object #8ca32e7a619f6d439ce2104c6c119c9bcdc2bb140d11ce7542d46b85d53a5c01)
			Second parameter should never be hardcoded.
			at statement: virtualinvoke $r14.<java.security.KeyStore: void load(java.io.InputStream,char[])>($r15, $r10)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.TrustManagerFactory
			First parameter was not properly generated as generatedKeyStore
			at statement: virtualinvoke $r24.<javax.net.ssl.TrustManagerFactory: void init(java.security.KeyStore)>($r14)


Findings in Java Class: org.acra.http.BaseHttpRequest

	 in Method: void b(javax.net.ssl.HttpsURLConnection)
		ConstraintError violating CrySL rule for javax.net.ssl.SSLContext (on Object #b7b51da3af2b337de3fa6dc31e83dc22b29d43fd811d71f2e7159c6ffb5da234)
			First parameter (with value "TLS") should be any of {TLSv1.2}
			at statement: $r8 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer330194)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Third parameter was not properly generated as randomized
			at statement: virtualinvoke $r8.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer330190, $r9, varReplacer330190)

		IncompleteOperationError violating CrySL rule for java.security.KeyStore (on Object #22a183d5116504e02ad96ba67561ecf0f83bf3a7f2bfba4ad5fe01efac8fa773)
			Operation on object of type java.security.KeyStore object not completed. Expected call to load
			at statement: virtualinvoke $r4.<javax.net.ssl.TrustManagerFactory: void init(java.security.KeyStore)>($r7)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			First parameter was not properly generated as generatedKeyManagers
			at statement: virtualinvoke $r8.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer330190, $r9, varReplacer330190)


Findings in Java Class: org.apache.http.impl.auth.DigestScheme

	 in Method: java.security.MessageDigest createMessageDigest(java.lang.String)
		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #bafd683999767fa653a59f6561b5fb73a4ec80f20b87a366e3f277c0d9c77bd)
			First parameter (with value "MD5") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: $r4 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r3)


Findings in Java Class: org.apache.http.impl.auth.NTLMEngineImpl

	 in Method: byte[] RC4(byte[],byte[])
		NeverTypeOfError violating CrySL rule for javax.crypto.spec.SecretKeySpec (on Object #576a5d61080595e559f214f3f401dfdc7a79f80dc6dc870c421855c6be93cc5c)
			First parameter should never be of type java.lang.String.
			at statement: specialinvoke $r0.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r2, varReplacer336850)

		NeverTypeOfError violating CrySL rule for javax.crypto.spec.SecretKeySpec (on Object #576a5d61080595e559f214f3f401dfdc7a79f80dc6dc870c421855c6be93cc5c)
			First parameter should never be of type java.lang.String.
			at statement: specialinvoke $r0.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r2, varReplacer336850)

		NeverTypeOfError violating CrySL rule for javax.crypto.spec.SecretKeySpec (on Object #576a5d61080595e559f214f3f401dfdc7a79f80dc6dc870c421855c6be93cc5c)
			First parameter should never be of type java.lang.String.
			at statement: specialinvoke $r0.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r2, varReplacer336850)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generatedKey
			at statement: virtualinvoke $r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer336849, $r0)

		NeverTypeOfError violating CrySL rule for javax.crypto.spec.SecretKeySpec (on Object #576a5d61080595e559f214f3f401dfdc7a79f80dc6dc870c421855c6be93cc5c)
			First parameter should never be of type java.lang.String.
			at statement: specialinvoke $r0.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r2, varReplacer336850)

		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #69d1ba98f57d137a3e49be1e98bd6668454574a1413d25260fc2dceb48d654d0)
			First parameter (with value "RC4") should be any of {AES, PBEWithHmacSHA224AndAES_128, PBEWithHmacSHA256AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA512AndAES_128, PBEWithHmacSHA224AndAES_256, PBEWithHmacSHA256AndAES_256, PBEWithHmacSHA384AndAES_256, PBEWithHmacSHA512AndAES_256}
			at statement: $r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer336848)

		NeverTypeOfError violating CrySL rule for javax.crypto.spec.SecretKeySpec (on Object #576a5d61080595e559f214f3f401dfdc7a79f80dc6dc870c421855c6be93cc5c)
			First parameter should never be of type java.lang.String.
			at statement: specialinvoke $r0.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r2, varReplacer336850)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as preparedKeyMaterial
			at statement: specialinvoke $r0.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r2, varReplacer336850)

		ConstraintError violating CrySL rule for javax.crypto.spec.SecretKeySpec (on Object #576a5d61080595e559f214f3f401dfdc7a79f80dc6dc870c421855c6be93cc5c)
			Second parameter (with value "RC4") should be any of {AES, HmacSHA224, HmacSHA256, HmacSHA384, HmacSHA512}
			at statement: specialinvoke $r0.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r2, varReplacer336850)


	 in Method: byte[] ntlm2SessionResponse(byte[],byte[],byte[])
		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #ba6246762479f8f73739c18bb48a94f0fa3d570e9c00e6184fb49e02e8ab25ea)
			First parameter (with value "MD5") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: $r3 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer337340)


	 in Method: java.security.Key createDESKey(byte[],int)
		ConstraintError violating CrySL rule for javax.crypto.spec.SecretKeySpec (on Object #21c26e780b493ec7cee2fa4c0e201c71833356dec62c09969e7f9ab667c56e4d)
			Second parameter (with value "DES") should be any of {AES, HmacSHA224, HmacSHA256, HmacSHA384, HmacSHA512}
			at statement: specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, varReplacer337349)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as preparedKeyMaterial
			at statement: specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, varReplacer337349)


	 in Method: byte[] lmResponse(byte[],byte[])
		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #b0d5d0f333e043b4183ddb61051d1a46f709b5ab52bfbadbde6409551ae1d7c9)
			First parameter (with value "DES/ECB/NoPadding") should be any of {AES, PBEWithHmacSHA224AndAES_128, PBEWithHmacSHA256AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA512AndAES_128, PBEWithHmacSHA224AndAES_256, PBEWithHmacSHA256AndAES_256, PBEWithHmacSHA384AndAES_256, PBEWithHmacSHA512AndAES_256}
			at statement: $r6 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer337364)

		TypestateError violating CrySL rule for javax.crypto.Cipher (on Object #b0d5d0f333e043b4183ddb61051d1a46f709b5ab52bfbadbde6409551ae1d7c9)
			Unexpected call to method init on object of type javax.crypto.Cipher. Expect a call to one of the following methods update,doFinal
			at statement: virtualinvoke $r6.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer337350, $r4)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generatedKey
			at statement: virtualinvoke $r6.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer337351, $r5)


	 in Method: byte[] lmHash(java.lang.String)
		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #a7341788c2aeb318200f218bb8e6b18c75284c69efef5210edd5d727812ff02)
			First parameter (with value "DES/ECB/NoPadding") should be any of {AES, PBEWithHmacSHA224AndAES_128, PBEWithHmacSHA256AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA512AndAES_128, PBEWithHmacSHA224AndAES_256, PBEWithHmacSHA256AndAES_256, PBEWithHmacSHA384AndAES_256, PBEWithHmacSHA512AndAES_256}
			at statement: $r6 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer337683)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generatedKey
			at statement: virtualinvoke $r6.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer337682, $r4)

		TypestateError violating CrySL rule for javax.crypto.Cipher (on Object #a7341788c2aeb318200f218bb8e6b18c75284c69efef5210edd5d727812ff02)
			Unexpected call to method init on object of type javax.crypto.Cipher. Expect a call to one of the following methods update,doFinal
			at statement: virtualinvoke $r6.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer337670, $r5)


Findings in Java Class: org.apache.http.impl.auth.NTLMEngineImpl$CipherGen

	 in Method: byte[] getLanManagerSessionKey()
		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #fdaa2f248a1633422ece896a8d00d110e916413f1bda92cce50743b74aa6ea4e)
			First parameter (with value "DES/ECB/NoPadding") should be any of {AES, PBEWithHmacSHA224AndAES_128, PBEWithHmacSHA256AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA512AndAES_128, PBEWithHmacSHA224AndAES_256, PBEWithHmacSHA256AndAES_256, PBEWithHmacSHA384AndAES_256, PBEWithHmacSHA512AndAES_256}
			at statement: $r6 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer337324)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generatedKey
			at statement: virtualinvoke $r6.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer337321, $r5)


Findings in Java Class: org.apache.http.impl.auth.NTLMEngineImpl$HMACMD5

	 in Method: void <init>(byte[])
		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #7d75d2d499fbcd258771a0ba850836a6e2da87a33b0be89e84635b211d4f8087)
			First parameter (with value "MD5") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: $r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer337698)


Findings in Java Class: com.amazonaws.internal.keyvaluestore.AWSKeyValueStore

	 in Method: java.lang.String c(java.security.Key,java.security.spec.AlgorithmParameterSpec,java.lang.String)
		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Third parameter was not properly generated as preparedGCM
			at statement: virtualinvoke $r5.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer226592, $r1, $r2)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generatedKey
			at statement: virtualinvoke $r5.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer226592, $r1, $r2)


	 in Method: java.security.spec.AlgorithmParameterSpec h(byte[])
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.IvParameterSpec
			First parameter was not properly generated as randomized
			at statement: specialinvoke $r3.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r1)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.GCMParameterSpec
			Second parameter was not properly generated as randomized
			at statement: specialinvoke $r2.<javax.crypto.spec.GCMParameterSpec: void <init>(int,byte[])>(varReplacer228571, $r1)


	 in Method: java.lang.String d(java.security.Key,java.security.spec.AlgorithmParameterSpec,java.lang.String)
		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Third parameter was not properly generated as preparedGCM
			at statement: virtualinvoke $r4.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer228574, $r1, $r2)


Findings in Java Class: org.conscrypt.OpenSSLECKeyPairGenerator

	 in Method: java.security.KeyPair generateKeyPair()
		RequiredPredicateError violating CrySL rule for java.security.KeyPair
			Second parameter was not properly generated as generatedPrivkey
			at statement: specialinvoke $r10.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r11, $r12)

		RequiredPredicateError violating CrySL rule for java.security.KeyPair
			First parameter was not properly generated as generatedPubkey
			at statement: specialinvoke $r10.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r11, $r12)


Findings in Java Class: com.amazonaws.cognito.clientcontext.util.SignatureGenerator

	 in Method: java.lang.String a(java.lang.String,java.lang.String,java.lang.String)
		RequiredPredicateError violating CrySL rule for javax.crypto.Mac
			First parameter was not properly generated as generatedKey
			at statement: virtualinvoke $r6.<javax.crypto.Mac: void init(java.security.Key)>($r2)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as preparedKeyMaterial
			at statement: specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r7, varReplacer266279)


Findings in Java Class: org.conscrypt.OpenSSLX509Certificate

	 in Method: void verifyInternal(java.security.PublicKey,java.lang.String)
		RequiredPredicateError violating CrySL rule for java.security.Signature
			First parameter was not properly generated as generatedPubkey
			at statement: virtualinvoke $r3.<java.security.Signature: void initVerify(java.security.PublicKey)>($r1)


	 in Method: java.security.PublicKey getPublicKey()
		RequiredPredicateError violating CrySL rule for java.security.KeyFactory
			First parameter was not properly generated as speccedKey
			at statement: $r7 = virtualinvoke $r10.<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>($r1)

		RequiredPredicateError violating CrySL rule for java.security.spec.X509EncodedKeySpec
			First parameter was not properly generated as preparedKeyMaterial
			at statement: specialinvoke $r1.<java.security.spec.X509EncodedKeySpec: void <init>(byte[])>($r9)


Findings in Java Class: com.amazonaws.mobileconnectors.cognitoidentityprovider.util.CognitoSecretHash

	 in Method: java.lang.String a(java.lang.String,java.lang.String,java.lang.String)
		RequiredPredicateError violating CrySL rule for javax.crypto.Mac
			First parameter was not properly generated as generatedKey
			at statement: virtualinvoke $r7.<javax.crypto.Mac: void init(java.security.Key)>($r5)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as preparedKeyMaterial
			at statement: specialinvoke $r5.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r6, varReplacer95379)


Findings in Java Class: com.google.android.exoplayer2.upstream.crypto.AesFlushingCipher

	 in Method: void <init>(int,byte[],long,long)
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as preparedKeyMaterial
			at statement: specialinvoke $r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, $r5)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.IvParameterSpec
			First parameter was not properly generated as randomized
			at statement: specialinvoke $r7.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r1)


Findings in Java Class: com.google.common.hash.MacHashFunction

	 in Method: javax.crypto.Mac getMac(java.lang.String,java.security.Key)
		RequiredPredicateError violating CrySL rule for javax.crypto.Mac
			First parameter was not properly generated as generatedKey
			at statement: virtualinvoke $r0.<javax.crypto.Mac: void init(java.security.Key)>($r2)


Findings in Java Class: com.amazonaws.mobileconnectors.cognitoidentityprovider.CognitoUser

	 in Method: com.amazonaws.services.cognitoidentityprovider.model.RespondToAuthChallengeRequest X(com.amazonaws.services.cognitoidentityprovider.model.RespondToAuthChallengeResult,java.lang.String,java.lang.String,com.amazonaws.mobileconnectors.cognitoidentityprovider.CognitoUser$AuthenticationHelper)
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as preparedKeyMaterial
			at statement: specialinvoke $r14.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r11, varReplacer258821)

		RequiredPredicateError violating CrySL rule for javax.crypto.Mac
			First parameter was not properly generated as generatedKey
			at statement: virtualinvoke $r13.<javax.crypto.Mac: void init(java.security.Key)>($r14)


	 in Method: com.amazonaws.services.cognitoidentityprovider.model.RespondToAuthChallengeRequest N0(java.util.Map,java.lang.String,java.lang.String,java.lang.String,com.amazonaws.mobileconnectors.cognitoidentityprovider.CognitoUser$AuthenticationHelper)
		RequiredPredicateError violating CrySL rule for javax.crypto.Mac
			First parameter was not properly generated as generatedKey
			at statement: virtualinvoke $r21.<javax.crypto.Mac: void init(java.security.Key)>($r22)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as preparedKeyMaterial
			at statement: specialinvoke $r22.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r19, varReplacer101069)


======================= CryptoAnalysis Summary ==========================
	Number of CrySL rules: 47
	Number of Objects Analyzed: 333

	CryptoAnalysis found the following violations. For details see description above.
	ForbiddenMethodError: 1
	ConstraintError: 61
	NeverTypeOfError: 20
	IncompleteOperationError: 62
	HardCodedError: 15
	TypestateError: 16
	RequiredPredicateError: 106
=====================================================================
